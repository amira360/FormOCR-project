{"version":3,"sources":["views/Authentication/sign-up/Register.js","views/Authentication/bg.jpg","views/Authentication/icon.gif"],"names":["Register","props","React","useState","domainName","setDomainName","domainNameState","setDomainNameState","username","setUsername","usernameState","setUsernameState","companyName","setCompanyName","companyNameState","setCompanyNameState","firstName","setFirstName","firstNameState","setFirstNameState","lastName","setLastName","lastNameState","setLastNameState","countryName","setCountryName","countryNameState","setCountryNameState","mobile","setMobile","mobileState","setMobileState","registerEmail","setRegisterEmail","registerEmailState","setRegisterEmailState","registerPassword","setRegisterPassword","registerPasswordState","setRegisterPasswordState","registerConfirmPassword","setRegisterConfirmPassword","registerConfirmPasswordState","setRegisterConfirmPasswordState","comment","setComment","commentState","setCommentState","termAndCondition","setTermAndCondition","termAndConditionState","setTermAndConditionState","countries","setCountries","emailError","setEmailError","usernameError","setUsernameError","domainNameError","setDomainNameError","token","setToken","useEffect","fetch","COUNTRY_SERVICE","then","response","json","data","console","log","countriesFromApi","map","country","value","name","display","catch","error","verifyLength","length","className","md","style","background","image","src","logo","width","borderRadius","to","color","shape","active","tabIndex","noValidate","onSubmit","event","preventDefault","match","params","user","company","obj","requestOptions","method","headers","body","JSON","stringify","endpoint","USER_SERVICE","localStorage","clear","setItem","history","push","alert","invalid","valid","type","id","autoComplete","onChange","target","DOMAIN_SERVICE","Promise","resolve","reject","text","parse","err","verifyDomainName","placeholder","required","custom","disabled","selected","RegExp","test","mode","verifyUsernameExist","email","verifyEmailExist","variant","onClick","checked","htmlFor","href","block"],"mappings":"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","file":"static/js/82.141c7fe1.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody, CCardFooter,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm, CFormGroup,\n  CInput, CInputCheckbox,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText, CInputRadio, CInvalidFeedback, CLabel,\n  CRow, CSelect, CValidFeedback\n} from '@coreui/react';\nimport CIcon from '@coreui/icons-react'\nimport {SERVER_URL, COUNTRY_SERVICE, USER_SERVICE, DOMAIN_SERVICE} from '../../../constants';\nimport image from \"../bg.jpg\";\nimport logo from './../icon.gif';\n\nconst Register = (props) => {\n  const [domainName, setDomainName] = React.useState(\"\");\n  const [domainNameState, setDomainNameState] = React.useState(\"\");\n  const [username, setUsername] = React.useState(\"\");\n  const [usernameState, setUsernameState] = React.useState(\"\");\n  const [companyName, setCompanyName] = React.useState(\"\");\n  const [companyNameState, setCompanyNameState] = React.useState(\"\");\n  const [firstName, setFirstName] = React.useState(\"\");\n  const [firstNameState, setFirstNameState] = React.useState(\"\");\n  const [lastName, setLastName] = React.useState(\"\");\n  const [lastNameState, setLastNameState] = React.useState(\"\");\n  const [countryName, setCountryName] = React.useState(\"\");\n  const [countryNameState, setCountryNameState] = React.useState(\"\");\n  const [mobile, setMobile] = React.useState(\"\");\n  const [mobileState, setMobileState] = React.useState(\"\");\n  const [registerEmail, setRegisterEmail] = React.useState(\"\");\n  const [registerEmailState, setRegisterEmailState] = React.useState(\"\");\n  const [registerPassword, setRegisterPassword] = React.useState(\"\");\n  const [registerPasswordState, setRegisterPasswordState] = React.useState(\"\");\n  const [registerConfirmPassword, setRegisterConfirmPassword] = React.useState(\"\");\n  const [registerConfirmPasswordState, setRegisterConfirmPasswordState] = React.useState(\"\");\n  const [comment, setComment] = React.useState(\"\");\n  const [commentState, setCommentState] = React.useState(\"\");\n  const [termAndCondition, setTermAndCondition] = React.useState(\"\");\n  const [termAndConditionState, setTermAndConditionState] = React.useState(\"\");\n  const [countries, setCountries] = React.useState([]);\n  const [emailError, setEmailError] = React.useState(\"\");\n  const [usernameError, setUsernameError] = React.useState(\"\");\n  const [domainNameError, setDomainNameError] = React.useState(\"\");\n  const [token, setToken] = React.useState(null);\n\n  useEffect(() => {\n   /* const headers = {\n      method: 'GET',\n   //   mode: 'no-cors',\n      headers: {\n\n        'Content-Type': 'application/json'\n\n      },\n    }*/\n      fetch(COUNTRY_SERVICE + \"/api/auth/getCountries\")\n        .then((response) => {\n          return response.json();\n        })\n        .then(data => {\n          console.log(data)\n          let countriesFromApi = data.map(country => {\n            return {\n              value : country.name,\n              display : country.name\n            }})\n          setCountries(countriesFromApi);\n          console.log(countriesFromApi)\n        }).catch(error => {\n        console.log(error);\n      });\n  },[]);\n\n /* const verifyEmail = value => {\n    var emailRex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (emailRex.test(value)) {\n      return true;\n    }\n    return false;\n  };*/\n\n\n  // function that verifies if a string has a given length or not\n  const verifyLength = (value, length) => {\n    if (value.length >= length) {\n      return true;\n    }\n    return false;\n  };\n  // function that verifies if value contains only numbers\n  const verifyNumber = value => {\n    var numberRex = new RegExp(\"^[0-9 +]+$\");\n    if (numberRex.test(value)) {\n      return true;\n    }\n    return false;\n  };\n  // verifies if value is a valid URL\n  const verifyUrl = value => {\n    try {\n      new URL(value);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n\n  const handleFormSubmit =(event ) => {\n    event.preventDefault();\n\n     if(props.match.params !== \"undefined\"){\n        setToken(props.match.params.token);\n     }\n    if (usernameState === \"\") {\n      setUsernameState(\"error\");\n    }\n    if (domainNameState === \"\") {\n      setDomainNameState(\"error\");\n    }\n    if (companyNameState === \"\") {\n      setCompanyNameState(\"error\");\n    }\n    if (firstNameState === \"\") {\n      setFirstNameState(\"error\");\n    }\n    if (lastNameState === \"\") {\n      setLastNameState(\"error\");\n    }\n    if (countryNameState === \"\") {\n      setCountryNameState(\"error\");\n    }\n    if (mobileState === \"\") {\n      setMobileState(\"error\");\n    }\n\n    if (registerEmailState === \"\") {\n      setRegisterEmailState(\"error\");\n    }\n    if (registerPasswordState=== \"\") {\n      setRegisterPasswordState(\"error\");\n    }\n    if (registerConfirmPasswordState === \"\") {\n      setRegisterConfirmPasswordState(\"error\");\n    }\n    if (commentState === \"\") {\n      setCommentState(\"error\");\n    }\n    if ( termAndConditionState === \"\") {\n      setTermAndConditionState(\"error\");\n    }\n\n    if (usernameState===\"success\" && domainNameState === \"success\" && companyNameState === \"success\" && firstNameState === \"success\"\n      && lastNameState === \"success\" && countryNameState === \"success\" && mobileState === \"success\"\n      && registerEmailState === \"success\" && registerPasswordState === \"success\" && registerConfirmPasswordState === \"success\"\n      && commentState === \"success\" && termAndConditionState === \"success\" ){\n\n      if (registerPassword === registerConfirmPassword){\n        const user = {\n          firstName: firstName,\n          lastName: lastName,\n          mobile: mobile,\n          registerEmail: registerEmail,\n          username: username,\n          registerPassword: registerPassword,\n          registerConfirmPassword: registerConfirmPassword,\n        }\n\n        const company = {\n          domainName: domainName,\n          companyName: companyName,\n          country: countryName,\n          comment: comment,\n          termAndCondition: termAndCondition,\n        }\n\n        let obj ={}\n        obj.user= user;\n        obj.company=company;\n        obj.token=token;\n        const requestOptions = {\n          method: 'POST',\n        //  mode: 'no-cors',\n          headers: {\n            \"X-Tenant\": \"ISCT-GROUP\",\n            'Content-Type': 'application/json'\n          },\n          body:JSON.stringify(obj)\n        };\n        const endpoint = USER_SERVICE + \"/api/auth/subscription/sendDemoRequest\";\n        fetch(endpoint, requestOptions)\n          .then(response => response.json())\n\n          .catch(error => {\n            console.log(error);\n          });\n        localStorage.clear();\n        localStorage.setItem('new_account', \"true\");\n        props.history.push(\"/domain\")\n      }else {\n        alert('Verify your password !');\n      }\n    }\n  };\n  const verifyEmail = value => {\n    var emailRex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (emailRex.test(value)) {\n      return true;\n    }\n    return false;\n  };\n  const verifyDomainName = (domainName) => {\n    const requestOptions = {\n      method: 'POST',\n      //mode: 'no-cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({domainName: domainName})\n    };\n    fetch(DOMAIN_SERVICE + '/api/auth/verifyDomain', requestOptions)\n      .then(response => {\n        return new Promise((resolve, reject) => {\n          response.text().then(body => {\n            resolve(\n              body.length ? JSON.parse(body) : null\n            );\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      })\n      .then( data =>\n      {\n        console.log(data);\n        if (data === null) {\n          setDomainNameState (\"success\") ;\n        } else {\n          setDomainNameState(\"exist\") ;\n          setDomainNameError(\"Domain name not available ! \")\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  const verifyEmailExist = (email) => {\n    const requestOptions = {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json' },\n      body: JSON.stringify({email: email})\n    };\n    fetch(USER_SERVICE + '/api/auth/user/verifyEmail', requestOptions)\n      .then(response => response.json())\n      .then(data =>\n      {\n        if (data === null) {\n          setRegisterEmailState(\"success\");\n        } else {\n          setRegisterEmailState(\"exist\");\n          setEmailError(\"Email not available !\")\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  const verifyUsernameExist = (username) => {\n    const requestOptions = {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({username: username})\n    };\n    fetch(USER_SERVICE + '/api/auth/user/verifyUsername', requestOptions)\n        .then(response => {\n          return new Promise((resolve, reject) => {\n            response.text().then(body => {\n              resolve(\n                  body.length ? JSON.parse(body) : null\n              );\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        })\n      .then(data =>\n      {\n        if (data === null) {\n          setUsernameState(\"success\");\n        } else {\n          setUsernameState(\"existe\");\n          setUsernameError(\"Nom d'utilisateur indisponible!\")\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"12\">\n            <CCardGroup>\n              <CCard className=\"text-white py-4 col-md-5 order-md-2\" style={{background:` linear-gradient(rgba(0, 0, 255, 0.0), rgba(0, 0, 255, 0.0)), url(${image})`}}>\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <img src={logo}  width=\"150px\" style={{borderRadius: \"10px\"}} ></img>\n                   {/* <h2 className=\"text-white\"><b>ISCT-GROUP <br/>Plateforme</b></h2>*/}\n\n                    <p className=\"mt-5\">Vous avez déjà un compte ?</p>\n                    <Link to=\"/domain\">\n                      <CButton color=\"primary\" shape=\"pill\" active tabIndex={-1} >\n                        <b>Se connecter</b> </CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard>\n              <CCard className=\"p-4 col-md-7 order-md-1\">\n                <CCardBody>\n                  <CForm  noValidate onSubmit={handleFormSubmit} method=\"post\">\n                    <h1>S'inscrire</h1>\n                    <p className=\"text-muted\">Informations client</p>\n\n                    <CInputGroup className=\"mb-3\">\n                      <CInput invalid={domainNameState === \"error\" || domainNameState === \"exist\"} valid={domainNameState === \"success\"}\n                              type=\"text\" id=\"domainName\"\n                              autoComplete=\"none\"\n                              value={domainName}\n                              onChange={\n                                event => {\n                                  setDomainName(event.target.value)\n                                  if (verifyLength(event.target.value, 3)) {\n                                    setDomainNameState(\"success\");\n                                    verifyDomainName(event.target.value)\n                                  } else {\n                                    setDomainNameState(\"error\");\n                                    setDomainNameError(\"Le nom de domaine est requis ! \")\n                                  }\n                                }\n                              }\n                              placeholder=\"Nom de domaine *\"\n                      required />\n                     {/* <CInputGroupPrepend>\n                        <CInputGroupText>\n                          .isct-group.com\n                        </CInputGroupText>\n                      </CInputGroupPrepend>*/}\n                      <CInvalidFeedback className=\"help-block\">\n                        {domainNameError}\n                      </CInvalidFeedback>\n                    </CInputGroup>\n\n                    <CInputGroup className=\"mb-3\">\n                      <CInput invalid={companyNameState === \"error\"} valid={companyNameState === \"success\"}\n                              type=\"text\" id=\"companyName\"\n                              value={companyName}\n                              autoComplete=\"none\"\n                              onChange={\n                                event => {\n                                  setCompanyName(event.target.value)\n                                  if (verifyLength(event.target.value, 3)) {\n                                    setCompanyNameState(\"success\");\n                                  } else {\n                                    setCompanyNameState(\"error\");\n                                  }\n                                }\n                              }\n                              placeholder=\"Nom de l'entreprise *\"\n                              required />\n\n                      <CInvalidFeedback className=\"help-block\">\n                        Company name is required !\n                      </CInvalidFeedback>\n                    </CInputGroup>\n\n                    <CInputGroup className=\"mb-3\">\n                      <CInput type=\"text\" placeholder=\"Prénom *\"\n                              id=\"firstName\"\n                              autoComplete=\"none\"\n                              invalid={firstNameState === \"error\"} valid={firstNameState === \"success\"}\n                              onChange={event => {\n                                if (verifyLength(event.target.value, 3)) {\n                                  setFirstNameState(\"success\");\n                                } else {\n                                  setFirstNameState(\"error\");\n                                }\n                                setFirstName(event.target.value)\n                              }}\n                              required />\n                      <CInvalidFeedback className=\"help-block\">\n                        First name is required !\n                      </CInvalidFeedback>\n                    </CInputGroup>\n\n                    <CInputGroup className=\"mb-3\">\n\n                      <CInput type=\"text\"\n                              placeholder=\"Nom *\"\n                              autoComplete=\"none\"\n                              id=\"lastName\"\n                              invalid={lastNameState === \"error\"} valid={lastNameState === \"success\"}\n                              onChange={event => {\n                                if (verifyLength(event.target.value, 3)) {\n                                  setLastNameState(\"success\");\n                                } else {\n                                  setLastNameState(\"error\");\n                                }\n                                setLastName(event.target.value)\n                              }}\n                              required />\n                      <CInvalidFeedback className=\"help-block\">\n                        Last name is required !\n                      </CInvalidFeedback>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-3\">\n\n                      <CSelect custom\n                               id=\"countryName\"\n                               autoComplete=\"none\"\n                              invalid={countryNameState === \"error\"} valid={countryNameState === \"success\"}\n                               onChange={event => {\n                                 setCountryName(event.target.value)\n                                 if (event.target.value !== '') {\n                                   setCountryNameState(\"success\");\n                                 } else {\n                                   setCountryNameState(\"error\");\n                                 }\n                               }}\n                               required>\n                        <option disabled selected>\n                          Veuillez choisir le pays *\n                        </option>\n                        {countries.map((country) =>\n                          <option\n                            key={country.value}\n                            value={country.value}\n                          >\n                            {country.display}\n                          </option>\n                        )}\n                      </CSelect>\n                      <CInvalidFeedback className=\"help-block\">\n                        Le pays est requis !\n                      </CInvalidFeedback>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-3\">\n                      <CInput type=\"text\"\n                              placeholder=\"Mobile *\"\n                              id=\"mobile\"\n                              autoComplete=\"none\"\n                              invalid={mobileState === \"error\"} valid={mobileState === \"success\"}\n                              onChange={event => {\n                                if (verifyNumber(event.target.value)) {\n                                  setMobileState(\"success\");\n                                } else {\n                                  setMobileState(\"error\");\n                                }\n                                setMobile(event.target.value)\n                              }}\n                              required/>\n                      <CInvalidFeedback className=\"help-block\">\n                        Le numéro de téléphone est requis !\n                      </CInvalidFeedback>\n                    </CInputGroup>\n\n                    <br/>\n                    <p className=\"text-muted\">Paramètres du compte</p>\n\n\n                    <CInputGroup className=\"mb-3\">\n\n                      <CInput type=\"text\"\n                              placeholder=\"Nom d'utilisateur de l'administrateur *\"\n                              id=\"username\"\n                              autoComplete=\"none\"\n                              invalid={usernameState === \"error\" || usernameState === \"exist\"} valid={usernameState === \"success\"}\n                              onChange={ event => {\n                                if (verifyLength(event.target.value, 5)) {\n                                  setUsernameState(\"success\");\n                                  verifyUsernameExist(event.target.value);\n                                } else {\n                                  setUsernameState(\"error\");\n                                  setUsernameError(\"Le nom d'utilisateur est requis ! \")\n                                }\n                                setUsername(event.target.value)\n                              }}\n                              required/>\n                      <CInvalidFeedback className=\"help-block\">\n                        {usernameError}\n                      </CInvalidFeedback>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-3\">\n\n                      <CInput type=\"email\"\n                              placeholder=\"Email de l'administrateur *\"\n                              id=\"registerEmail\"\n                              autoComplete=\"none\"\n                             invalid={registerEmailState === \"error\" || registerEmailState === \"exist\"} valid={registerEmailState === \"success\"}\n                              onChange={event => {\n\n                                if (verifyEmail(event.target.value)) {\n                                  setRegisterEmailState(\"success\");\n                                  verifyEmailExist( event.target.value);\n\n                                } else {\n                                  setRegisterEmailState(\"error\");\n                                  setEmailError(\"Email est requis ! \")\n                                }\n\n                                setRegisterEmail(event.target.value)\n\n                              }}\n                              required />\n                      <CInvalidFeedback className=\"help-block\">\n\n                        {emailError}\n                      </CInvalidFeedback>\n                    </CInputGroup>\n\n\n                    <CInputGroup className=\"mb-3\">\n\n                      <CInput type=\"password\" placeholder=\"Mot de passe administrateur *\"\n                              id=\"registerPassword\"\n                              invalid={registerPasswordState === \"error\"} valid={registerPasswordState === \"success\"}\n                              onChange={event => {\n                                if (verifyLength(event.target.value, 1)) {\n                                  setRegisterPasswordState(\"success\");\n                                } else {\n                                  setRegisterPasswordState(\"error\");\n                                }\n                                setRegisterPassword(event.target.value)\n                              }}\n                              required />\n                      <CInvalidFeedback className=\"help-block\">\n                        Password is required !\n                      </CInvalidFeedback>\n                    </CInputGroup>\n\n                    <CInputGroup className=\"mb-3\">\n\n                      <CInput type=\"password\" placeholder=\"Confirmez le mot de passe*\"\n                              id=\"registerConfirmPassword\"\n                              invalid={registerConfirmPasswordState === \"error\"} valid={registerConfirmPasswordState === \"success\"}\n                              onChange={event => {\n                                if (registerPassword === event.target.value) {\n                                  setRegisterConfirmPasswordState(\"success\");\n                                } else {\n                                  setRegisterConfirmPasswordState(\"error\");\n                                }\n                                setRegisterConfirmPassword(event.target.value)\n                              }}\n                              required />\n                      <CInvalidFeedback className=\"help-block\">\n                        Le mot de passe n'est pas valide !\n                      </CInvalidFeedback>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n\n                      <CInput type=\"text\" id=\"comment\" placeholder=\"Pourquoi veux-tu essayer ? *\"\n                              invalid={commentState === \"error\"} valid={commentState === \"success\"}\n                              autoComplete=\"none\"\n                              onChange={event => {\n                                if (verifyLength(event.target.value, 6)){\n                                  setCommentState(\"success\");\n                                } else {\n                                  setCommentState(\"error\");\n                                }\n                                setComment(event.target.value)\n                              }}\n                              required />\n                      <CInvalidFeedback className=\"help-block\">\n                        Le commentaire est requis !\n                      </CInvalidFeedback>\n                    </CInputGroup>\n                    <CFormGroup variant=\"checkbox\" className=\"checkbox\">\n                      <CInputCheckbox className=\"form-check-input\" id=\"termAndCondition\"\n                                   invalid={termAndConditionState === \"error\"} valid={termAndConditionState === \"success\"}\n                                   onClick={event => {\n                                     if (event.target.checked) {\n                                       setTermAndConditionState(\"success\");\n                                     } else {\n                                       setTermAndConditionState(\"error\");\n                                     }\n                                     setTermAndCondition(event.target.checked)\n                                   }}\n                                   name=\"radios\" />\n\n                      <CLabel variant=\"checkbox\" className=\"form-check-label\" htmlFor=\"termAndCondition\">\n                         <span>\n                                 J'accepte les{\" \"}\n                           <a href=\"#\">les termes et conditions</a>.\n                                </span>\n                      </CLabel>\n                    </CFormGroup>\n                    <CCardFooter>\n                          <CButton type=\"submit\" color=\"primary\" shape=\"pill\" block>Demande de démo</CButton>\n                    </CCardFooter>\n\n                  </CForm>\n                </CCardBody>\n              </CCard>\n\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Register\n","export default __webpack_public_path__ + \"static/media/bg.608704a5.jpg\";","export default __webpack_public_path__ + \"static/media/icon.cfaf8cec.gif\";"],"sourceRoot":""}