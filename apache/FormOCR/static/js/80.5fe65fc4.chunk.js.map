{"version":3,"sources":["views/Authentication/sign-in/Login.js","views/Authentication/bg.jpg","views/Authentication/icon.gif"],"names":["Login","props","React","useState","username","setUsername","usernameState","setUsernameState","password","setPassword","passwordState","setPasswordState","loginError","setLoginNameError","loginErrorState","setLoginErrorState","setAuthenticated","JSON","parse","localStorage","getItem","domainName","useEffect","history","push","handleFormSubmit","event","preventDefault","SERVER_URL","domain_data","domainId","requestOptions","method","headers","body","stringify","fetch","DOMAIN_SERVICE","then","response","Promise","resolve","reject","text","length","catch","err","data","employee_data","AUTH_SERVICE","device_token","token_data","token","USER_SERVICE","setItem","refreshToken","user_data","roles_data","roles","permissions","error","console","log","workflow_data","WORKFLOW_SERVICE","verifyLength","value","Consumer","setSnack","className","md","style","background","image","src","logo","width","borderRadius","marginTop","to","color","shape","active","tabIndex","onSubmit","type","invalid","name","onChange","target","placeholder","autoComplete","xs"],"mappings":"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","file":"static/js/80.5fe65fc4.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport AuthContext from './../../../AuthContext';\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText, CInvalidFeedback,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {SERVER_URL, AUTH_SERVICE, USER_SERVICE, WORKFLOW_SERVICE, DOMAIN_SERVICE, } from '../../../constants';\nimport image from \"../bg.jpg\";\nimport logo from './../icon.gif';\n\nconst Login = (props) => {\n const [username, setUsername] = React.useState(\"\");\n const [usernameState, setUsernameState] = React.useState(\"\");\n const [password, setPassword] = React.useState(\"\");\n const [passwordState, setPasswordState] = React.useState(\"\");\n const [loginError, setLoginNameError] = React.useState(\"\");\n const [loginErrorState, setLoginErrorState] = React.useState(\"\");\n const [authenticated, setAuthenticated] = React.useState(false);\n const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\nuseEffect(()=>{\n  if(localStorage.getItem('domain_data') === null){\n    props.history.push(\"/domain\");\n  }\n},[])\n  const handleFormSubmit = (event ) => {\n    event.preventDefault();\n    if (usernameState === \"\"){\n      setUsernameState (\"error\");\n    }\n    if (passwordState === \"\") {\n      setPasswordState(\"error\");\n    }\n    if( usernameState === \"success\" && passwordState === \"success\"){\n      const endpoint = SERVER_URL+\"/api/auth/authenticate\";\n\n\n      const domain_data = JSON.parse(localStorage.getItem(\"domain_data\"));\n      if(domain_data === null ){\n        props.history.push(\"/domain\");\n      }\n      const employee_data = {\n        username: username,\n        password: password,\n        companies: [{domainId: domain_data.domainId}]\n      };\n      let obj ={}\n      obj.user= employee_data;\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n            \"X-Tenant\": domainName,\n            'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          username: username,\n          password: password,\n          domainId: domain_data.domainId\n        })\n      };\n\n\n      fetch(DOMAIN_SERVICE+'/api/auth/verifUserDomain', requestOptions)\n        .then(response =>{\n          return new Promise((resolve, reject) => {\n            response.text().then(body => {\n              resolve(\n                body.length ? JSON.parse(body) : null\n              );\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        })\n        .then(data =>\n        {\n          if(data === null){\n            setLoginErrorState(\"error\")\n            setLoginNameError(\"Username or password is invalid !\");\n          }else{\n            const employee_data = {\n              method: 'POST',\n\n              headers: {\n                  \"X-Tenant\": domainName,\n                  'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                username: username,\n                password: password,\n              })\n            };\n            fetch(AUTH_SERVICE +'/api/auth/authenticate', employee_data)\n              .then(response =>{\n                return new Promise((resolve, reject) => {\n                  response.text().then(body => {\n                    resolve(\n                      body.length ? JSON.parse(body) : null\n                    );\n                  }).catch(err => {\n                    reject(err);\n                  });\n                });\n              })\n              .then(data =>\n              {\n                  const device_token = localStorage.getItem(\"device_token\")\n                  if(device_token !== null){\n                  const token_data = {\n                      method: 'POST',\n                      headers: {\n                          \"X-Tenant\": domainName,\n                          \"Content-Type\": \"application/json\",\n                          \"Authorization\": \"Bearer \" + data.token\n                      },\n                      body: JSON.stringify({\n                        device_token: device_token,\n                        username : username\n                      })\n                    };\n                    fetch(USER_SERVICE+'/api/token/verifyDeviceToken', token_data)\n                      .then(response =>{\n                        return new Promise((resolve, reject) => {\n                          response.text().then(body => {\n                            resolve(\n                              body.length ? JSON.parse(body) : null\n                            );\n                          }).catch(err => {\n                            reject(err);\n                          });\n                        });\n                      })\n\n                  }\n\n                  localStorage.setItem(\"token\", data.token);\n                  localStorage.setItem(\"refreshToken\", data.refreshToken);\n                  localStorage.setItem(\"Authorization\",  data.token);\n                  localStorage.setItem('username', username);\n                  localStorage.setItem('password', password);\n                  setAuthenticated(true);\n                  const user_data = {\n                    method: 'GET',\n                    headers: {\n                        \"X-Tenant\": domainName,\n                        'Content-Type': 'application/json',\n                      \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n                    }\n\n                  };\n                  fetch(USER_SERVICE+'/api/auth/role/getRolesByUsername/'+username,user_data)\n                    .then(response => {\n                      return new Promise((resolve, reject) => {\n                        response.text().then(body => {\n                          resolve(\n                            body.length ? JSON.parse(body) : null\n                          );\n                        }).catch(err => {\n                          reject(err);\n                        });\n                      });\n                    })\n                    .then(roles_data => {\n\n                        localStorage.setItem(\"userRoles\", roles_data.roles)\n                        localStorage.setItem(\"userPermissions\", roles_data.permissions)\n\n                     // localStorage.setItem(\"workflows\", JSON.stringify(data))\n\n                      //this.props.history.push(\"/admin/formView\");\n                    })\n                    .catch(error => {\n                      console.log(error);\n                    });\n                  const workflow_data = {\n                      method: 'POST',\n\n                      headers: {\n                          \"X-Tenant\": domainName,\n                          'Content-Type': 'application/json',\n                          \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n                      body: JSON.stringify({domainId: JSON.parse(localStorage.getItem('domain_data')).domainId})\n                  };\n                  fetch(WORKFLOW_SERVICE+'/api/workflow/getAll',workflow_data)\n                      .then(response => {\n                          return new Promise((resolve, reject) => {\n                              response.text().then(body => {\n                                  resolve(\n                                      body.length ? JSON.parse(body) : null\n                                  );\n                              }).catch(err => {\n                                  reject(err);\n                              });\n                          });\n                      })\n                      .then(data => {\n                          localStorage.setItem(\"workflows\", JSON.stringify(data))\n\n                          //this.props.history.push(\"/admin/formView\");\n                      })\n                      .catch(error => {\n                          console.log(error);\n                      });\n                  props.history.push(\"/dashboard\");\n\n              })\n              .catch(error => {\n                console.log(error);\n                setLoginErrorState(\"error\")\n                setLoginNameError(\"Username or password is invalid !\")\n              });\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  };\n  const verifyLength = (value, length) => {\n    if (value.length >= length) {\n      return true;\n    }\n    return false;\n  };\n  return (\n      <AuthContext.Consumer>\n        {({setAuthenticated, setSnack}) => (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"12\">\n            <CCardGroup>\n              <CCard className=\"text-white py-4 col-md-5 order-md-2\" style={{background:` linear-gradient(rgba(0, 0, 255, 0.0), rgba(0, 0, 255, 0.0)), url(${image})`}} >\n                <CCardBody className=\"text-center\">\n                  <img src={logo} width=\"150px\" style={{borderRadius: \"0px\"}} ></img>\n\n                   {/* <h2 className=\"text-white\"><b>ISCT-GROUP <br/>Plateforme</b></h2>*/}\n\n                  <div  style={{marginTop:\"100px\"}}>\n\n                    <Link to=\"/domain\">\n                      <CButton   color=\"primary\" shape=\"pill\" className=\"mt-3\" active tabIndex={-1}>Changer le domaine</CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard>\n              <CCard className=\"p-4 col-md-7 order-md-1\">\n                <CCardBody>\n                  <CForm onSubmit={handleFormSubmit} method=\"post\">\n                    <h1>Connexion</h1>\n                    <p className=\"text-muted\">Connectez-vous à votre compte</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInput type=\"hidden\"\n                              invalid={loginErrorState === \"error\"}\n                              />\n                      <CInvalidFeedback className=\"help-block\">\n                        {loginError}\n                      </CInvalidFeedback>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"text\"\n                              invalid={usernameState === \"error\"}\n                              onChange={\n                                event => {\n                                  setUsername(event.target.value)\n                                  if (verifyLength(event.target.value, 1)) {\n                                    setUsernameState(\"success\");\n                                  } else {\n                                    setUsernameState(\"error\");\n                                  }\n                                }\n                              }\n                              placeholder=\"Nom d'utilisateur\" autoComplete=\"username\" />\n                      <CInvalidFeedback className=\"help-block\">\n                        Nom d'utilisateur est nécessaire\n                      </CInvalidFeedback>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"password\" placeholder=\"Mot de passe\"\n                              invalid={passwordState === \"error\"}\n                              onChange={\n                                event => {\n                                  setPassword(event.target.value)\n                                  if (verifyLength(event.target.value, 1)) {\n                                    setPasswordState(\"success\");\n                                  } else {\n                                    setPasswordState(\"error\");\n                                  }\n                                }\n                              }\n                              autoComplete=\"current-password\" />\n                      <CInvalidFeedback className=\"help-block\">\n                        Mot de passe requis\n                      </CInvalidFeedback>\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs=\"6\">\n                        <CButton type=\"submit\" color=\"primary\" shape=\"pill\" className=\"px-4\"><i className=\"pi pi-sign-in\"> </i> &nbsp;Connexion</CButton>\n                      </CCol>\n                     {/* <CCol xs=\"6\" className=\"text-right\">\n                        <CButton color=\"link\" className=\"px-0\">Mot de passe oublié?</CButton>\n                      </CCol>*/}\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n        )}\n      </AuthContext.Consumer>\n  )\n}\n\nexport default Login\n","export default __webpack_public_path__ + \"static/media/bg.608704a5.jpg\";","export default __webpack_public_path__ + \"static/media/icon.cfaf8cec.gif\";"],"sourceRoot":""}