{"version":3,"sources":["components/dashboard/Widget.js","views/Administration/dashboard/Create.js"],"names":["useStyles","makeStyles","root","width","height","display","flexDirection","header","alignItems","padding","spacer","flexGrow","body","StyledRoot","styled","div","StyledContent","StyledMyChart","StyledLine","StyledColumn","StyledPie","StyledBar","StyledSpline","StyledVariwide","Widget","chart","id","type","title","onRemoveItem","workflowMaster","component","kpi","useState","chartData","setChartData","JSON","parse","localStorage","getItem","domainName","classes","useEffect","performance","worklow_master_id","value","performance_indicator_data","method","headers","stringify","workflowMasterId","kpiId","fetch","INDICATOR_SERVICE","then","response","Promise","resolve","reject","text","length","catch","err","data","console","log","tab","map","val","push","y","name","Date","x","getMonth","getFullYear","Line","workflowMasterName","label","Bar","Spline","Column","Pie","Card","className","style","backgroundColor","Typography","variant","gutterBottom","IconButton","aria-label","onClick","fontSize","ReactGridLayout","WidthProvider","RGL","originalLayout","originalItems","originalTitles","originalSelectedTypes","originalSelectedWorkflowMasters","originalSelectedPerformanceIndicators","CreateDashboard","props","menu","React","createRef","onLayoutChange","bind","selectWorklfowMaster","handleFormSubmit","state","layout","items","initialLoad","newCounter","titles","performanceIndicators","selectedPerformanceIndicator","chartTypes","dashboardName","roles","admin","selectedUsers","users","userRoles","selectedType","worklfowMasters","selectedWorkflowMaster","selectedTypes","selectedWorkflowMasters","selectedPerformanceIndicators","domainId","position","worklfow_master_data","WORKFLOW_MASTER_SERVICE","elem","setState","USER_SERVICE","json","rolesFromApi","role","roleName","error","userId","firstName","lastName","onAddItem","onBreakpointChange","icon","command","this","onSubmit","autoFocus","onHide","el","key","i","selected","Number","data-grid","concat","cols","Infinity","w","h","breakpoint","splice","counter","_","saveToLS","e","indicator","event","layouts_data","static","gridItems","dashboard_data","controlAccessRoles","controlAccessAdmin","controlAccessUsers","dashboard_request_data","DASHBOARD_SERVICE","history","xs","sm","noValidate","row","md","htmlFor","onChange","target","placeholder","options","isMulti","model","popup","ref","paddingLeft","size","toggle","aria-controls","aria-haspopup","createElement","visible","displayMaximizable","maximizable","modal","footer","renderFooter","col","xl","block","color","Save","Cancel","PureComponent","setItem","defaultProps","process","STATIC_EXAMPLES","fn","default"],"mappings":"wuCAiBA,IAAMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,UAEjBC,OAAQ,CACNF,QAAS,OACTG,WAAY,SACZC,QAAS,UAEXC,OAAQ,CACNC,SAAU,GAEZC,KAAM,CACJH,QAAS,SACTE,SAAU,KAWRE,EAAaC,IAAOC,IAAV,KAMVC,EAAgBF,IAAOC,IAAV,IAiBfE,IAGCC,IAGEC,IAGEC,IAGEC,IAGEC,IAGEC,KAMA,SAASC,EAAT,GAA0F,IAOnGC,EAP2BC,EAAuE,EAAvEA,GAAIC,EAAmE,EAAnEA,KAAMC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,aAA+BC,GAAuB,EAAxCC,UAAwC,EAAvBD,gBAAgBE,EAAO,EAAPA,IAAO,EAC1EC,mBAAS,KADiE,gCAE1EA,mBAAS,MAFiE,mBAE/F7B,EAF+F,aAGpE6B,mBAAS,KAH2D,mBAG/FC,EAH+F,KAGpFC,EAHoF,OAIhEF,mBAASG,KAAKC,MAAMC,aAAaC,QAAQ,gBAAgBC,YAJO,mBAI7FA,EAJ6F,KAM9FC,GAN8F,KAMpFzC,KAwElB,OAtEF0C,qBAAU,WACH,GAAW,OAARV,EAAc,CAEb,IAAIW,EAAc,GACdC,EAAoB,GAEpBD,EADe,kBAATX,EACQA,EAEAA,EAAIa,MAGlBD,EAD0B,kBAApBd,EACcA,EAEAA,EAAee,MAEvC,IAAMC,EAA6B,CAC/BC,OAAQ,OACRC,QAAS,CACL,WAAYR,EACZ,eAAgB,mBAChB,cAAiB,UAAYF,aAAaC,QAAQ,kBACtD3B,KAAMwB,KAAKa,UAAU,CAACC,iBAAmBN,EAAmBJ,WAAYA,EAAYW,MAAQR,KAEnGS,MAAMC,IAAoB,yBAA0BP,GAC/CQ,MAAK,SAAAC,GACF,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBH,EAASI,OAAOL,MAAK,SAAA1C,GACjB6C,EACI7C,EAAKgD,OAASxB,KAAKC,MAAMzB,GAAQ,SAEtCiD,OAAM,SAAAC,GACLJ,EAAOI,YAIlBR,MAAK,SAAAS,GACFC,QAAQC,IAAIF,GACZ,IAAIG,EAAM,GAGVH,EAAKI,KAAI,SAAAC,GACLF,EAAIG,KAAK,CAACN,KAAM,CAACK,EAAIE,GAAIC,KAAO,IAAIC,KAAKJ,EAAIK,GAAGC,WAAW,EAAG,IAAI,IAAIF,KAAKJ,EAAIK,GAAGE,mBAEtFxC,EAAa+B,SASvB,IACS,SAARvC,EACCF,EAAQ,cAACmD,EAAA,EAAD,CAAMb,KAAM7B,EAAW2C,mBAAoB/C,EAAegD,QACjD,QAARnD,EACTF,EAAQ,cAACsD,EAAA,EAAD,CAAKhB,KAAM7B,EAAW2C,mBAAoB/C,EAAegD,QAEjD,WAARnD,EACVF,EAAQ,cAACuD,EAAA,EAAD,CAASjB,KAAM7B,EAAW2C,mBAAoB/C,EAAegD,QAEvD,WAARnD,EACJF,EAAQ,cAACwD,EAAA,EAAD,CAAQlB,KAAM7B,EAAW2C,mBAAoB/C,EAAegD,QAExD,QAARnD,EACNF,EAAQ,cAACyD,EAAA,EAAD,CAAKnB,KAAM7B,EAAW2C,mBAAoB/C,EAAegD,QAEnD,aAARnD,IACNF,EAAQ,cAAC,IAAD,CAAUsC,KAAM7B,EAAW2C,mBAAoB/C,EAAegD,SAGxE,eAACK,EAAA,EAAD,CAAMC,UAAW3C,EAAQvC,KAAzB,UACE,sBACEkF,UAAW3C,EAAQlC,OACnB8E,MAAO,CAAEC,gBAAiB,UAAWlF,OAAQ,QAF/C,UAIE,cAACmF,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAArC,SACG7D,IAEH,qBAAKwD,UAAW3C,EAAQ/B,SACxB,cAACgF,EAAA,EAAD,CAAYC,aAAW,SAASC,QAAS,kBAAM/D,EAAaH,IAA5D,SACE,cAAC,IAAD,CAAWmE,SAAS,eAGxB,qBAAKT,UAAW3C,EAAQ7B,KAAxB,SACE,cAACC,EAAD,UACE,cAACG,EAAD,CAAeZ,OAAQA,EAAvB,SACGqB,UAhB2BC,G,yGCzIlCoE,EAAkBC,wBAAcC,KAYhCC,EAAkB,GAClBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAyB,GACzBC,EAAkC,GAClCC,GAAyC,GAI1BC,G,kDAkBnB,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IACDC,KAAOC,IAAMC,YAClB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAExB,EAAKG,MAAQ,CACXC,OAAQ7E,KAAKC,MAAMD,KAAKa,UAAUgD,IAClCiB,MAAM9E,KAAKC,MAAMD,KAAKa,UAAUiD,IAE9BiB,aAAa,EACfC,WAjCsB,EAmCtBtF,eAAe,GACfuF,OAAOjF,KAAKC,MAAMD,KAAKa,UAAUkD,IAEjCvE,MAAM,GACJ0F,sBAAuB,GACvBC,6BAA8B,GAChCC,WAAY,CAAC,CAAC3E,MAAM,OAAQiC,MAAM,SAAU,CAACjC,MAAM,MAAOiC,MAAM,OAAO,CAACjC,MAAM,WAAYiC,MAAM,YAAU,CAACjC,MAAM,SAAUiC,MAAM,WAAY,CAACjC,MAAM,SAAUiC,MAAM,UAAU,CAACjC,MAAO,MAAOiC,MAAM,QACnM2C,cAAc,GACdC,MAAM,GACNC,MAAM,GACNC,cAAgB,GAChBC,MAAO,GACPC,UAAW,GACXC,aAAa,GACbC,gBAAiB,GACjBC,uBAAwB,GACxBC,cAAc9F,KAAKC,MAAMD,KAAKa,UAAUmD,IACxC+B,wBAAwB/F,KAAKC,MAAMD,KAAKa,UAAUoD,IAClD+B,8BAA8BhG,KAAKC,MAAMD,KAAKa,UAAUqD,KACxD+B,SAAUjG,KAAKC,MAAMC,aAAaC,QAAQ,gBAAgB8F,SAC1D7F,WAAYJ,KAAKC,MAAMC,aAAaC,QAAQ,gBAAgBC,WAE5D8F,SAAU,UAGV,IAAMD,EAAWjG,KAAKC,MAAMC,aAAaC,QAAQ,gBAAgB8F,SAE3DE,EAAuB,CACzBxF,OAAQ,OACRC,QAAS,CAAC,WAHKZ,KAAKC,MAAMC,aAAaC,QAAQ,gBAAgBC,WAI3D,eAAgB,mBAChB,cAAiB,UAAYF,aAAaC,QAAQ,kBACtD3B,KAAMwB,KAAKa,UAAU,CAACoF,SAAWA,KA9CtB,OAgDfjF,MAAMoF,IAA0B,6BAA8BD,GACzDjF,MAAK,SAAAC,GACF,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBH,EAASI,OAAOL,MAAK,SAAA1C,GACjB6C,EACI7C,EAAKgD,OAASxB,KAAKC,MAAMzB,GAAQ,SAEtCiD,OAAM,SAAAC,GACLJ,EAAOI,YAIlBR,MAAK,SAAAS,GACFC,QAAQC,IAAIF,GACZ,IAAIG,EAAM,GACVH,EAAKI,KAAI,SAAAsE,GACLvE,EAAIG,KAAK,CAACxB,MAAO4F,EAAK/G,GAAIoD,MAAO2D,EAAKlE,UAE1C,EAAKmE,SAAS,CAACV,gBAAiB9D,OAIxCd,MAAMuF,IAAe,2BAChBrF,MAAK,SAACC,GACH,OAAOA,EAASqF,UAEnBtF,MAAK,SAAAS,GACFC,QAAQC,IAAIF,GACZ,IAAI8E,EAAe,GACnB9E,EAAKI,KAAI,SAAA2E,GACLD,EAAaxE,KAAK,CACdxB,MAAQiG,EAAKC,SACbjE,MAAQgE,EAAKC,cAErB,EAAKL,SAAS,CAACZ,UAAWe,OAC3BhF,OAAM,SAAAmF,GACThF,QAAQC,IAAI+E,MAQhB5F,MAAMuF,IAAe,mCAAmCN,GACnD/E,MAAK,SAAAC,GACF,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBH,EAASI,OAAOL,MAAK,SAAA1C,GACjB6C,EACI7C,EAAKgD,OAASxB,KAAKC,MAAMzB,GAAQ,SAEtCiD,OAAM,SAAAC,GACLJ,EAAOI,YAIlBR,MAAK,SAAAS,GACFC,QAAQC,IAAIF,GACZ,IAAIG,EAAM,GACVH,EAAKI,KAAI,SAAAsE,GACLvE,EAAIG,KAAK,CAACxB,MAAO4F,EAAKQ,OAAQnE,MAAO2D,EAAKS,UAAY,IAAMT,EAAKU,cAErE,EAAKT,SAAS,CAACb,MAAO3D,OAEhC,EAAK0B,QAAU,EAAKA,QAAQiB,KAAb,gBACf,EAAKuC,UAAY,EAAKA,UAAUvC,KAAf,gBACjB,EAAKwC,mBAAqB,EAAKA,mBAAmBxC,KAAxB,gBAC7B,EAAKK,MAAQ,CACF,CACIpC,MAAO,mBACNwE,KAAM,aAEPC,QAAU,WAAO,EAAK3D,QAAQ,yBAxHzB,E,oDAgIbrB,EAAM+D,GACN,IAAItB,EAAK,yBACDzC,IAAS,GAGb+D,IACAtB,EAAK,2BACEA,GADF,IAEDsB,cAIRkB,KAAKd,SAAS1B,K,6BAEVzC,GACPP,QAAQC,IAAIuF,KAAKxC,MAAMe,cAEhByB,KAAKd,SAAL,yBACQnE,IAAS,M,+BAGhBA,GACLP,QAAQC,IAAIuF,KAAKxC,MAAMe,cACvByB,KAAKJ,YACLI,KAAKd,SAAL,yBACQnE,IAAS,M,mCAGLA,GAAO,IAAD,OACd,OACI,gCACK,cAAC,SAAD,CAAQO,MAAM,YAAYwE,KAAK,cAAc1D,QAAS,kBAAM,EAAK6D,SAASlF,IAAQmF,WAAS,IAE5F,cAAC,SAAD,CAAQ5E,MAAM,UAAUwE,KAAK,cAAc1D,QAAS,kBAAM,EAAK+D,OAAOpF,IAAOa,UAAU,uB,oCAM3FwE,EAAIC,GAAM,IAAD,OAQfC,EAAKF,EAAGE,EAOVC,EAAWP,KAAKxC,MAAMkB,cAAc8B,OAAOF,IAAIjH,MAC/CjB,EAAQ4H,KAAKxC,MAAMK,OAAO2C,OAAOF,IACjChI,EAAiB0H,KAAKxC,MAAMmB,wBAAwB6B,OAAOF,IAC3D9H,EAAMwH,KAAKxC,MAAMoB,8BAA8B4B,OAAOF,IAC1D,OACE,qBAAaG,YAAWL,EAAxB,SAEI,cAACpI,EAAD,CACEE,GAAIoI,EACJhI,eAAgBA,EAChBE,IAAKA,EACLL,KAAMoI,EACNnI,MAAOA,EACPC,aAAc,SAACiI,GAEX,EAAKjI,aAAaiI,OAVlBA,K,kCAsBZ9F,QAAQC,IAAI,SAAU,IAAMuF,KAAKxC,MAAMI,YACvCoC,KAAKd,SAAS,CAEZxB,MAAOsC,KAAKxC,MAAME,MAAMgD,OAAO,CAC7BJ,EAAG,GAAGN,KAAKxC,MAAMI,WACjB3C,EAA8B,EAA1B+E,KAAKxC,MAAME,MAAMtD,QAAe4F,KAAKxC,MAAMmD,MAAQ,IACvD7F,EAAG8F,IACHC,EAAG,EACHC,EAAG,IAELjD,OAAO,GAAD,mBAAMmC,KAAKxC,MAAMK,QAAjB,CAAyBmC,KAAKxC,MAAMpF,QAC1CsG,cAAc,GAAD,mBAAOsB,KAAKxC,MAAMkB,eAAlB,CAAgCsB,KAAKxC,MAAMe,eACxDI,wBAAwB,GAAD,mBAAOqB,KAAKxC,MAAMmB,yBAAlB,CAA0CqB,KAAKxC,MAAMiB,yBAC5EG,8BAA8B,GAAD,mBAAOoB,KAAKxC,MAAMoB,+BAAlB,CAAgDoB,KAAKxC,MAAMO,+BAGxFH,WAAYoC,KAAKxC,MAAMI,WAAa,M,yCAMrBmD,EAAYJ,GAC7BX,KAAKd,SAAS,CACZ6B,WAAYA,EACZJ,KAAMA,M,mCAKGL,GAET,IAAM5B,EAAgBsB,KAAKxC,MAAMkB,cAC3BC,EAA0BqB,KAAKxC,MAAMmB,wBACrCd,EAASmC,KAAKxC,MAAMK,OACpBe,EAAgCoB,KAAKxC,MAAMoB,8BACjDF,EAAcsC,OAAOV,EAAG,GACxB,IAAMW,EAAUjB,KAAKxC,MAAMI,WAC3BoC,KAAKd,SAAS,CAACtB,WAAYqD,EAAQ,IACnCjB,KAAKd,SAAS,CAACR,cAAeA,IAC9BC,EAAwBqC,OAAOV,EAAG,GAClCN,KAAKd,SAAS,CAACP,wBAAyBA,IACxCd,EAAOmD,OAAOV,EAAG,GACjBN,KAAKd,SAAS,CAACrB,OAAQA,IAEvBe,EAA8BoC,OAAOV,EAAG,GACxCN,KAAKd,SAAS,CAACN,8BAA+BA,IAC9CoB,KAAKd,SAAS,CAAExB,MAAOwD,IAAEhH,OAAO8F,KAAKxC,MAAME,MAAO,CAAE4C,EAAGA,Q,qCAG1C7C,GAIAuC,KAAKxC,MAAME,MAEX,YAAKsC,KAAKxC,MAAMK,QACT,YAAMmC,KAAKxC,MAAMkB,eAGnBsB,KAAKxC,MAAMI,WAIvBuD,GAAS,QAASnB,KAAKxC,MAAME,OAC7ByD,GAAS,SAAD,YAAenB,KAAKxC,MAAMK,SAClCsD,GAAS,gBAAD,YAAuBnB,KAAKxC,MAAMkB,gBAC1CyC,GAAS,0BAAD,YAAiCnB,KAAKxC,MAAMmB,0BACpDwC,GAAS,gCAAD,YAAuCnB,KAAKxC,MAAMoB,gCAC1DuC,GAAS,aAAenB,KAAKxC,MAAMI,YACnCuD,GAAS,SAAU1D,GACnBuC,KAAKd,SAAS,CAAEzB,a,2CAMA2D,GAAK,IAAD,OACxBpB,KAAKd,SAAS,CAACT,uBAAwB2C,IACvC,IAAM9H,EAA6B,CAC/BC,OAAQ,OACRC,QAAS,CACL,WAAYwG,KAAKxC,MAAMxE,WACvB,eAAgB,mBAAoB,cAAiB,UAAYF,aAAaC,QAAQ,kBAC1F3B,KAAMwB,KAAKa,UAAU,CAACC,iBAAmB0H,EAAE/H,SAE/CO,MAAMC,IAAoB,wBAAyBP,GAC9CQ,MAAK,SAAAC,GACF,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBH,EAASI,OAAOL,MAAK,SAAA1C,GACjB6C,EACI7C,EAAKgD,OAASxB,KAAKC,MAAMzB,GAAQ,SAEtCiD,OAAM,SAAAC,GACLJ,EAAOI,YAIlBR,MAAK,SAAAS,GACFC,QAAQC,IAAIF,GACZ,IAAIG,EAAM,GACVH,EAAKI,KAAI,SAAAsE,GACLvE,EAAIG,KAAK,CAACxB,MAAO4F,EAAK/G,GAAIoD,MAAO2D,EAAKoC,eAE1C,EAAKnC,SAAS,CAACpB,sBAAuBpD,S,uCAMhC4G,GAAU,IAAD,OAEnBC,EAAc,GACFvB,KAAKxC,MAAMC,OACnB9C,KAAI,SAAAC,GACR2G,EAAa1G,KAAK,CAACiG,EAAGlG,EAAIkG,EAAGR,EAAG1F,EAAI0F,EAAGkB,OAAQ5G,EAAI4G,OAAQX,EAAGjG,EAAIiG,EAAG5F,EAAGL,EAAIK,EAAGH,EAAGF,EAAIE,OAG1F,IAAM2G,EAAY,CACd5D,OAAOmC,KAAKxC,MAAMK,OAASa,cAAesB,KAAKxC,MAAMkB,cAAeC,wBAAyBqB,KAAKxC,MAAMmB,wBACxGC,8BAA+BoB,KAAKxC,MAAMoB,8BAA+BlB,MAAOsC,KAAKxC,MAAME,MAC3FD,OAAQ8D,GAGZ/G,QAAQC,IAAIuF,KAAKxC,MAAMW,OACvB,IAAMuD,EAAiB,CACnB1I,WAAYgH,KAAKxC,MAAMxE,WACvBiF,cAAe+B,KAAKxC,MAAMS,cAAe0D,mBAAoB3B,KAAKxC,MAAMU,MAAO0D,mBAAoB5B,KAAKxC,MAAMW,MAC9G0D,mBAAoB7B,KAAKxC,MAAMY,cAAeqD,UAAWA,GAEvDK,EAAyB,CAC3BvI,OAAQ,OACRC,QAAS,CACL,WAAYwG,KAAKxC,MAAMxE,WACvB,eAAgB,mBAAoB,cAAiB,UAAYF,aAAaC,QAAQ,kBAC1F3B,KAAMwB,KAAKa,UAAUiI,IAEzB9H,MAAMmI,IAAoB,wBAAyBD,GAC9ChI,MAAK,SAAAC,GACF,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBH,EAASI,OAAOL,MAAK,SAAA1C,GACjB6C,EACI7C,EAAKgD,OAASxB,KAAKC,MAAMzB,GAAQ,SAEtCiD,OAAM,SAAAC,GACLJ,EAAOI,YAIlBR,MAAK,SAAAS,GACF,EAAKyC,MAAMgF,QAAQnH,KAAK,8B,+BAO5B,IAAD,OAGP,OACA,cAAC,IAAD,CAAMoH,GAAG,KAAKC,GAAG,KAAjB,SACgB,eAAC,IAAD,WACI,cAAC,IAAD,UACI,+DAEJ,cAAC,IAAD,UACI,eAAC,IAAD,CAAQC,YAAU,EAAlB,UACI,eAAC,IAAD,CAAYC,KAAG,EAACxG,UAAU,OAA1B,UACC,cAAC,IAAD,CAAMsG,GAAI,GAAIG,GAAI,EAAlB,SACO,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,QAAQ,gBAAhB,oCACA,cAAC,IAAD,CAAQpK,GAAG,gBAAgBqK,SAAU,SAAAnB,GAAC,OAAI,EAAKlC,SAAS,CAACjB,cAAemD,EAAEoB,OAAOnJ,SACzEA,MAAO2G,KAAKxC,MAAMS,qBAIlC,cAAC,IAAD,CAAMiE,GAAI,GAAIG,GAAI,EAAlB,SACK,eAAC,IAAD,WACK,cAAC,IAAD,CAAQC,QAAQ,qBAAhB,+CAEA,cAAC,IAAD,CACEvH,KAAK,qBACL0H,YAAY,SACZpJ,MAAO2G,KAAKxC,MAAMU,MAClBwE,QAAS1C,KAAKxC,MAAMc,UACpBiE,SAAU,SAAAnB,GAAC,OAAI,EAAKlC,SAAS,CAAChB,MAAOkD,KACrCuB,SAAO,YAMvB,eAAC,IAAD,CAAYP,KAAG,EAACxG,UAAU,OAA1B,UACI,cAAC,IAAD,CAAMsG,GAAI,GAAIG,GAAI,EAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQC,QAAQ,qBAAhB,4CAEA,cAAC,IAAD,CACEvH,KAAK,qBACL0H,YAAY,SACZpJ,MAAO2G,KAAKxC,MAAMW,MAClBuE,QAAS1C,KAAKxC,MAAMc,UACdiE,SAAU,SAAAnB,GAAC,OAAI,EAAKlC,SAAS,CAACf,MAAOiD,KAC3CuB,SAAO,SAIb,cAAC,IAAD,CAAMT,GAAI,GAAIG,GAAI,EAAlB,SACE,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,QAAQ,oBAAhB,2CAEA,cAAC,IAAD,CACEvH,KAAK,oBACL0H,YAAY,SACZpJ,MAAO2G,KAAKxC,MAAMY,cAClBsE,QAAS1C,KAAKxC,MAAMa,MACpBkE,SAAU,SAAAnB,GAAC,OAAI,EAAKlC,SAAS,CAACd,cAAegD,KAC7CuB,SAAO,YAMrB,eAAC,IAAD,WACd,eAAC,IAAD,CAAa9G,MAAO,CAACC,gBAAgB,WAArC,4BAEiB,cAAC,OAAD,CAAM8G,MAAO5C,KAAKtC,MAAOmF,OAAK,EAACC,IAAK,SAAA1C,GAAE,OAAI,EAAKnD,KAAOmD,GAAIlI,GAAG,eAC7D,cAAC,IAAD,CAAO2D,MAAO,CAAEkH,YAAa,QAAUnH,UAAU,sBAAjD,SACC,mBAAIoH,KAAK,MAAMpH,UAAU,aAAakE,KAAK,aAAa1D,QAAS,SAACkF,GAAD,OAAW,EAAKrE,KAAKgG,OAAO3B,IAAQ4B,gBAAc,aAAaC,iBAAA,SAG9H,cAAC,IAAD,UACC,8BACO,cAAC7G,EAAD,CACImB,OAAQuC,KAAKxC,MAAMC,OACnBL,eAAgB4C,KAAK5C,eACrByC,mBAAoBG,KAAKH,mBAH7B,SAKKG,KAAKxC,MAAME,MAAM/C,KAAK,SAACyF,EAAIC,GAAL,OAAa,EAAK+C,cAAchD,EAAIC,YAI3F,cAAC,SAAD,CAAQgD,QAASrD,KAAKxC,MAAM8F,mBAAoBC,aAAW,EAACC,OAAK,EAAC3H,MAAO,CAAElF,MAAO,QAAU8M,OAAQzD,KAAK0D,aAAa,sBAAuBvD,OAAQ,kBAAM,EAAKA,OAAO,uBAAvK,SACgD,eAAC,IAAD,CAAQgC,YAAU,EAAlB,UAC+B,eAAC,IAAD,CAAYC,KAAG,EAACxG,UAAU,OAA1B,UACC,cAAC,IAAD,CAAMsG,GAAI,GAAIG,GAAI,GAAlB,SACO,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,QAAQ,QAAhB,mBACA,cAAC,IAAD,CAAQpK,GAAG,QAAQqK,SAAU,SAAAnB,GAAC,OAAI,EAAKlC,SAAS,CAAC9G,MAAOgJ,EAAEoB,OAAOnJ,SACzDA,MAAO2G,KAAKxC,MAAMpF,aAIlC,cAAC,IAAD,CAAM8J,GAAI,GAAIG,GAAI,GAAlB,SACK,eAAC,IAAD,WACK,cAAC,IAAD,CAAQC,QAAQ,YAAhB,2BAES,cAAC,IAAD,CACEvH,KAAK,YACL1B,MAAO2G,KAAKxC,MAAMe,aAClBmE,QAAS1C,KAAKxC,MAAMQ,WACpBuE,SAAU,SAAAnB,GAAC,OAAI,EAAKlC,SAAS,CAACX,aAAc6C,eAOrE,eAAC,IAAD,CAAYgB,KAAG,EAACxG,UAAU,OAA1B,UACI,cAAC,IAAD,CAAMsG,GAAI,GAAIG,GAAI,GAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQC,QAAQ,gBAAhB,0CACW,cAAC,IAAD,CACOvH,KAAK,gBACL1B,MAAO2G,KAAKxC,MAAMiB,uBAClBiE,QAAS1C,KAAKxC,MAAMgB,gBACpB+D,SAAU,SAAAnB,GAAC,OAAI,EAAK9D,qBAAqB8D,WAI/D,cAAC,IAAD,CAAMc,GAAI,GAAIG,GAAI,GAAlB,SACK,eAAC,IAAD,WACK,cAAC,IAAD,CAAQC,QAAQ,YAAhB,wBACS,cAAC,IAAD,CACEvH,KAAK,YACL1B,MAAO2G,KAAKxC,MAAMO,6BAClB2E,QAAS1C,KAAKxC,MAAMM,sBACpByE,SAAU,SAAAnB,GAAC,OAAI,EAAKlC,SAAS,CAACnB,6BAA8BqD,uBAQ9I,eAAC,IAAD,CAAMa,GAAG,IAAT,UAEI,cAAC,IAAD,CAAM0B,IAAI,IAAIzB,GAAG,IAAIG,GAAG,IAAIuB,IAAE,EAAChI,UAAU,eAAzC,SACE,eAAC,IAAD,CAASiI,OAAK,EAAC7H,QAAQ,UAAU8H,MAAM,OAAO5L,GAAG,WAAWkE,QAAS,SAAAgF,GAAC,OAAI,EAAK7D,iBAAiB6D,IAAhG,UAAoG,cAAC2C,EAAA,EAAD,IAApG,mBAEF,cAAC,IAAD,CAAMJ,IAAI,IAAIzB,GAAG,IAAIG,GAAG,IAAIuB,IAAE,EAAChI,UAAU,eAAzC,SACE,eAAC,IAAD,CAASiI,OAAK,EAAC7H,QAAQ,UAAU8H,MAAM,SAAS1H,QAAS,kBAAK,EAAKY,MAAMgF,QAAQnH,KAAK,0BAAtF,UAAgH,cAACmJ,EAAA,EAAD,IAAhH,iC,GAjhBC9G,IAAM+G,eAwiBnD,SAAS9C,GAASd,EAAKhH,GACfP,cACAA,aAAaoL,QACT7D,EACAzH,KAAKa,UAAL,eACK4G,EAAMhH,KA7iBF0D,GAYVoH,aAAe,CAClBvI,UAAW,SAGXwB,eAAgB,eAmiBY,IAAhCgH,oIAAYC,iBACZ,gCAAyBvK,MAAK,SAAAwK,GAAE,OAAIA,EAAGC,QAAQxH","file":"static/js/97.850610b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CardHeader } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport MyChart, { StyledMyChart } from \"./Chart\";\nimport \"./styles.css\";\nimport Variwide, { StyledVariwide }  from \"./VariwideSeries\";\nimport Bar, { StyledBar }  from \"./Bar\";\nimport Line, { StyledLine }  from \"./Line\";\nimport Spline, { StyledSpline }  from \"./Spline\";\nimport Pie , { StyledPie } from \"./Pie\";\nimport Column , { StyledColumn } from \"./Column\";\nimport {INDICATOR_SERVICE} from \"../../constants\";\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  header: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0.5rem\"\n  },\n  spacer: {\n    flexGrow: 1\n  },\n  body: {\n    padding: \"0.5rem\",\n    flexGrow: 1\n  }\n});\n\nconst widgetNames = {\n  n0: \"Line Chart\",\n  n1: \"Area Chart\",\n  n3: \"Bar Chart\",\n  n4: \"Scatter Chart\"\n};\n\nconst StyledRoot = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledContent = styled.div`\n  flex: 1 1 0;\n  display: flex;\n  flex-direction: column;\n\n  .text-container {\n    min-height: 50px;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: solid 2px black;\n    .text {\n      font-size: 30px;\n    }\n  }\n\n  ${StyledMyChart} {\n    flex: 1;\n  }\n   ${StyledLine} {\n      flex: 1;\n    }\n     ${StyledColumn} {\n        flex: 1;\n      }\n       ${StyledPie} {\n          flex: 1;\n        }\n         ${StyledBar} {\n            flex: 1;\n          }\n           ${StyledSpline} {\n              flex: 1;\n            }\n             ${StyledVariwide} {\n                flex: 1;\n              }\n`;\n\n\nexport default function Widget({ id, type, title, onRemoveItem, component: Item, workflowMaster, kpi }) {\n  const [slider, setSlider] = useState(300);\n  const [height, setHeight] = useState(200);\n  const [chartData, setChartData] = useState([]);\n    const [domainName, setDomainName] = useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\n    const classes = useStyles();\n  let chart;\nuseEffect(() =>{\n       if(kpi !== null ){\n\n           var performance = \"\"\n           var worklow_master_id = \"\"\n           if(typeof(kpi) === \"string\"){\n               performance = kpi\n           }else{\n               performance = kpi.value\n           }\n           if(typeof(workflowMaster) === \"string\"){\n               worklow_master_id = workflowMaster\n           }else{\n               worklow_master_id = workflowMaster.value\n           }\n           const performance_indicator_data = {\n               method: 'POST',\n               headers: {\n                   \"X-Tenant\": domainName,\n                   'Content-Type': 'application/json',\n                   \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n               body: JSON.stringify({workflowMasterId : worklow_master_id, domainName: domainName, kpiId : performance})\n           };\n        fetch(INDICATOR_SERVICE + '/api/indicator/getById', performance_indicator_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                console.log(data)\n                var tab = []\n                // const categories = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\n                data.map(val =>{\n                    tab.push({data: [val.y], name: (new Date(val.x).getMonth()+1)+\"-\"+new Date(val.x).getFullYear()})\n                })\n                setChartData(tab)\n                /* var tab = []\n                 data.map(elem =>{\n                     tab.push({value: elem.id, label: elem.name})\n                 })\n                 this.setState({worklfowMasters: tab})*/\n            })\n    }\n\n    },[])\n   if (type ===\"Line\") {\n        chart = <Line data={chartData} workflowMasterName={workflowMaster.label}/>;\n      } else if (type ===\"Bar\"){\n        chart = <Bar data={chartData} workflowMasterName={workflowMaster.label} />;\n      }\n       else if (type ===\"Spline\"){\n      chart = <Spline  data={chartData} workflowMasterName={workflowMaster.label}/>;\n   }\n   else if (type ===\"Column\"){\n        chart = <Column data={chartData} workflowMasterName={workflowMaster.label}/>;\n      }\n   else if (type ===\"Pie\"){\n      chart = <Pie data={chartData} workflowMasterName={workflowMaster.label}/>;\n    }\n   else if (type ===\"Variwide\"){\n      chart = <Variwide data={chartData} workflowMasterName={workflowMaster.label} />;\n     }\n  return (\n    <Card className={classes.root} key={id} >\n      <div\n        className={classes.header}\n        style={{ backgroundColor: \"#E4E6E8\", height: \"40px\" }}\n      >\n        <Typography variant=\"h6\" gutterBottom>\n          {title}\n        </Typography>\n        <div className={classes.spacer} />\n        <IconButton aria-label=\"delete\" onClick={() => onRemoveItem(id)}>\n          <CloseIcon fontSize=\"small\" />\n        </IconButton>\n      </div>\n      <div className={classes.body}>\n        <StyledRoot>\n          <StyledContent height={height}>\n            {chart}\n          </StyledContent>\n        </StyledRoot>\n      </div>\n    </Card>\n  );\n}\n","import React , {useRef} from \"react\";\nimport RGL ,{ WidthProvider, Responsive } from \"react-grid-layout\";\nimport _ from \"lodash\";\nimport Widget from \"./../../../components/dashboard/Widget\";\nimport LineChart from \"./../../../components/dashboard/Chart\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport \"./css/styles.css\";\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\n\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport Select from 'react-select';\nimport { Menu } from 'primereact/menu';\nimport {Link} from \"react-router-dom\";\nimport 'primeicons/primeicons.css';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.css';\nimport 'primeflex/primeflex.css';\nimport {\nCLink,\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CFormGroup,\n    CInput,\n    CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback,\n} from '@coreui/react'\nimport {SERVER_URL, DASHBOARD_SERVICE, WORKFLOW_MASTER_SERVICE, DOMAIN_SERVICE, USER_SERVICE, INDICATOR_SERVICE} from '../../../constants';\n\n// const ResponsiveReactGridLayout = WidthProvider(Responsive);\nconst ReactGridLayout = WidthProvider(RGL);\n\n/**\n * This layout demonstrates how to use a grid with a dynamic number of elements.\n */\n/*const originalLayout = getFromLS(\"layout\") || [];\nconst originalItems = getFromLS(\"items\") || [];\nconst originalTitles = getFromLS(\"titles\") || [];\nconst originalSelectedTypes =  getFromLS(\"selectedTypes\") ||[];\nconst originalSelectedWorkflowMasters = getFromLS(\"selectedWorkflowMasters\") || [];\nconst originalSelectedPerformanceIndicators = getFromLS(\"selectedPerformanceIndicators\") || [];\nconst originalNewCounter = getFromLS(\"newCounter\") || 0;*/\nconst originalLayout =  [];\nconst originalItems =  [];\nconst originalTitles =  [];\nconst originalSelectedTypes =  [];\nconst originalSelectedWorkflowMasters = [];\nconst originalSelectedPerformanceIndicators =  [];\nconst originalNewCounter =  0;\n\n\nexport default class CreateDashboard extends React.PureComponent {\n /* static defaultProps = {\n    className: \"layout\",\n    cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n    rowHeight: 200\n  };*/\n  /*  static defaultProps = {\n        className: \"layout\",\n        cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n        rowHeight: 200,\n        onLayoutChange: function() {}\n    }*/\n    static defaultProps = {\n        className: \"layout\",\n        // cols: 12,\n        // rowHeight: 200,\n        onLayoutChange: function() {}\n    };\n  constructor(props) {\n    super(props);\n    this.menu = React.createRef();\n    this.onLayoutChange = this.onLayoutChange.bind(this);\n    this.selectWorklfowMaster = this.selectWorklfowMaster.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    // this.loadElement = this.loadElement.bind(this);\n    this.state = {\n      layout: JSON.parse(JSON.stringify(originalLayout)),\n      items:JSON.parse(JSON.stringify(originalItems)),\n      // items:[],\n        initialLoad: true,\n      newCounter: originalNewCounter,\n      // newCounter: 0,\n      workflowMaster:'',\n      titles:JSON.parse(JSON.stringify(originalTitles)),\n      // titles:[],\n      title:\"\",\n        performanceIndicators: [],\n        selectedPerformanceIndicator: {},\n      chartTypes: [{value:\"Line\", label:\"Ligne\"}, {value:\"Bar\", label:\"Bar\"},{value:\"Variwide\", label:\"Varié\"}, {value:\"Column\", label:\"Colonne\"}, {value:\"Spline\", label:\"Spline\"},{value: \"Pie\", label:\"Pie\"}],\n      dashboardName:'',\n      roles:[],\n      admin:[],\n      selectedUsers : [],\n      users: [],\n      userRoles: [],\n      selectedType:\"\",\n      worklfowMasters: [],\n      selectedWorkflowMaster: {},\n      selectedTypes:JSON.parse(JSON.stringify(originalSelectedTypes)),\n      selectedWorkflowMasters:JSON.parse(JSON.stringify(originalSelectedWorkflowMasters)),\n      selectedPerformanceIndicators:JSON.parse(JSON.stringify(originalSelectedPerformanceIndicators)),\n      domainId: JSON.parse(localStorage.getItem('domain_data')).domainId,\n      domainName: JSON.parse(localStorage.getItem('domain_data')).domainName,\n      // selectedTypes:[],\n      position: 'center'\n    };\n\n      const domainId = JSON.parse(localStorage.getItem('domain_data')).domainId\n      const domainName = JSON.parse(localStorage.getItem('domain_data')).domainName\n      const worklfow_master_data = {\n          method: 'POST',\n          headers: {\"X-Tenant\": domainName,\n              'Content-Type': 'application/json',\n              \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n          body: JSON.stringify({domainId : domainId})\n      };\n      fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getAll', worklfow_master_data)\n          .then(response => {\n              return new Promise((resolve, reject) => {\n                  response.text().then(body => {\n                      resolve(\n                          body.length ? JSON.parse(body) : null\n                      );\n                  }).catch(err => {\n                      reject(err);\n                  });\n              });\n          })\n          .then(data => {\n              console.log(data)\n              var tab = []\n              data.map(elem =>{\n                  tab.push({value: elem.id, label: elem.name})\n              })\n              this.setState({worklfowMasters: tab})\n          })\n\n      /************************************* get all roles from DB *******************************/\n      fetch(USER_SERVICE + \"/api/auth/role/getRoles\")\n          .then((response) => {\n              return response.json();\n          })\n          .then(data => {\n              console.log(data);\n              var rolesFromApi = [];\n              data.map(role => {\n                  rolesFromApi.push({\n                      value : role.roleName,\n                      label : role.roleName\n                  })})\n              this.setState({userRoles: rolesFromApi});\n          }).catch(error => {\n          console.log(error);\n      });\n      /************************************* get all organization users from DB *****************/\n      /*const users_data = {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json', \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n          body: JSON.stringify({domainId : domainId})\n      };*/\n      fetch(USER_SERVICE + '/api/auth/user/getUsersByDomain/'+domainId)\n          .then(response => {\n              return new Promise((resolve, reject) => {\n                  response.text().then(body => {\n                      resolve(\n                          body.length ? JSON.parse(body) : null\n                      );\n                  }).catch(err => {\n                      reject(err);\n                  });\n              });\n          })\n          .then(data => {\n              console.log(data)\n              var tab = []\n              data.map(elem =>{\n                  tab.push({value: elem.userId, label: elem.firstName + \" \" + elem.lastName})\n              })\n              this.setState({users: tab})\n          })\n    this.onClick = this.onClick.bind(this)\n    this.onAddItem = this.onAddItem.bind(this);\n    this.onBreakpointChange = this.onBreakpointChange.bind(this);\n this.items = [\n            {\n                label: 'Ajouter un chart',\n                 icon: 'pi pi-plus',\n//                command:  this.onAddItem\n                command:  () => {this.onClick('displayMaximizable')}\n\n            }\n        ];\n\n\n  }\n\nonClick(name, position) {\n        let state = {\n            [`${name}`]: true\n        };\n\n        if (position) {\n            state = {\n                ...state,\n                position\n            }\n        }\n\n        this.setState(state);\n    }\n     onHide(name) {\n     console.log(this.state.selectedType)\n    // this.onAddItem();\n            this.setState({\n                [`${name}`]: false\n            });\n        }\n    onSubmit(name) {\n        console.log(this.state.selectedType)\n        this.onAddItem();\n        this.setState({\n            [`${name}`]: false\n        });\n    }\n       renderFooter(name) {\n            return (\n                <div>\n                     <Button label=\"Soumettre\" icon=\"pi pi-check\" onClick={() => this.onSubmit(name )} autoFocus />\n\n                    <Button label=\"Annuler\" icon=\"pi pi-times\" onClick={() => this.onHide(name)} className=\"p-button-text\" />\n                </div>\n            );\n        }\n\n\n  createElement(el, key) {\n\n      const removeStyle = {\n      position: \"absolute\",\n      right: \"2px\",\n      top: 0,\n      cursor: \"pointer\"\n    };\n    const i =  el.i;\n   /* console.log(this.state.selectedTypes)\n    console.log( this.state.items)\n    console.log(this.state.layout)\n      console.log(i)\n      console.log( this.state.selectedWorkflowMasters)\n      console.log( this.state.selectedPerformanceIndicators)*/\n    let selected = this.state.selectedTypes[Number(i)].value\n    let title = this.state.titles[Number(i)];\n    let workflowMaster = this.state.selectedWorkflowMasters[Number(i)];\n    let kpi = this.state.selectedPerformanceIndicators[Number(i)];\n    return (\n      <div key={i} data-grid={el}>\n\n          <Widget\n            id={i}\n            workflowMaster={workflowMaster}\n            kpi={kpi}\n            type={selected}\n            title={title}\n            onRemoveItem={(i) => {\n             // console.log(\"removing\", i);\n                this.onRemoveItem(i)\n            }}\n           // component={Widget}\n          />\n\n      </div>\n    );\n  }\n\n\n  onAddItem() {\n    /*eslint no-console: 0*/\n    console.log(\"adding\", \"n\" + this.state.newCounter);\n    this.setState({\n      // Add a new item. It must have a unique key!\n      items: this.state.items.concat({\n        i: ''+this.state.newCounter,\n        x: (this.state.items.length * 2) % (this.state.cols || 12),\n        y: Infinity, // puts it at the bottom\n        w: 2,\n        h: 2\n      }),\n      titles: [...this.state.titles, this.state.title],\n      selectedTypes:  [...this.state.selectedTypes,this.state.selectedType],\n      selectedWorkflowMasters:  [...this.state.selectedWorkflowMasters,this.state.selectedWorkflowMaster],\n      selectedPerformanceIndicators:  [...this.state.selectedPerformanceIndicators,this.state.selectedPerformanceIndicator],\n\n      // Increment the counter to ensure key is always unique.\n      newCounter: this.state.newCounter + 1\n    });\n\n  }\n\n  // We're using the cols coming back from this to calculate where to add new items.\n  onBreakpointChange(breakpoint, cols) {\n    this.setState({\n      breakpoint: breakpoint,\n      cols: cols\n    });\n  }\n\n\n  onRemoveItem(i) {\n\n      const selectedTypes = this.state.selectedTypes\n      const selectedWorkflowMasters = this.state.selectedWorkflowMasters\n      const titles = this.state.titles\n      const selectedPerformanceIndicators = this.state.selectedPerformanceIndicators\n      selectedTypes.splice(i, 1);\n      const counter = this.state.newCounter\n      this.setState({newCounter: counter-1})\n      this.setState({selectedTypes: selectedTypes});\n      selectedWorkflowMasters.splice(i, 1);\n      this.setState({selectedWorkflowMasters: selectedWorkflowMasters});\n      titles.splice(i, 1);\n      this.setState({titles: titles});\n\n      selectedPerformanceIndicators.splice(i, 1);\n      this.setState({selectedPerformanceIndicators: selectedPerformanceIndicators});\n      this.setState({ items: _.reject(this.state.items, { i: i }) });\n  }\n\n    onLayoutChange(layout) {\n\n       const layouts_data = {\n            // Add a new item. It must have a unique key!\n            items: this.state.items,\n            layout: layout,\n            titles: [...this.state.titles],\n            selectedTypes:  [...this.state.selectedTypes],\n\n            // Increment the counter to ensure key is always unique.\n            newCounter: this.state.newCounter\n        }\n        /*eslint no-console: 0*/\n        // if(layout.length && layout){\n            saveToLS(\"items\", this.state.items);\n            saveToLS(\"titles\", [...this.state.titles]);\n            saveToLS(\"selectedTypes\",  [...this.state.selectedTypes]);\n            saveToLS(\"selectedWorkflowMasters\",  [...this.state.selectedWorkflowMasters]);\n            saveToLS(\"selectedPerformanceIndicators\",  [...this.state.selectedPerformanceIndicators]);\n            saveToLS(\"newCounter\",  this.state.newCounter);\n            saveToLS(\"layout\", layout);\n            this.setState({ layout });\n            //this.props.onLayoutChange(layout);\n        // }\n\n         // updates status display\n    }\n     selectWorklfowMaster  (e ) {\n        this.setState({selectedWorkflowMaster: e})\n        const performance_indicator_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": this.state.domainName,\n                'Content-Type': 'application/json', \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({workflowMasterId : e.value})\n        };\n        fetch(INDICATOR_SERVICE + '/api/indicator/getAll', performance_indicator_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                console.log(data)\n                var tab = []\n                data.map(elem =>{\n                    tab.push({value: elem.id, label: elem.indicator})\n                })\n                this.setState({performanceIndicators: tab})\n            })\n    }\n\n\n    /**************************************************  submit dashboard ****************************************************/\n    handleFormSubmit (event )  {\n\n        var layouts_data =[]\n        const layouts = this.state.layout\n        layouts.map(val =>{\n            layouts_data.push({h: val.h, i: val.i, static: val.static, w: val.w, x: val.x, y: val.y })\n        })\n\n        const gridItems = {\n            titles:this.state.titles , selectedTypes: this.state.selectedTypes, selectedWorkflowMasters: this.state.selectedWorkflowMasters,\n            selectedPerformanceIndicators: this.state.selectedPerformanceIndicators, items: this.state.items,\n            layout: layouts_data,\n        }\n\n        console.log(this.state.admin)\n        const dashboard_data = {\n            domainName: this.state.domainName,\n            dashboardName: this.state.dashboardName, controlAccessRoles: this.state.roles, controlAccessAdmin: this.state.admin,\n            controlAccessUsers: this.state.selectedUsers, gridItems: gridItems\n        }\n        const dashboard_request_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": this.state.domainName,\n                'Content-Type': 'application/json', \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify(dashboard_data)\n        };\n        fetch(DASHBOARD_SERVICE + '/api/dashboard/create', dashboard_request_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                this.props.history.push(\"/admin/dashboard/list\");\n            })\n\n\n\n    }\n    /*************************************************** render dashboard ************************************************/\n  render() {\n\n\n    return (\n    <CCol xs=\"12\" sm=\"12\">\n                    <CCard>\n                        <CCardHeader>\n                            <h2>Créer un Tableau de bord</h2>\n                        </CCardHeader>\n                        <CCardBody>\n                            <CForm  noValidate>\n                                <CFormGroup row className=\"my-0\">\n                                 <CCol sm={12} md={6}>\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"dashboardName\">Nom du Tableau de bord</CLabel>\n                                            <CInput id=\"dashboardName\" onChange={e => this.setState({dashboardName: e.target.value})}\n                                                    value={this.state.dashboardName}  />\n                                        </CFormGroup>\n                                    </CCol>\n\n                                    <CCol sm={12} md={6}>\n                                         <CFormGroup>\n                                              <CLabel htmlFor=\"AccessControlRoles\">Contrôle d'accès (Rôles)</CLabel>\n\n                                              <Select\n                                                name=\"AccessControlRoles\"\n                                                placeholder=\"Global\"\n                                                value={this.state.roles}\n                                                options={this.state.userRoles}\n                                                onChange={e => this.setState({roles: e})}\n                                                isMulti\n                                              />\n                                        </CFormGroup>\n                                    </CCol>\n\n                                </CFormGroup>\n                                <CFormGroup row className=\"my-0\">\n                                    <CCol sm={12} md={6}>\n                                      <CFormGroup>\n                                        <CLabel htmlFor=\"AccessControlAdmin\">Contrôle d'accès (Admin)</CLabel>\n\n                                        <Select\n                                          name=\"AccessControlAdmin\"\n                                          placeholder=\"Global\"\n                                          value={this.state.admin}\n                                          options={this.state.userRoles}\n                                                onChange={e => this.setState({admin: e})}\n                                          isMulti\n                                        />\n                                  </CFormGroup>\n                                    </CCol>\n                                    <CCol sm={12} md={6}>\n                                      <CFormGroup>\n                                          <CLabel htmlFor=\"AccessControlUser\">Contrôle d'accès (User)</CLabel>\n\n                                          <Select\n                                            name=\"AccessControlUser\"\n                                            placeholder=\"Global\"\n                                            value={this.state.selectedUsers}\n                                            options={this.state.users}\n                                            onChange={e => this.setState({selectedUsers: e})}\n                                            isMulti\n                                          />\n                                    </CFormGroup>\n                                  </CCol>\n                                </CFormGroup>\n\n                              <CCard>\n                <CCardHeader style={{backgroundColor:\"#F5F5F5\"}}>\n                                       Tableau de Bord\n                                 <Menu model={this.items} popup ref={el => this.menu = el} id=\"popup_menu\" />\n                                 <CLink style={{ paddingLeft: \"10px\" }} className=\"card-header-actions\" >\n                                  <i  size=\"2xl\" className=\"pi pi-bars\" icon=\"pi pi-bars\" onClick={(event) => this.menu.toggle(event)} aria-controls=\"popup_menu\" aria-haspopup></i>\n                                 </CLink>\n                                   </CCardHeader>\n                                    <CCardBody>\n                                     <div>\n                                            <ReactGridLayout\n                                                layout={this.state.layout}\n                                                onLayoutChange={this.onLayoutChange}\n                                                onBreakpointChange={this.onBreakpointChange}\n                                            >\n                                                {this.state.items.map( (el, key) => this.createElement(el, key))}\n                                            </ReactGridLayout>\n                                          </div>\n                                    </CCardBody>\n                <Dialog visible={this.state.displayMaximizable} maximizable modal style={{ width: '70vw' }} footer={this.renderFooter('displayMaximizable')} onHide={() => this.onHide('displayMaximizable')}>\n                                                                <CForm  noValidate>\n                                                                                               <CFormGroup row className=\"my-0\">\n                                                                                                <CCol sm={12} md={12}>\n                                                                                                       <CFormGroup>\n                                                                                                           <CLabel htmlFor=\"title\">Titre</CLabel>\n                                                                                                           <CInput id=\"title\" onChange={e => this.setState({title: e.target.value})}\n                                                                                                                   value={this.state.title}  />\n                                                                                                       </CFormGroup>\n                                                                                                   </CCol>\n\n                                                                                                   <CCol sm={12} md={12}>\n                                                                                                        <CFormGroup>\n                                                                                                             <CLabel htmlFor=\"chartType\">Type de chart</CLabel>\n\n                                                                                                                      <Select\n                                                                                                                        name=\"chartType\"\n                                                                                                                        value={this.state.selectedType}\n                                                                                                                        options={this.state.chartTypes}\n                                                                                                                        onChange={e => this.setState({selectedType: e})}\n\n                                                                                                                      />\n                                                                                                       </CFormGroup>\n                                                                                                   </CCol>\n\n                                                                                               </CFormGroup>\n                                                                                               <CFormGroup row className=\"my-0\">\n                                                                                                   <CCol sm={12} md={12}>\n                                                                                                     <CFormGroup>\n                                                                                                       <CLabel htmlFor=\"workfowMaster\">Maître de flux de travail</CLabel>\n                                                                                                                  <Select\n                                                                                                                         name=\"workfowMaster\"\n                                                                                                                         value={this.state.selectedWorkflowMaster}\n                                                                                                                         options={this.state.worklfowMasters}\n                                                                                                                         onChange={e => this.selectWorklfowMaster(e)}\n                                                                                                                       />\n                                                                                                 </CFormGroup>\n                                                                                                   </CCol>\n                                                                                                   <CCol sm={12} md={12}>\n                                                                                                        <CFormGroup>\n                                                                                                             <CLabel htmlFor=\"indicator\">Indicateur</CLabel>\n                                                                                                                      <Select\n                                                                                                                        name=\"indicator\"\n                                                                                                                        value={this.state.selectedPerformanceIndicator}\n                                                                                                                        options={this.state.performanceIndicators}\n                                                                                                                        onChange={e => this.setState({selectedPerformanceIndicator: e})}\n                                                                                                                      />\n                                                                                                       </CFormGroup>\n                                                                                                   </CCol>\n                                                                                               </CFormGroup>\n                                                                                               </CForm>\n                                                               </Dialog>\n                                      </CCard>\n                                      <CRow xs=\"4\">\n\n                                          <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                                            <CButton block variant=\"outline\" color=\"info\" id=\"formSave\" onClick={e => this.handleFormSubmit(e)}><Save/> Enregister</CButton>\n                                          </CCol>\n                                          <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                                            <CButton block variant=\"outline\" color=\"danger\" onClick={()=> this.props.history.push(\"/admin/dashboard/list\")}><Cancel /> Annuler</CButton>\n                                          </CCol>\n                                          </CRow>\n                            </CForm>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n    );\n  }\n\n}\nfunction getFromLS(key) {\n    let ls = {};\n    if (localStorage) {\n        try {\n            ls = JSON.parse(localStorage.getItem(key)) || {};\n        } catch (e) {\n            /*Ignore*/\n        }\n    }\n    return ls[key];\n}\n\nfunction saveToLS(key, value) {\n    if (localStorage) {\n        localStorage.setItem(\n            key,\n            JSON.stringify({\n                [key]: value\n            })\n        );\n    }\n}\n\nif (process.env.STATIC_EXAMPLES === true) {\n    import(\"./test-hook.js\").then(fn => fn.default(CreateDashboard));\n}"],"sourceRoot":""}