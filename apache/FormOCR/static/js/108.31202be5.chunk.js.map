{"version":3,"sources":["views/IMS/QMS/CreateAdditionalWorkflow.js"],"names":["makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","CreateAdditionalWorkflow","props","useRef","React","useState","submitFormFields","setSubmitFormFields","formCodes","setFormCodes","setFormIds","formDataHistoric","setFormDataHistoric","processKey","setProcessKey","setProcessInstanceId","setData","setHistorics","forms","setForms","formsData","setFormsData","setComponentsData","formFields","setFormFields","setWorkflowMasterId","localStorage","getItem","workflowMasterName","JSON","parse","domainName","visible","setVisible","useEffect","processDefinitionKey","match","params","workflowMaster_id","workflowMasterId","processInstanceId","submitForm","process_data","method","headers","body","stringify","fetch","PROCESS_SERVICE","then","response","Promise","resolve","reject","text","length","catch","err","data","tab","codesTab","map","formField","index","push","formCode","id","undefined","validationConstraints","label","constraint","name","getFormsByFormCodes","history","error","console","log","setItem","historicVariableInstances","historicTaskInstances","taskForm","value","variableName","Array","isArray","some","item","_","isEqual","form_data","FORM_SERVICE","dataVal","forms_data","forms_json","list","formData","components","formFunction","form","options","readOnly","submission","onChange","event","changed","formsDataVal","handleChange","isVisible","className","mode","style","height","onSubmit","e","domainId","username","handleFormSubmit"],"mappings":"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","file":"static/js/108.31202be5.chunk.js","sourcesContent":["\n\nimport React, {useEffect, useCallback, useRef} from 'react'\nimport {submitForm} from \"../../../assets/form/submitForm.bpmn.jsx\";\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CLink\n} from '@coreui/react'\nimport 'primeicons/primeicons.css';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.css';\nimport 'primeflex/primeflex.css';\nimport { Menu } from 'primereact/menu';\nimport CIcon from '@coreui/icons-react'\nimport { DocsLink } from 'src/reusable'\nimport { Link } from 'react-router-dom'\nimport {FormBuilder} from 'react-formio';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport {Form} from 'react-formio';\nimport _ from 'lodash';\nimport 'formiojs/dist/formio.full.min';\nimport 'formiojs/dist/formio.full.min.css';\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Input from \"@material-ui/core/Input\";\nimport {array} from \"prop-types\";\nimport {SERVER_URL, FORM_SERVICE, PROCESS_SERVICE} from \"../../../constants\";\n\nimport $ from \"jquery\";\nimport {ProgressBar} from \"primereact/progressbar\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        marginLeft: 0+'px !important',\n        minWidth: 220,\n        maxWidth: 300,\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n    noLabel: {\n        marginTop: theme.spacing(3),\n    },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst CreateAdditionalWorkflow = (props) => {\n    const menu = useRef(null);\n    const [formName, setFormName] = React.useState(\"\");\n    const [submitFormFields, setSubmitFormFields] = React.useState({});\n    const [formCode, setFormCode] = React.useState(\"\");\n    const [formCodes, setFormCodes] = React.useState(\"\");\n    const [formId, setFormId] = React.useState(\"\");\n    const [formIds, setFormIds] = React.useState([]);\n    const [formDataHistoric, setFormDataHistoric] = React.useState([]);\n    const [formKey, setFormKey] = React.useState(\"\");\n    const [tasksFormKeys, setTasksFormKeys] = React.useState([]);\n    const [processKey, setProcessKey] = React.useState(\"\");\n    const [processInstanceId, setProcessInstanceId] = React.useState(\"\");\n    const [taskId, setTaskId] = React.useState(\"\");\n    const [accessControl, setAccessControl] = React.useState([]);\n    const [data, setData] = React.useState([]);\n    const [historics, setHistorics] = React.useState([]);\n    const [forms, setForms] = React.useState([]);\n    const [formsData, setFormsData] = React.useState([]);\n    const [roles, setRoles] = React.useState([]);\n    const [componentsData, setComponentsData] = React.useState([]);\n    const [newComponents, setNewComponents] = React.useState([]);\n    const [form, setForm] = React.useState({});\n    const [formList, setFormList] = React.useState([]);\n    const [codes, setCodes] = React.useState([]);\n    const [formFields, setFormFields] = React.useState([]);\n    const [displayMaximizable, setDisplayMaximizable] = React.useState(false);\n    const [position, setPosition] = React.useState('center');\n    const [workflowMasterId, setWorkflowMasterId] = React.useState('');\n    const [workflowMasterName, setWorkflowMasterName] = React.useState(localStorage.getItem(\"workflowMasterName\"));\n    const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n    const [visible, setVisible] = React.useState(true);\n\n\n\n    const dialogFuncMap = {\n\n        'displayMaximizable': setDisplayMaximizable,\n\n    }\n\n\n    const onClick = ( position) => {\n        dialogFuncMap['displayMaximizable'](true);\n        localStorage.setItem(\"processHistory\", forms)\n        if (position) {\n            setPosition(position);\n        }\n    }\n\n    useEffect(()=>{\n        const processDefinitionKey = props.match.params.processKey;\n        const workflowMaster_id = props.match.params.workflowMasterId;\n        const processInstanceId = props.match.params.processInstanceId;\n        setProcessKey(processDefinitionKey)\n\n\n        setSubmitFormFields(JSON.parse(submitForm))\n        setWorkflowMasterId(workflowMaster_id);\n        setProcessInstanceId(processInstanceId);\n\n\n        /************ create new instance ****************/\n        var process_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n            },\n            body: JSON.stringify({processKey:processDefinitionKey, domainName: domainName })\n        };\n        fetch(PROCESS_SERVICE+\"/api/process/createNewInstance\", process_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n//      console.log(data[0].validationConstraints[0].name)\n                var tab = [];\n                var codesTab = [];\n\n                data.map((formField, index) =>{\n                    codesTab.push({formCode: formField.id})\n                    if(formField.validationConstraints[0] === undefined){\n                        tab.push({id: formField.id, label: formField.label, constraint: null})\n                    }else{\n                        tab.push({id: formField.id, label: formField.label, constraint: formField.validationConstraints[0].name})\n                    }\n                })\n                setFormIds(codesTab)\n                setFormCodes(codesTab)\n                setFormFields(tab);\n                if(codesTab[0] !== undefined ){\n                    // this.setState({formKey: data.startFormKey});\n                    getFormsByFormCodes(codesTab);\n\n                }else{\n                    props.history.push(\"/dashboard\");\n\n                }\n            }).catch(error => {\n            console.log(error);\n        });\n        /************************* get instance historic data from workflowMaster *************/\n\n        //  this.setState({processKey: processKey})\n        const username = localStorage.getItem(\"username\");\n        localStorage.setItem(\"processInstanceId\",processInstanceId)\n        process_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({processInstanceId: processInstanceId})\n        };\n        fetch(PROCESS_SERVICE +\"/api/process/auth/historic\", process_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    })\n                        .catch(err => {\n                            reject(err);\n                        });\n                });\n            })\n            .then(data => {\n\n                //   console.log( data.historicTaskInstances);\n                //console.log(JSON.parse(data.processDefinitionId))\n                const historicVariableInstances = JSON.parse(data.historicVariableInstances);\n                const historicTaskInstances = JSON.parse(data.historicTaskInstances);\n               // setProcessKey(historicVariableInstances[0].processDefinitionKey)\n                setHistorics(historicVariableInstances);\n                var taskForms = []\n                var ids = [];\n                var formDataHistoric = []\n                historicVariableInstances.map(taskForm => {\n                    if (typeof (taskForm.value) === \"object\") {\n                        var formCode = taskForm.variableName;\n                        /* let taskId = []\n                         taskId = Object.keys(instance_data.value);\n                         console.log(taskId)\n                         console.log(instance_data.value)*/\n                        /*\n                                          instance_data.map(id =>{\n                                              const taskForm = instance_data.value.[id];\n                                             var taskFormCodes = Object.keys(taskForm)*/\n                        //   taskForms.push(taskForm.value)\n\n\n                        if(taskForm.value !== null  && !Array.isArray(taskForm.value)){\n\n                            if(!formDataHistoric.some(item => _.isEqual(item, taskForm.value))){\n                                formDataHistoric.push(taskForm.value)\n                                /*if(taskForm.variableName.toUpperCase() === taskForm.variableName){\n                                    ids.push({formCode: taskForm.variableName})\n                                }*/\n\n                            }\n\n\n                        }\n                    }\n                    /* taskForm.map(formVal =>{\n\n                      /!*   if(!Array.isArray(formVal.[item])){\n                             formDataHistoric.push(formVal.[item])\n                         }else{\n                             formDataHistoric.push(...formVal.[item])\n                         }*!/\n                     })*/\n\n                })\n\n                setFormIds(formDataHistoric)\n                setFormDataHistoric(formDataHistoric)\n                setFormsData(formDataHistoric)\n                /* taskForms.map( item =>{\n                     idsTab.push({formId: Object.keys(item)})\n                 })*/\n                /*      console.log(taskForms_string)\n              var string_executions = taskForms_string.substring(1, taskForms_string.length -2)\n                        var array_executions = string_executions.split(',')\n                        console.log(array_executions)\n                        const taskForms = array_executions;\n\n              const taskFormsList = JSON.parse(data.taskForms);\n              console.log(taskFormsList)\n      */\n\n               /* const form_data = {\n                    method: 'POST',\n                    headers: {\n                        \"X-Tenant\": domainName,\n                        'Content-Type': 'application/json',\n                        \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n                    body: JSON.stringify({formCodes : ids})\n                };\n                console.log(ids)\n\n                fetch(FORM_SERVICE +'/api/form/getByFormCodes',form_data)\n                    .then(response => {\n                        return new Promise((resolve, reject) => {\n                            response.text().then(body => {\n                                resolve(\n                                    body.length ? JSON.parse(body) : null\n                                );\n                            }).catch(err => {\n                                reject(err);\n                            });\n                        });\n                    })\n                    .then(data => {\n                        console.log(data)\n                        if(data !== null){\n                            localStorage.setItem(\"formsJson\",data.forms_json );\n                            var table = []\n                            const forms_data =JSON.parse(data.forms_json);\n                            var tab = [];\n                            var list = [];\n                            var listCodes = []\n                            // tab.push(...forms_data[1].form.components)\n                            //  setFormCode(forms_data[1].formCode)\n                            forms_data.map((formData, index) =>{\n                                tab.push(...formData.components)\n                            })\n                            console.log(tab)\n                            setComponentsData(tab)\n                            console.log(forms_data);\n                            setForms(forms_data);\n                        }\n\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    });*/\n                setData(JSON.parse(data.historicVariableInstances));\n              //  console.log(JSON.parse(data.historicVariableInstances))\n                setVisible(false)\n\n            }).catch(error => {\n            console.log(error);\n        });\n    }, [])\n\n    const handleFormSubmit = (event )=> {\n        // event.preventDefault();\n        console.log(formsData)\n        const formKey = formKey;\n        var data = formsData;\n        const domainName = JSON.parse(localStorage.getItem(\"domain_data\")).domainName;\n        const domainId = JSON.parse(localStorage.getItem(\"domain_data\")).domainId;\n        const username = localStorage.getItem(\"username\");\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({ username: username,domainId: domainId, domainName: domainName, \"startEvent\": data, formCodes: formCodes, processDefinitionKey : processKey})\n        };\n        fetch(PROCESS_SERVICE+'/api/process/startProcess', form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            }).then(data => {\n            setProcessInstanceId(data.processInstanceId)\n            props.history.push(\"/process/instances/\"+localStorage.getItem(\"processName\"));\n            // this.props.history.push(\"/admin/formView\");\n        })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n    const getFormsByFormCodes =(data) => {\n\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({formCodes : data})\n        };\n\n        fetch(FORM_SERVICE+'/api/form/getByFormCodes',form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(dataVal => {\n                //  console.log(dataVal.forms_json);\n                var table = []\n                const forms_data =JSON.parse(dataVal.forms_json);\n                var tab = [];\n                var list = [];\n                // tab.push(...forms_data[1].form.components)\n                //  setFormCode(forms_data[1].formCode)\n                forms_data.map((formData, index) =>{\n                    list.push(formData.components)\n                    tab.push(formData.components)\n                })\n                setComponentsData(tab)\n//                  setForms(forms_data);\n                setForms(forms_data)\n\n\n              //  console.log(forms_data)\n//        this.setState({formName: JSON.parse(datas.form_data).name})\n//        this.setState({components: JSON.parse(datas.form_json).components});\n//        this.setState({form: JSON.parse(datas.form_json)});\n//        const form = JSON.parse(dataVal.form_json);\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n\n    /*const getForms = forms.map((formData, index) =>\n\n        formFields[index].constraint === \"readonly\"  ?\n            <Form form={formData}\n                  options={{\n                      readOnly: true\n                  }}\n                  submission={{data: formDataHistoric[formsData.length - 1 - index] }}\n\n\n            />\n\n            : <Form form={formData} options={{\n                readOnly: false\n            }}\n                    submission={{data: formsData[formsData.length - 1 - index]}}\n                    onChange={event => {\n\n                        var formsDataVal = [...formsData]\n                        console.log(event.data)\n                        console.log(formsData[formsData.length - 1 - index])\n                        formsDataVal[formsData.length - 1 - index] = event\n                        setFormsData(formsDataVal)\n                        /!*var formsData = this.state.formsData;\n                         formsData[index] = event;\n                         this.setState({formsData: formsData})*!/\n                    }}\n            />\n\n\n        /!* var editableForms = [...this.state.editabeFormsIds]\n         editableForms.push(this.state.formIds[index]);*!/\n\n    )\n*/\n\n    const handleChange = (submission, index) => {\n\n        if (submission.changed) {\n\n            var formsDataVal = [...formsData]\n            formsDataVal[formsData.length - 1 - index] = submission.data\n\n            setFormsData(formsDataVal)\n        }\n\n    }\n   const formFunction = (formData, index) => {\n\n     //  console.log(formsData)\n        if(formFields[index].constraint === \"readonly\"){\n            return(\n                <Form form={formData}\n                      options={{\n                          readOnly: true\n                      }}\n                      submission={{data: formDataHistoric[formsData.length - 1 - index] }}\n\n\n                />\n            )\n        }else{\n            return(  <Form form={formData} options={{\n                    readOnly: false\n            }}\n                           submission={{data: formsData[formsData.length - 1 - index]}}\n                           onChange={event => handleChange(event, index)}\n\n\n\n                />\n\n            )  }\n    }\n\n    // )\n    const isVisible = visible\n\n\n    return (\n        <div>\n            <CCard>\n                <CCardHeader>\n                    <div className=\"m-subheader\">\n                        <div className=\"d-flex align-items-center\">\n                            <div className=\"mr-auto col-xs-6 \"><h4\n                                className=\"m-subheader__title m-subheader__title--separator\"><span className=\"ng-tns-c2-0\">Aperçu  -  {workflowMasterName}</span>\n                            </h4>              </div>\n                            <div className=\"card-header-actions\">\n                                {/*<CLink\n                    style={{color: \"#716ACA\"}}\n                    onClick={()=> props.history.push(\"/process/instances/10ef4af6-e9e3-48a6-8319-0f0758f12bd9_Plan Processus/\"+workflowMasterId)}\n                    rel=\"noreferrer noopener\"\n                    target=\"_blank\"\n                    className=\"c-subheader-nav-link\"\n                  >\n                            <i  size=\"2xl\" className=\"pi pi-arrow-left\" onClick={(event) => console.log(event)}></i>\n                  </CLink>*/}\n\n                                {/*<Menu model={items} popup ref={menu} />\n                                <CLink className=\"c-subheader-nav-link\" style={{paddingLeft: \"15px\", paddingRight: \"20px\"}} >\n                                    <i  size=\"2xl\" className=\"pi pi-bars\" onClick={(event) => menu.current.toggle(event)}></i>\n                                </CLink>*/}\n                            </div>\n                        </div>\n                    </div>\n                </CCardHeader>\n                <CCardBody>\n                    {isVisible && <ProgressBar  mode=\"indeterminate\" style={{ height: '6px' }}></ProgressBar>}\n\n\n                    { forms.map((formData, index) =>\n                        formFunction(formData, index)) }\n                    {!isVisible && <Form form={submitFormFields}\n\n                                         onSubmit={(e)=>handleFormSubmit(e)}  />}\n\n                </CCardBody>\n            </CCard>\n\n        </div>\n    )\n}\nexport default CreateAdditionalWorkflow;\n\n"],"sourceRoot":""}