{"version":3,"sources":["views/Administration/workflowMaster/CreateWorkflowMaster.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","withStyles","withTheme","props","toast","useRef","React","useState","workflowMasterName","setWorkflowMasterName","workflowMasterCode","setWorkflowMasterCode","workflow","setWorkflow","selectedWorkflow","setSelectedWorkflow","JSON","parse","localStorage","getItem","domainId","rolesAdmin","setRolesAdmin","roles","setRoles","userRoles","setUserRoles","processAccessRoles","setProcessAccessRoles","disableAddNewButton","setDisableAddNewButton","forms","setForms","workflowMasterCodeState","setWorkflowMasterCodeState","workflowMasterCodeError","setWorkflowMasterCodeError","workflowState","setWorkflowState","workflowError","setWorkflowError","workflowValid","setWorkflowValid","formFields","setFormFields","value","label","operators","source","indicator","percentage","operator1","operator2","formField1","formField2","formValues","setFormValues","link","additionalWorkflow","setAdditionalWorkflow","domainName","useEffect","get_header","method","headers","fetch","USER_SERVICE","then","response","json","data","console","log","rolesFromApi","map","role","push","roleName","id","roleId","catch","error","workflow_data","body","stringify","WORKFLOW_SERVICE","Promise","resolve","reject","text","length","err","workflowsApi","item","name","version","createTree","isSub","lev","children","component","level0","components","type","title","fieldKey","key","datagridComp","level1","columns","col","sub_comp","level3","datagridComps","level4","comp","level5","level6","getFormsByFormCodes","form_data","formCodes","FORM_SERVICE","dataVal","forms_json","tab","list","formData","index","forms_data","forms_list_data","getFormById","form_json","nodeData","form_fields","panel","panelFields","panelChild","ref","xs","sm","noValidate","row","className","md","htmlFor","disabled","onChange","e","target","invalid","event","processCode","requestOptions","code","test","WORKFLOW_MASTER_SERVICE","verifyProcessCode","placeholder","options","isMulti","color","isClearable","selected","process_data","workflowId","status","formsIds","taskTab","taskForms","newTab","Array","from","Set","formCode","getFormsByWorkflow","style","fontSize","variant","inline","marginBottom","custom","element","width","borderBottom","i","newFormValues","handleChangeLink","handleChangeWorkflow","handleChangeRoles","paddingTop","onClick","preventDefault","newAdditionalWorkflow","splice","removeWorkflowFields","icon","handleChange","handleChangeSelectForm","required","handleChangeSelect1","handleChangeFormField1","require","checked","handleChangeCheckbox","removeFormFields","handleChangeSelect2","handleChangeFormField2","xl","block","performanceIndicators","performanceIndicatorsTab","count","workflow_master_data","username","rolesUser","additionalWorkflows","workflowMasterId","setItem","history"],"mappings":"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","file":"static/js/106.12278e6e.chunk.js","sourcesContent":["\nimport React, {useEffect, useRef} from 'react';\nimport { Toast } from 'primereact/toast';\nimport {Checkbox} from 'primereact/checkbox';\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CInput, CSelect,\n  CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback, CInputCheckbox\n} from '@coreui/react'\nimport { Button } from 'primereact/button';\n\nimport {SERVER_URL, USER_SERVICE, WORKFLOW_SERVICE, WORKFLOW_MASTER_SERVICE, FORM_SERVICE} from \"../../../constants\";\nimport \"./css/styles.css\";\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport \"primeicons/primeicons.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport \"primereact/resources/primereact.css\";\nimport \"primeflex/primeflex.css\";\n\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from 'react-select';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Input from \"@material-ui/core/Input\";\nimport { Panel } from 'primereact/panel';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    marginLeft: 0+'px !important',\n    minWidth: 220,\n    maxWidth: 300,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst CreateWorkflowMaster = (props) => {\n    const toast = useRef(null);\n  const [collapsed, setCollapsed] = React.useState(true)\n  const [showElements, setShowElements] = React.useState(true)\n  const [workflowMasterName, setWorkflowMasterName] = React.useState('');\n  const [alert, setAlert] = React.useState('');\n  const [workflowMasterCode, setWorkflowMasterCode] = React.useState('');\n  const [display, setDisplay] = React.useState('');\n  const [workflow, setWorkflow] = React.useState([]);\n  const [selectedWorkflow, setSelectedWorkflow] = React.useState(null);\n  const [type, setType] = React.useState('workflow');\n  const [formCodeState, setFormCodeState] = React.useState('');\n  const [form, setForm] = React.useState('');\n  const [domainId, setDomainId] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainId);\n  const [rolesAdmin, setRolesAdmin] = React.useState([]);\n  const [roles, setRoles] = React.useState([]);\n  const [userRoles, setUserRoles] = React.useState([]);\n  const [formsList, setFormsList] = React.useState([]);\n  const [fieldsList, setFieldsList] = React.useState([]);\n  const [selectedForm, setSelectedForm] = React.useState('');\n  const [selectedField, setSelectedField] = React.useState('');\n  const [processAccessRoles, setProcessAccessRoles] = React.useState([]);\n  const [xml, setXml] = React.useState([]);\n\n  const [businessObject, setBusinessObject] = React.useState(null);\n  const classes = useStyles();\n  const [modeler, setModeler] = React.useState(null);\n  const [activeIndex, setActiveIndex] = React.useState(null);\n  const [username, setUsername] = React.useState(localStorage.getItem('username'));\n  const [disableAddNewButton, setDisableAddNewButton] = React.useState('');\n  const [source, setSource] = React.useState('');\n  const [Indicator, setIndicator] = React.useState('');\n  const [forms, setForms] = React.useState([]);\n\n  const [operator1, setOperator1] = React.useState('');\n  const [workflowMasterCodeState, setWorkflowMasterCodeState] = React.useState('');\n  const [workflowMasterCodeError, setWorkflowMasterCodeError] = React.useState('');\n  const [workflowState, setWorkflowState] = React.useState('');\n  const [workflowError, setWorkflowError] = React.useState('');\n  const [workflowValid, setWorkflowValid] = React.useState('');\n  const [operator2, setOperator2] = React.useState('');\n  const [formField1, setFormField1] = React.useState('');\n  const [formField2, setFormField2] = React.useState('');\n  const [formFields, setFormFields] = React.useState([]);\n  const [operators, setOperators] = React.useState([{value:\"somme\", label:\"Somme\"}, {value:\"compte\", label: \"Compte\"}]);\n  const [percentage, setPercentage] = React.useState(false);\n  const [formValues, setFormValues] = React.useState([{ source: \"\", indicator: \"\", percentage:false, operator1:\"\", operator2:\"\", formField1:\"\", formField2:\"\"  }]);\n  const [additionalWorkflow, setAdditionalWorkflow] = React.useState([{ link: \"\", workflow:{label:\"\", value:\"\"}, roles:[]}]);\n  const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\n\n    useEffect(()=> {\n        const get_header = {\n            method: 'GET',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n            }\n        };\n    fetch(USER_SERVICE + \"/api/auth/role/getRoles\", get_header)\n      .then((response) => {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n        var rolesFromApi = [];\n\n        data.map(role => {\n          rolesFromApi.push({\n            value : role.roleName,\n            label : role.roleName,\n              id: role.roleId\n          })})\n        setUserRoles(rolesFromApi);\n\n      }).catch(error => {\n      console.log(error);\n    });\n\n    const workflow_data = {\n          method: 'POST',\n          headers: {\n              \"X-Tenant\": domainName,\n              'Content-Type': 'application/json',\n            \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n          body: JSON.stringify({domainId: domainId})\n        };\n        fetch(WORKFLOW_SERVICE + '/api/workflow/getAll',workflow_data)\n          .then(response => {\n            return new Promise((resolve, reject) => {\n              response.text().then(body => {\n                resolve(\n                  body.length ? JSON.parse(body) : null\n                );\n              }).catch(err => {\n                reject(err);\n              });\n            });\n          })\n          .then(data => {\n            console.log(data);\n            var workflowsApi = [];\n                    data.map(item => {\n                      workflowsApi.push({\n                        value : item.id,\n                        label : item.name+\"-\"+item.version\n                      })})\n                       setWorkflow(workflowsApi);\n            });\n/* var model = new Modeler({\n   container: '#bpmnview',\n   propertiesPanel: {\n     parent: '#propview'\n   },\n   additionalModules: [\n     propertiesPanelModule,\n     propertiesProviderModule\n   ],\n   moddleExtensions: {\n     camunda: camundaModdleDescriptor\n   }\n\n })*/\n\n   /* model.importXML(emptyBpmn, (error) => {\n      if (error) {\n        return console.log('fail import xml');\n      }\n      var  canvas = null;\n      canvas = model.get('canvas') ;\n      canvas.zoom('fit-viewport');\n     setBusinessObject(canvas._rootElement.businessObject);\n     setModeler(model)\n      // const data = canvas._rootElement.businessObject;\n      // console.log(data);\n    });*/\n  },[]);\n    const createTree =(data, isSub,lev) => {\n        let children = [];\n        let count = 0;\n        console.log(data)\n        data.map((component, level0) =>{\n            if (typeof(component.components) === 'object') { // Sub array found, build structure\n                //   children.push({label: component.title, key: component.key, children: createTree(component.components, true, level)})\n                if (component.type !== \"datagrid\"){\n                    children.push({\n                        label: component.title,\n                        id: component.id,\n                        fieldKey: component.key,\n                        children: createTree(component.components, true, count)\n                    })\n                }else{\n                    component.components.map((datagridComp, level1) => {\n                        if (typeof(datagridComp.components) === 'object')  {\n                            children.push({\n                                label: datagridComp.label,\n                                id: datagridComp.id,\n                                fieldKey: datagridComp.key,\n                                children: createTree(datagridComp.components, true, count)\n                            })\n                        } else  if(typeof(datagridComp.columns) === 'object')\n                        {\n                            datagridComp.columns.map((col) =>{\n                                if (typeof(col.components) === 'object') { // Sub array found, build structure\n                                    col.components.map((sub_comp, level3) =>{\n                                        if (typeof(sub_comp.components) === 'object') {\n                                            if (sub_comp.type !== \"datagrid\"){\n                                                children.push({\n                                                    label: sub_comp.label,\n                                                    id: sub_comp.id,\n                                                    fieldKey: sub_comp.key,\n                                                    children: createTree(sub_comp.components, true, count)\n                                                })\n                                            }else{\n                                                sub_comp.components.map((datagridComps, level4) => {\n                                                    if (typeof(datagridComps.components) === 'object')  {\n                                                        children.push({\n                                                            label: datagridComps.label,\n                                                            id: datagridComps.id,\n                                                            fieldKey: datagridComps.key,\n                                                            children: createTree(datagridComps.components, true, count)\n                                                        })\n                                                    } else {\n                                                        children.push({\n                                                            label: datagridComps.label,\n                                                            id: datagridComps.id,\n                                                            fieldKey: datagridComps.key,\n                                                        })\n                                                    }\n                                                })\n                                            }\n                                        } else{\n                                            children.push(\n                                                {label: sub_comp.label,\n                                                    id: sub_comp.id,\n                                                    fieldKey: sub_comp.key,\n                                                }\n                                            );\n                                        }\n                                    })\n                                }\n                            })\n                        }else{\n                            children.push({\n                                label: datagridComp.label,\n                                id: datagridComp.id,\n                                fieldKey: datagridComp.key,\n                            })\n                        }\n                    })\n                }\n            }else if (typeof(component.columns) === 'object') {\n                component.columns.map((col) =>{\n                    if (typeof(col.components) === 'object') { // Sub array found, build structure\n                        col.components.map((comp, level5) =>{\n                            if (typeof(comp.components) === 'object') {\n                                if (comp.type !== \"datagrid\"){\n                                    children.push({\n                                        label: comp.label,\n                                        id: comp.id,\n                                        fieldKey: comp.key,\n                                        children: createTree(comp.components, true, count)\n                                    })\n                                }else{\n                                    comp.components.map((datagridComp, level6) => {\n                                        if (typeof(datagridComp.components) === 'object')  {\n                                            children.push({\n                                                label: datagridComp.label,\n                                                id: datagridComp.id,\n                                                fieldKey: datagridComp.key,\n                                                children: createTree(datagridComp.components, true, count)\n                                            })\n                                        } else {\n                                            children.push({\n                                                label: datagridComp.label,\n                                                id: datagridComp.id,\n                                                fieldKey: datagridComp.key,\n                                            })\n                                        }\n                                    })\n                                }\n                            } else{\n                                children.push(\n                                    {label: comp.label,\n                                        id: comp.id,\n                                        fieldKey: comp.key,\n                                    }\n                                );\n                            }\n                        })\n                    }\n                })\n            }else { // No submenu, bottom of tree\n                children.push(\n                    {label: component.label,\n                        id: component.id,\n                        fieldKey: component.key,\n                    }\n                );\n            }\n        })\n\n        //  setExpandedKeys(keys)\n        /* console.log(keys)*/\n\n        return children;\n        //return <div className='filter-body open'>{children}</div>;\n\n    }\n    let handleChange = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][e.target.name] = e.target.value;\n        setFormValues(newFormValues);\n    };\n    let handleChangeCheckbox = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][e.target.name] = e.checked;\n        setFormValues(newFormValues);\n    };\n    let handleChangeSelect1 = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"operator1\"] = e;\n        setFormValues(newFormValues);\n    };\n\n    let handleChangeSelect2 = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"operator2\"] = e;\n        setFormValues(newFormValues);\n    };\n    let handleChangeFormField1 = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"formField1\"] = e;\n        setFormValues(newFormValues);\n    };\n    let handleChangeFormField2 = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"formField2\"] = e;\n        setFormValues(newFormValues);\n    };\n    let handleChangeLink = (i, e) => {\n        let newFormValues = [...additionalWorkflow];\n        newFormValues[i][\"link\"] = e.target.value;\n        setAdditionalWorkflow(newFormValues);\n    };\n    let handleChangeRoles = (i, e) => {\n        let newFormValues = [...additionalWorkflow];\n        newFormValues[i][\"roles\"] = e;\n        setAdditionalWorkflow(newFormValues);\n    };\n    let handleChangeWorkflow = (i, e) => {\n        let newFormValues = [...additionalWorkflow];\n        newFormValues[i][\"workflow\"] = e;\n        setAdditionalWorkflow(newFormValues);\n    };\n    let handleChangeSelectForm = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"source\"] = e;\n        setFormValues(newFormValues);\n        if(e.value !== \"\"){\n            getFormById(e.value)\n        }\n    };\n\n    let addFormFields = () => {\n        setFormValues([...formValues, {  source: \"\", indicator: \"\", percentage:false, operator1:\"\", operator2:\"\", formField1:\"\", formField2:\"\"  }]);\n    };\n    let addWorkflowFields = () => {\n        setAdditionalWorkflow([...additionalWorkflow, {  link: \"\", workflow:{label:\"\", value:\"\"}, roles:[] }]);\n    };\n\n    let removeFormFields = (event, i) => {\n        event.preventDefault();\n        let newFormValues = [...formValues];\n        newFormValues.splice(i, 1);\n        setFormValues(newFormValues);\n    };\n    let removeWorkflowFields = (event, i) => {\n        event.preventDefault();\n        let newAdditionalWorkflow = [...additionalWorkflow];\n        newAdditionalWorkflow.splice(i, 1);\n        setAdditionalWorkflow(newAdditionalWorkflow);\n    };\n\n    let handleSubmitTest = (event) => {\n        event.preventDefault();\n        toast.current.show({severity:'success', summary: 'Success Message', detail:JSON.stringify(formValues), life: 3000});\n\n        // alert(JSON.stringify(formValues));\n    };\n\nconst handleSubmit =(event ) => {\n    event.preventDefault();\n    if(workflowState === \"success\" && workflowMasterCodeState === \"success\" ){\n        // const performanceIndicators = JSON.stringify(formValues)\n        const performanceIndicators = formValues\n\n        var performanceIndicatorsTab = []\n        if (performanceIndicators.length ){\n            for(var count = 0; count < performanceIndicators.length; count ++ ){\n                if( performanceIndicators[count].source !== \"\"){\n                    performanceIndicatorsTab.push(performanceIndicators[count])\n                }\n            }\n        }\n        const workflow_master_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({name: workflowMasterName, username: localStorage.getItem(\"username\"),\n                code: workflowMasterCode, workflowId: selectedWorkflow.value, processAccessRoles: processAccessRoles,\n                domainId: domainId, rolesAdmin:rolesAdmin, rolesUser:roles,\n                disableAddNewButton: disableAddNewButton, performanceIndicators :performanceIndicatorsTab,\n                additionalWorkflows: additionalWorkflow})\n        };\n\n        fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/create', workflow_master_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                const workflowMasterId = data.workflowMasterId\n                localStorage.setItem(\"workflowMasterId\", workflowMasterId)\n                props.history.push(\"/admin/workflowMaster/menuMapping/\"+workflowMasterId);\n\n            })\n    }else{\n        if(workflowMasterCodeState === \"\"){\n            setWorkflowMasterCodeState(\"error\")\n            setWorkflowMasterCodeError(\"L'identifiant est un champ obligatoire !\")\n        }\n        if(workflowState === \"\"){\n            setWorkflowState(\"error\")\n            setWorkflowError(\"Le workflow est un champ obligatoire !\")\n        }\n    }\n\n  }\n\n    const getFormsByWorkflow =(selected ) => {\n        // event.preventDefault();\n        // console.log(selectedWorkflow.value);\n\n        const process_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({workflowId: selected.value})\n        };\n        setWorkflowValid(\"\")\n        setWorkflowError(\"\")\n\n        fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getFormsByWorkflowId', process_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                if(data.status === 500 ){\n                    console.log(data);\n                    setWorkflowValid(\"\")\n                    setWorkflowState(\"error\")\n                    setWorkflowError(\"Déploiement erronée! Verifier la configuration de ce workflow ! \")\n\n\n                }else{\n                    console.log(data);\n                    var formsIds = [];\n                    data.map(taskTab =>{\n                        formsIds.push(...taskTab)\n                    })\n                    var tab = []\n\n                    formsIds.map(taskForms =>{\n                        tab.push(...taskForms)\n                    })\n                    // console.log(tab)\n                    var newTab = Array.from(new Set(formsIds))\n                    console.log(newTab)\n                    var formCodes = []\n                    newTab.map(formCode =>{\n                        formCodes.push({formCode: formCode})\n                    })\n                    getFormsByFormCodes(formCodes)\n                    setWorkflowError(\"\")\n                    setWorkflowState(\"success\")\n                    setWorkflowValid(\"Déploiement effectué avec succès ! \")\n\n                }\n              /*  const forms = JSON.parse(data.forms)\n                var list = []\n                forms.map(form =>{\n                    list.push({label: form.name, value: form.id})\n                })\n\n                setFormsList(list)*/\n                // props.history.push(\"/admin/workflowMaster/menuMapping/\"+workflowMasterId);\n            })\n    }\n\n    const getFormsByFormCodes = (data) => {\n\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({formCodes : data})\n        };\n\n        fetch(FORM_SERVICE+'/api/form/getByFormCodes',form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        console.log(body)\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(dataVal => {\n                console.log(dataVal);\n                var table = []\n                const forms_json =JSON.parse(dataVal.forms_json);\n                var tab = [];\n                var list = [];\n                forms_json.map((formData, index) =>{\n                    list.push(formData.components)\n                    tab.push(formData.components)\n                })\n                console.log(tab)\n                const forms_data =JSON.parse(dataVal.forms_data);\n                var forms_list_data = []\n                forms_data.map(formData =>{\n                    forms_list_data.push({label: formData.name, value: formData.id})\n                })\n                setForms([...forms_list_data])\n                // const nodeData = createTree(JSON.parse(data.forms_json)[index].components,true, 0 )\n                // console.log(forms_list_data)\n              /*  this.setState({componentsData: tab})\n                console.log(forms_data);\n//                  setForms(forms_data);\n                this.setState({forms: forms_data})*/\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    const getFormById = (data) => {\n\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({id : data})\n        };\n\n        fetch(FORM_SERVICE+'/api/form/getByFormId',form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        console.log(body)\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(dataVal => {\n                console.log(dataVal);\n                var table = []\n                const form_json =JSON.parse(dataVal.form_json);\n                const nodeData = createTree(form_json.components,true, 0 )\n                console.log(nodeData)\n                var form_fields = []\n                nodeData.map(panel => {\n                    var panelFields = []\n                    if(panel.children && panel.children.length){\n                        panel.children.map(panelChild =>{\n                            panelFields.push({label : panelChild.label, value: panelChild.fieldKey})\n                        })\n                        form_fields.push(...panelFields)\n                    }\n                })\n                setFormFields([...form_fields])\n                console.log(form_fields)\n                // console.log(forms_list_data)\n                /*  this.setState({componentsData: tab})\n                  console.log(forms_data);\n  //                  setForms(forms_data);\n                  this.setState({forms: forms_data})*/\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n    const getFieldsByFormId =(event ) => {\n        event.preventDefault();\n        // console.log(selectedWorkflow.value);\n\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({formId: selectedForm.value})\n        };\n\n        fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getFieldsByFormId', form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                const fields = JSON.parse(data.fields)\n                var list = []\n                fields.map(field =>{\n                    list.push({label: field.name, value: field.id})\n                })\n\n                setFieldsList(list)\n                // props.history.push(\"/admin/workflowMaster/menuMapping/\"+workflowMasterId);\n            })\n    }\n  const hideAlert = () => {\n    setAlert(null)\n  };\n\n  const verifyLength = (value, length) => {\n    if (value.length >= length) {\n      return true;\n    }\n    return false;\n  };\n  const basicAlert = () =>{\n    /* this.setState({alert:\n         <SweetAlert\n           style={{ display: \"block\", marginTop: \"-100px\" }}\n           title=\"the form code is already used !\"\n           onConfirm={() => this.hideAlert()}\n           onCancel={() => this.hideAlert()}\n         />\n     })*/\n  };\n\n  const handleDelete = (chipToDelete) =>{\n    console.log(chipToDelete);\n    console.log(roles);\n    console.log(roles.filter((chip) => chip !== chipToDelete))\n    const data = roles.filter((chip) => chip !== chipToDelete);\n    setRoles(data);\n  };\n    const verifyProcessCode = (processCode) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({code: processCode})\n        };\n        if( !/^[a-zA-Z1-9-*/]*$/g.test(processCode)){\n            setWorkflowMasterCodeState(\"notValid\");\n            setWorkflowMasterCodeError(\"Format invalide !\")\n        }else {\n            fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/verifyProcessCode', requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data)\n                    if (data === 0) {\n                        setWorkflowMasterCodeState(\"success\");\n                    } else {\n                        setWorkflowMasterCodeState(\"exist\");\n                        setWorkflowMasterCodeError(\"L'identifiant du processus est déjà existant !\")\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        }\n    }\n  let icon;\n\n  return (\n    <>\n        <Toast ref={toast} />\n      <CCol xs=\"12\" sm=\"12\">\n        <CCard>\n          <CCardHeader>\n            <h2>Créer un maître de workflow</h2>\n          </CCardHeader>\n          <CCardBody>\n            <CForm  noValidate >\n              <CFormGroup row className=\"my-0\">\n                <CCol sm={12} md={6}>\n                  <CFormGroup>\n                    <CLabel htmlFor=\"workflowMasterId\">S No</CLabel>\n                    <CInput id=\"workflowMasterId\" /*onChange={e => setWorkflowId(e.target.value) }\n                            value={workflowId}*/ disabled />\n                  </CFormGroup>\n                </CCol>\n\n                                <CCol sm={12} md={6}>\n                                  <CFormGroup>\n                                      <CLabel htmlFor=\"workflowMasterName\"> Nom de maître de flux de travail</CLabel>\n                                      <CInput id=\"workflowMasterName\" onChange={e => setWorkflowMasterName(e.target.value) }\n                                              value={workflowMasterName}  />\n                                  </CFormGroup>\n                                  </CCol>\n                                  </CFormGroup>\n                                  <CFormGroup row className=\"my-0\">\n                                  <CCol sm={12} md={6}>\n                                  <CFormGroup>\n                                    <CLabel htmlFor=\"workflowMasterCode\"> Identifiant de processus </CLabel>\n                                    <CInput id=\"workflowMasterCode\"\n                                            value={workflowMasterCode}\n\n                                            invalid={workflowMasterCodeState === \"error\" || workflowMasterCodeState === \"exist\" || workflowMasterCodeState === \"notValid\"}\n                                            onChange={event => {\n                                                setWorkflowMasterCode(event.target.value)\n                                                if(verifyLength(event.target.value, 3) ){\n                                                    setWorkflowMasterCodeState(\"success\");\n                                                    verifyProcessCode( event.target.value)\n                                                } else {\n                                                    setWorkflowMasterCodeState(\"error\");\n                                                    setWorkflowMasterCodeError(\"L'identifiant est obligatoire !\")\n                                                }\n                                            }}\n                                    />\n                                      <CInvalidFeedback className=\"help-block\">\n                                          {workflowMasterCodeError}\n                                      </CInvalidFeedback>\n                                  </CFormGroup>\n                            </CCol>\n                                 <CCol sm={12} md={6}>\n                                       <CFormGroup>\n                                        <CLabel htmlFor=\"AccessControlAdmin\">Contrôle d'accès (Admin)</CLabel>\n                                         <Select\n                                           name=\"form-field-name2\"\n                                           placeholder=\"Global\"\n                                           value={rolesAdmin}\n                                           options={userRoles}\n                                           onChange={setRolesAdmin}\n                                           isMulti\n                                         />\n                                     </CFormGroup>\n                                  </CCol>\n\n\n              </CFormGroup>\n              <CFormGroup row className=\"my-0\">\n                <CCol sm={12} md={6}>\n                                                    <CFormGroup>\n                                                        <CLabel htmlFor=\"AccessControlUser\">Contrôle d'accès (Utilisateur)</CLabel>\n\n                                                        <Select\n                                                          name=\"form-field-name2\"\n                                                          placeholder=\"Global\"\n                                                          value={roles}\n                                                          options={userRoles}\n                                                          onChange={setRoles}\n                                                          isMulti\n                                                        />\n                                                  </CFormGroup>\n                                                </CCol>\n                                                </CFormGroup>\n<CCard>\n<CCardHeader color=\"light\" >\ndémarrer le workflow (ajouter un nouveau)\n</CCardHeader>\n<CCardBody>\n <CFormGroup row className=\"my-0\">\n<CCol sm={12} md={6}>\n                                      <CFormGroup>\n                                          <CLabel htmlFor=\"workflow\">Workflow</CLabel>\n                                          <Select\n                                            name=\"form-field-name2\"\n                                            value={selectedWorkflow}\n                                            options={workflow}\n                                            isClearable={true}\n                                            onChange={event => {\n                                                console.log(event)\n                                                if(event !== null ){\n                                                    if(event.value !== \"\" && event.value !== null ){\n                                                        setWorkflowState(\"success\");\n                                                        setWorkflowError(\"\")\n                                                        setSelectedWorkflow(event)\n                                                        getFormsByWorkflow(event)\n                                                    } else {\n                                                        setWorkflowState(\"error\");\n                                                        setWorkflowValid(\"\")\n                                                        setWorkflowError(\"Le workflow est obligatoire !\")\n                                                    }\n                                                } else {\n                                                    setWorkflowState(\"error\");\n                                                    setWorkflowValid(\"\")\n                                                    setWorkflowError(\"Le workflow est obligatoire !\")\n                                                }\n\n                                            }}\n\n                                          />\n                                          {workflowState === \"success\" ? <p style={{fontSize:\"11px\",color:\"green\"}}>{workflowValid}</p> : <p style={{fontSize:\"11px\",color:\"#C83946\"}}>{workflowError}</p>}\n\n\n                                    </CFormGroup>\n                                  </CCol>\n     <CCol sm={12} md={6}>\n         <CFormGroup>\n             <CLabel htmlFor=\"AccessControlUser\">Contrôle d'accès</CLabel>\n\n             <Select\n                 name=\"form-field-name2\"\n                 placeholder=\"Global\"\n                 value={processAccessRoles}\n                 options={userRoles}\n                 onChange={setProcessAccessRoles}\n                 isMulti\n             />\n         </CFormGroup>\n     </CCol>\n </CFormGroup>\n    <CFormGroup row className=\"my-0\">\n                                  <CCol sm={12} md={6}>\n                                                    <CFormGroup variant=\"custom-checkbox\" inline style={{marginBottom:\"20px\"}}>\n                                                      <CInputCheckbox custom id=\"inline-checkbox2\" name=\"inline-checkbox2\" value=\"option2\" />\n                                                      <CLabel variant=\"custom-checkbox\" htmlFor=\"inline-checkbox2\" onChange={e => setDisableAddNewButton(e.target.value) }\n                                                              value={disableAddNewButton} >Désactiver le bouton \"Ajouter un nouveau\"</CLabel>\n                                                    </CFormGroup>\n                                                  </CCol>\n                                                  </CFormGroup>\n</CCardBody>\n</CCard>\n\n\n                <CCard>\n                    <CCardHeader color=\"light\" >\n                        Workflows supplémentaires\n                    </CCardHeader>\n                    <CCardBody>\n                        {additionalWorkflow.map((element, index) => (\n                            <div  key={index} style={{marginTop:\"10px\"}}>\n                                <div  style={{ width: \"100%\", borderBottom: \"1px solid lightGray\"}}>\n                                    <CFormGroup row className=\"my-0\">\n                                        <CCol sm={12} md={3} >\n                                            <CFormGroup>\n                                                <CLabel htmlFor=\"link\">Lien d'action de workflow</CLabel>\n\n                                                <CInput id=\"link\" name=\"link\" value={element.link || \"\"}\n                                                        onChange={(e) => handleChangeLink(index, e)}/>\n                                            </CFormGroup>\n                                        </CCol>\n                                        <CCol sm={12} md={4}>\n                                            <CFormGroup>\n                                                <CLabel htmlFor=\"workflow\">Workflow</CLabel>\n                                                <Select\n                                                    name=\"form-field-name2\"\n                                                    value={element.workflow}\n                                                    options={workflow}\n                                                    isClearable={true}\n                                                    onChange={event => {\n\n                                                        handleChangeWorkflow( index, event)\n\n                                                    }}\n\n                                                />\n\n\n                                            </CFormGroup>\n                                        </CCol>\n                                        <CCol sm={12} md={4}>\n                                            <CFormGroup>\n                                                <CLabel htmlFor=\"AccessControlUser\">Contrôle d'accès</CLabel>\n\n                                                <Select\n                                                    name=\"form-field-name2\"\n                                                    placeholder=\"Global\"\n                                                    value={element.roles}\n                                                    options={userRoles}\n                                                    onChange={(e)=>handleChangeRoles(index, e)}\n                                                    isMulti\n                                                />\n                                            </CFormGroup>\n                                        </CCol>\n\n                                        <CCol sm={12} md={1} style={{paddingTop:\"25px\"}}\n                                        >\n                                            {index ? (\n                                                <CCol sm={12} md={12} >\n                                                    <Button  onClick={(e) => removeWorkflowFields(e, index)} icon=\"pi pi-trash\" className=\"p-button-rounded p-button-danger\" />\n                                                </CCol>\n                                            ) : null}\n                                        </CCol>\n                                    </CFormGroup>\n\n\n                                </div>\n                            </div>\n                        ))\n                        }\n                        <CCol sm={12} md={6}>\n                            <div className=\"button-section\">\n                                <button\n                                    className=\"button add\"\n                                    type=\"button\"\n                                    onClick={() => addWorkflowFields()}\n                                >\n                                    Add\n                                </button>\n                                {/* <button className=\"button submit\" onClick={handleSubmitTest}>\n                                Submit\n                                </button>*/}\n                            </div>\n                        </CCol>\n                    </CCardBody>\n                </CCard>\n                {/* Card of the KPI*/}\n                <CCard>\n                    <CCardHeader color=\"light\" >\n                        Indicateurs\n                    </CCardHeader>\n                        <CCardBody>\n                            {formValues.map((element, index) => (\n                                <div  key={index} style={{marginTop:\"10px\"}}>\n                                    <div  style={{ width: \"100%\", borderBottom: \"1px solid lightGray\"}}>\n                                    <CFormGroup row className=\"my-0\">\n                                        <CCol sm={12} md={6} >\n                                            <CFormGroup>\n                                                    <CLabel htmlFor=\"indicator\">Indicateur</CLabel>\n\n                                                 <CInput id=\"indicator\" name=\"indicator\" value={element.indicator || \"\"}\n                                                         onChange={(e) => handleChange(index, e)}/>\n                                         </CFormGroup>\n                                        </CCol>\n                                        <CCol sm={12} md={6}>\n                                            <CFormGroup>\n                                                <CLabel htmlFor=\"Source\">Source</CLabel>\n                                                <Select\n                                                    name=\"source\" value={element.source}\n                                                    onChange={(e) => handleChangeSelectForm(index, e)}\n                                                    options={forms}\n                                                    required\n                                                    isClearable={true}\n                                                />\n                                            </CFormGroup>\n                                        </CCol>\n                                    </CFormGroup>\n                                    <CFormGroup row className=\"my-0\">\n                                        <CCol sm={12} md={12}>\n                                            <CFormGroup>\n                                                <CLabel htmlFor=\"Formule\">Formule</CLabel>\n                                                    <div className=\"row\" style={{width: \"100%\"}}>\n                                                        <div className=\"row\" style={{width: \"100%\"}}>\n                                                            <CCol sm={12} md={3}>\n                                                                <Select\n                                                                    name=\"operator1\"\n                                                                    options={operators}\n                                                                    value={element.operator1}\n                                                                    onChange={(e) => handleChangeSelect1(index, e)}                                                            required\n                                                                />\n                                                            </CCol>\n                                                            <CCol sm={12} md={5}>\n                                                                <Select\n                                                                    name=\"formField1\"\n                                                                    options={formFields}\n                                                                    value={element.formField1 || \"\"}\n                                                                    onChange={(e) => handleChangeFormField1(index, e)}\n                                                                    require\n                                                                />\n                                                            </CCol>\n                                                            <CCol sm={12} md={3} style={{paddingTop:\"50px\"}}>\n                                                                <CFormGroup\n                                                                    >\n                                                                    <div className=\"p-col-12\">\n                                                                        <label htmlFor=\"percentage\"    className=\"p-checkbox-label\" >\n                                                                            <Checkbox id=\"percentage\" name=\"percentage\" checked={element.percentage}\n                                                                                         onChange={(e) => handleChangeCheckbox(index, e)} ></Checkbox>\n                                                                        Pourcentage</label>\n                                                                    </div>\n                                                                </CFormGroup>\n                                                            </CCol>\n                                                            <CCol sm={12} md={1} style={{paddingTop:\"50px\"}}\n                                                            >\n                                                                {index ? (\n                                                                    <CCol sm={12} md={12}>\n                                                                        <Button  onClick={(e) => removeFormFields(e, index)} icon=\"pi pi-trash\" className=\"p-button-rounded p-button-danger\" />\n                                                                    </CCol>\n                                                                ) : null}\n                                                            </CCol>\n                                                        </div>\n                                                        <div style={{fontSize: \"25px\", marginTop:\"-70px\", marginBottom:\"10px\", display: \"inline-block\"}}>\n                                                            ______________________________________\n                                                        </div>\n                                                        <div  className=\"row\" style={{width: \"100%\"}}>\n\n                                                            <CCol sm={12} md={3}>\n                                                                <Select\n                                                                    name=\"operator2\"\n                                                                    options={operators}\n                                                                    value={element.operator2 }\n                                                                    onChange={(e) => handleChangeSelect2(index, e)}\n                                                                    required\n                                                                />\n                                                            </CCol>\n                                                            <CCol sm={12} md={5}>\n                                                                <Select\n                                                                    name=\"formField2\"\n                                                                    options={formFields}\n                                                                    value={element.formField2 || \"\"}\n                                                                    onChange={(e) => handleChangeFormField2(index, e)}\n                                                                    required\n                                                                />\n                                                            </CCol>\n                                                        </div>\n\n                                                </div>\n                                            </CFormGroup>\n                                        </CCol>\n\n                                    </CFormGroup>\n                                    </div>\n                                </div>\n                            ))\n                            }\n                                <CCol sm={12} md={6}>\n                                <div className=\"button-section\">\n                                <button\n                                className=\"button add\"\n                                type=\"button\"\n                                onClick={() => addFormFields()}\n                                >\n                                Add\n                                </button>\n                               {/* <button className=\"button submit\" onClick={handleSubmitTest}>\n                                Submit\n                                </button>*/}\n                                </div>\n                                </CCol>\n                    </CCardBody>\n\n                </CCard>\n\n\n                <CRow xs=\"4\">\n\n            <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n              <CButton block variant=\"outline\" color=\"info\" id=\"workflowSave\" onClick={handleSubmit}><Save/> Enregister</CButton>\n            </CCol>\n            <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n              <CButton block variant=\"outline\" color=\"danger\"\n                       onClick={()=> props.history.push(\"/admin/workflowMaster/list\")}\n              ><Cancel />\n                                                                                                        Annuler</CButton>\n            </CCol>\n\n            </CRow>\n            </CForm>\n          </CCardBody>\n        </CCard>\n\n      </CCol>\n    </>\n  )\n}\nexport default withStyles({ ...useStyles}, { withTheme: true })(CreateWorkflowMaster) ;\n\n"],"sourceRoot":""}