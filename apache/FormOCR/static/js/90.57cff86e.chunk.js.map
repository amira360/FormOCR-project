{"version":3,"sources":["views/Administration/processDependenciesMatrix/CreateDependencyMatrix.js","../node_modules/@material-ui/icons/esm/Save.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","withStyles","withTheme","props","toast","useRef","React","useState","setWorkflow","JSON","parse","localStorage","getItem","domainId","setUserRoles","dependency","setDependency","dependencyName","setDependencyName","processId","dependOn","formValues","setFormValues","domainName","useEffect","get_header","method","headers","fetch","USER_SERVICE","then","response","json","data","console","log","rolesFromApi","map","role","push","value","roleName","label","id","roleId","catch","error","workflow_data","body","stringify","WORKFLOW_SERVICE","Promise","resolve","reject","text","length","err","workflowsApi","item","name","version","ref","xs","sm","noValidate","row","className","md","htmlFor","disabled","onChange","e","target","color","element","index","style","width","borderBottom","i","newFormValues","handleChangeSelectProcess","options","required","isClearable","handleChangeSelectDependency","isMulti","paddingTop","paddingRight","onClick","event","preventDefault","splice","removeFormFields","icon","type","col","xl","block","variant","dependency_data","dependencies","DEPENDENCY_SERVICE","history","createSvgIcon","d"],"mappings":"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","file":"static/js/90.57cff86e.chunk.js","sourcesContent":["\nimport React, {useEffect, useRef} from 'react';\nimport { Toast } from 'primereact/toast';\nimport {Checkbox} from 'primereact/checkbox';\n\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CFormGroup,\n    CInput, CSelect,\n    CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback, CInputCheckbox\n} from '@coreui/react'\nimport { Button } from 'primereact/button';\n\nimport {DEPENDENCY_SERVICE, USER_SERVICE, WORKFLOW_SERVICE, WORKFLOW_MASTER_SERVICE, FORM_SERVICE} from \"../../../constants\";\nimport \"./css/styles.css\";\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport \"primeicons/primeicons.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport \"primereact/resources/primereact.css\";\nimport \"primeflex/primeflex.css\";\n\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from 'react-select';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Input from \"@material-ui/core/Input\";\nimport { Panel } from 'primereact/panel';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        marginLeft: 0+'px !important',\n        minWidth: 220,\n        maxWidth: 300,\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n    noLabel: {\n        marginTop: theme.spacing(3),\n    },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst CreateDependencyMatrix = (props) => {\n    const toast = useRef(null);\n    const [collapsed, setCollapsed] = React.useState(true)\n    const [showElements, setShowElements] = React.useState(true)\n    const [workflowMasterName, setWorkflowMasterName] = React.useState('');\n    const [alert, setAlert] = React.useState('');\n    const [workflowMasterCode, setWorkflowMasterCode] = React.useState('');\n    const [display, setDisplay] = React.useState('');\n    const [workflow, setWorkflow] = React.useState([]);\n    const [selectedWorkflow, setSelectedWorkflow] = React.useState(null);\n    const [type, setType] = React.useState('workflow');\n    const [formCodeState, setFormCodeState] = React.useState('');\n    const [form, setForm] = React.useState('');\n    const [domainId, setDomainId] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainId);\n    const [rolesAdmin, setRolesAdmin] = React.useState([]);\n    const [roles, setRoles] = React.useState([]);\n    const [userRoles, setUserRoles] = React.useState([]);\n    const [formsList, setFormsList] = React.useState([]);\n    const [fieldsList, setFieldsList] = React.useState([]);\n    const [selectedForm, setSelectedForm] = React.useState('');\n    const [selectedField, setSelectedField] = React.useState('');\n    const [processAccessRoles, setProcessAccessRoles] = React.useState([]);\n    const [xml, setXml] = React.useState([]);\n\n    const [businessObject, setBusinessObject] = React.useState(null);\n    const classes = useStyles();\n    const [modeler, setModeler] = React.useState(null);\n    const [activeIndex, setActiveIndex] = React.useState(null);\n    const [username, setUsername] = React.useState(localStorage.getItem('username'));\n    const [disableAddNewButton, setDisableAddNewButton] = React.useState('');\n    const [source, setSource] = React.useState('');\n    const [Indicator, setIndicator] = React.useState('');\n    const [forms, setForms] = React.useState([]);\n\n    const [operator1, setOperator1] = React.useState('');\n    const [workflowMasterCodeState, setWorkflowMasterCodeState] = React.useState('');\n    const [workflowMasterCodeError, setWorkflowMasterCodeError] = React.useState('');\n    const [workflowState, setWorkflowState] = React.useState('');\n    const [workflowError, setWorkflowError] = React.useState('');\n    const [workflowValid, setWorkflowValid] = React.useState('');\n    const [dependency, setDependency] = React.useState('');\n    const [selectedDependency, setSelectedDependency] = React.useState([]);\n    const [dependencyName, setDependencyName] = React.useState('');\n    const [formFields, setFormFields] = React.useState([]);\n    const [percentage, setPercentage] = React.useState(false);\n    const [formValues, setFormValues] = React.useState([{ processId: \"\", dependOn: [] }]);\n    const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\n\n    useEffect(()=> {\n        const get_header = {\n            method: 'GET',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n            }\n        };\n        fetch(USER_SERVICE + \"/api/auth/role/getRoles\", get_header)\n            .then((response) => {\n                return response.json();\n            })\n            .then(data => {\n                console.log(data);\n                var rolesFromApi = [];\n\n                data.map(role => {\n                    rolesFromApi.push({\n                        value : role.roleName,\n                        label : role.roleName,\n                        id: role.roleId\n                    })})\n                setUserRoles(rolesFromApi);\n\n            }).catch(error => {\n            console.log(error);\n        });\n\n        const workflow_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({domainId: domainId})\n        };\n        fetch(WORKFLOW_SERVICE + '/api/workflow/getAll',workflow_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                console.log(data);\n                var workflowsApi = [];\n                data.map(item => {\n                    workflowsApi.push({\n                        value : item.id,\n                        label : item.name+\"-\"+item.version\n                    })})\n                setWorkflow(workflowsApi);\n                setDependency(workflowsApi);\n            });\n        /* var model = new Modeler({\n           container: '#bpmnview',\n           propertiesPanel: {\n             parent: '#propview'\n           },\n           additionalModules: [\n             propertiesPanelModule,\n             propertiesProviderModule\n           ],\n           moddleExtensions: {\n             camunda: camundaModdleDescriptor\n           }\n\n         })*/\n\n        /* model.importXML(emptyBpmn, (error) => {\n           if (error) {\n             return console.log('fail import xml');\n           }\n           var  canvas = null;\n           canvas = model.get('canvas') ;\n           canvas.zoom('fit-viewport');\n          setBusinessObject(canvas._rootElement.businessObject);\n          setModeler(model)\n           // const data = canvas._rootElement.businessObject;\n           // console.log(data);\n         });*/\n    },[]);\n\n    let handleChange = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][e.target.name] = e.target.value;\n        setFormValues(newFormValues);\n    };\n\n    let handleChangeSelectDependency = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"dependOn\"] = e;\n        setFormValues(newFormValues);\n    };\n    let handleChangeSelectProcess = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"processId\"] = e.value;\n        setFormValues(newFormValues);\n\n    };\n\n    let addFormFields = () => {\n        setFormValues([...formValues,{ processId: \"\", dependOn: [] }]);\n    };\n\n    let removeFormFields = (event, i) => {\n        event.preventDefault();\n        let newFormValues = [...formValues];\n        newFormValues.splice(i, 1);\n        setFormValues(newFormValues);\n    };\n\n    let handleSubmitTest = (event) => {\n        event.preventDefault();\n        toast.current.show({severity:'success', summary: 'Success Message', detail:JSON.stringify(formValues), life: 3000});\n\n        // alert(JSON.stringify(formValues));\n    };\n\n    const handleSubmit =(event ) => {\n        event.preventDefault();\n\n            const dependency_data = {\n                method: 'POST',\n                headers: {\n                    \"X-Tenant\": domainName,\n                    'Content-Type': 'application/json',\n                    \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n                body: JSON.stringify({name: dependencyName, dependencies: formValues})\n                };\n\n            fetch(DEPENDENCY_SERVICE + '/api/auth/create', dependency_data)\n                .then(response => {\n                    return new Promise((resolve, reject) => {\n                        response.text().then(body => {\n                            resolve(\n                                body.length ? JSON.parse(body) : null\n                            );\n                        }).catch(err => {\n                            reject(err);\n                        });\n                    });\n                })\n                .then(data => {\n\n                    props.history.push(\"/admin/dependencies/list\");\n\n                })\n\n    }\n\n\n\n\n    const hideAlert = () => {\n        setAlert(null)\n    };\n\n    const verifyLength = (value, length) => {\n        if (value.length >= length) {\n            return true;\n        }\n        return false;\n    };\n    const basicAlert = () =>{\n        /* this.setState({alert:\n             <SweetAlert\n               style={{ display: \"block\", marginTop: \"-100px\" }}\n               title=\"the form code is already used !\"\n               onConfirm={() => this.hideAlert()}\n               onCancel={() => this.hideAlert()}\n             />\n         })*/\n    };\n\n    const handleDelete = (chipToDelete) =>{\n        console.log(chipToDelete);\n        console.log(roles);\n        console.log(roles.filter((chip) => chip !== chipToDelete))\n        const data = roles.filter((chip) => chip !== chipToDelete);\n        setRoles(data);\n    };\n\n    let icon;\n\n    return (\n        <>\n            <Toast ref={toast} />\n            <CCol xs=\"12\" sm=\"12\">\n                <CCard>\n                    <CCardHeader>\n                        <h2>Créer une matrice de dépendance</h2>\n                    </CCardHeader>\n                    <CCardBody>\n                        <CForm  noValidate >\n                            <CFormGroup row className=\"my-0\">\n                                <CCol sm={12} md={6}>\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"dependencyId\">S No</CLabel>\n                                        <CInput id=\"dependencyId\" /*onChange={e => setWorkflowId(e.target.value) }\n                            value={workflowId}*/ disabled />\n                                    </CFormGroup>\n                                </CCol>\n\n                                <CCol sm={12} md={6}>\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"dependencyName\"> Nom </CLabel>\n                                        <CInput id=\"dependencyName\" onChange={e => setDependencyName(e.target.value) }\n                                                value={dependencyName}  />\n                                    </CFormGroup>\n                                </CCol>\n                            </CFormGroup>\n                            <CCard>\n                                <CCardHeader color=\"light\" >\n                                    Dépendance\n                                </CCardHeader>\n                                <CCardBody>\n                                    {formValues.map((element, index) => (\n                                        <div  key={index} style={{marginTop:\"10px\"}}>\n                                            <div  style={{ width: \"100%\", borderBottom: \"1px solid lightGray\"}}>\n                                                <CFormGroup row className=\"my-0\">\n\n                                                    <CCol sm={12} md={5}>\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"processus\">Processus</CLabel>\n                                                            <Select\n                                                                name=\"processus\" value={element.processId}\n                                                                onChange={(e) => handleChangeSelectProcess(index, e)}\n                                                                options={dependency}\n                                                                required\n                                                                isClearable={true}\n                                                            />\n                                                        </CFormGroup>\n                                                    </CCol>\n\n                                                    <CCol sm={12} md={5}>\n                                                    <CFormGroup>\n                                                        <CLabel htmlFor=\"Source\">Dépend de</CLabel>\n                                                        <Select\n                                                             name=\"source\" value={element.dependOn}\n                                                            onChange={(e) => handleChangeSelectDependency(index, e)}\n                                                            options={dependency}\n                                                            required\n                                                            isClearable={true}\n                                                            isMulti\n                                                        />\n                                                    </CFormGroup>\n                                                </CCol>\n                                                    <CCol sm={12} md={1} style={{paddingTop:\"30px\", paddingRight:\"10px\"}}\n                                                    >\n                                                        {index ? (\n                                                            <CCol sm={12} md={12}>\n                                                                <Button  onClick={(e) => removeFormFields(e, index)} icon=\"pi pi-trash\" className=\"p-button-rounded p-button-danger\" />\n                                                            </CCol>\n                                                        ) : null}\n                                                    </CCol>\n                                                </CFormGroup>\n\n                                            </div>\n                                        </div>\n                                    ))\n                                    }\n                                    <CCol sm={12} md={6}>\n                                        <div className=\"button-section\">\n                                            <button\n                                                className=\"button add\"\n                                                type=\"button\"\n                                                onClick={() => addFormFields()}\n                                            >\n                                                Add\n                                            </button>\n                                            {/* <button className=\"button submit\" onClick={handleSubmitTest}>\n                                Submit\n                                </button>*/}\n                                        </div>\n                                    </CCol>\n                                </CCardBody>\n                            </CCard>\n                            {/* Card of the KPI*/}\n                            <CRow xs=\"4\">\n\n                                <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                                    <CButton block variant=\"outline\" color=\"info\" id=\"workflowSave\" onClick={handleSubmit}><Save/> Enregister</CButton>\n                                </CCol>\n                                <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                                    <CButton block variant=\"outline\" color=\"danger\"\n                                             onClick={()=> props.history.push(\"/admin/dependency/list\")}\n                                    ><Cancel />\n                                        Annuler</CButton>\n                                </CCol>\n\n                            </CRow>\n                        </CForm>\n                    </CCardBody>\n                </CCard>\n\n            </CCol>\n        </>\n    )\n}\nexport default withStyles({ ...useStyles}, { withTheme: true })(CreateDependencyMatrix) ;\n\n","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');"],"sourceRoot":""}