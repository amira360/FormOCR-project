{"version":3,"sources":["views/Masters/View.js"],"names":["makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","MasterView","props","React","useState","form","setForm","formDataInit","setFormDataInit","formData","setFormData","setFormFields","JSON","parse","localStorage","getItem","domainName","masterName","setMasterName","useEffect","masterId","match","params","masterInstanceId","form_data","method","headers","body","stringify","id","fetch","MASTER_SERVICE","then","response","Promise","resolve","reject","text","length","catch","err","data","json","master","master_instance_data","console","log","columns","fields_data","master_name","fieldList","map","col","push","field","index","Number","error","className","submission","options","readOnly","onChange","e","fields","new_data","keys","Object","savedFields","val","key","filter","toUpperCase","onSubmit","masterData","history"],"mappings":"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","file":"static/js/111.83a76f30.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CFormGroup,\n    CInput, CSelect,\n    CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { DocsLink } from 'src/reusable'\nimport { Link } from 'react-router-dom'\nimport {FormBuilder} from 'react-formio';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport {Form} from 'react-formio';\nimport {SERVER_URL, MASTER_SERVICE} from './../../constants';\n\nimport 'formiojs/dist/formio.full.min';\nimport 'formiojs/dist/formio.full.min.css';\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Input from \"@material-ui/core/Input\";\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        marginLeft: 0+'px !important',\n        minWidth: 220,\n        maxWidth: 300,\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n    noLabel: {\n        marginTop: theme.spacing(3),\n    },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst MasterView = (props) => {\n\n    const [form, setForm] = React.useState({});\n    const [masterData, setMasterData] = React.useState({});\n    const [formName, setFormName] = React.useState({});\n    const [formDataInit, setFormDataInit] = React.useState({});\n    const [formData, setFormData] = React.useState({});\n    const [formFields, setFormFields] = React.useState([]);\n    const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n    const [masterName, setMasterName] = React.useState(\"\");\n\n    useEffect(()=> {\n\n        const { masterId } = props.match.params;\n        const { masterInstanceId } = props.match.params;\n        const form_data = {\n            method: 'POST',\n\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n            },\n            body: JSON.stringify({id : masterId})\n        };\n        fetch(MASTER_SERVICE + '/api/master/getByMasterId',form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n\n                //  setComponents(JSON.parse(data.form_json).components)\n                setForm(JSON.parse(data.json))\n                setFormFields(JSON.parse(data.master))\n                // this.props.history.push(\"/admin/formView\");\n                const master_instance_data = {\n                    method: 'POST',\n\n                    headers: {\n                        \"X-Tenant\": domainName,\n                        'Content-Type': 'application/json',\n                        \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n                    },\n                    body: JSON.stringify({masterId : masterId, masterInstanceId: masterInstanceId})\n                };\n                fetch(MASTER_SERVICE + '/api/master/getMasterInstance',master_instance_data)\n                    .then(response => {\n                        return new Promise((resolve, reject) => {\n                            response.text().then(body => {\n                                resolve(\n                                    body.length ? JSON.parse(body) : null\n                                );\n                            }).catch(err => {\n                                reject(err);\n                            });\n                        });\n                    })\n                    .then(data => {\n                        console.log(data)\n                        var columns = data.columns\n                        var fields_data = data.data\n                        var master_name = data.masterName\n                        setMasterName(master_name)\n                        var fieldList = []\n                        columns.map(col =>{\n                            if(col[3] !== \"submit\" && col[3] !== \"soumettre\" ){\n                                fieldList.push(col[3])\n                            }\n                        })\n                        //setFormFields(fieldList)\n                        var form_data = {}\n                        console.log(fieldList)\n                        console.log(fields_data)\n                        fieldList.map((field, index) => {\n                            if( Number(fields_data[0][index])){\n                                form_data.[field] = Number(fields_data[0][index])\n                            }else{\n                                form_data.[field] = fields_data[0][index]\n                            }\n\n                        })\n                        console.log(form_data)\n                        setFormData(form_data);\n                        setFormDataInit(form_data);\n\n                        //  setComponents(JSON.parse(data.form_json).components)\n                     /*   setForm(JSON.parse(data.json))\n                        setFormData(JSON.parse(data.master));*/\n                        // this.props.history.push(\"/admin/formView\");\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    })\n            })\n            .catch(error => {\n                console.log(error);\n            })},[])\n\n    const submit = data =>{\n        const { masterId } = props.match.params;\n        console.log(data)\n        const form_data = {\n            method: 'POST',\n\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n            },\n            body: JSON.stringify({masterId : masterId, masterData: data.data})\n        };\n\n        fetch(MASTER_SERVICE + '/api/master/saveData',form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n        props.history.push(\"/master/list/\"+masterId);\n    }\n    return (\n        <div>\n            <CCard>\n                <CCardHeader>\n                    <div className=\"m-subheader\">\n                        <div className=\"d-flex align-items-center\">\n                            <div className=\"mr-auto col-xs-6 \"><h4\n                                className=\"m-subheader__title m-subheader__title--separator\"><span className=\"ng-tns-c2-0\">Aperçu - {masterName}  </span>\n                            </h4></div>\n                        </div>\n                    </div>\n                </CCardHeader>\n                <CCardBody>\n                    <Form form={form} submission={{data: formData}} \n\n                          options={{\n                              readOnly: true\n                          }}\n                          onChange={e=>\n                          {\n                              var fields = e.data\n                              var new_data = {}\n                              var keys = Object.keys(fields)\n                              var form_data = formDataInit\n                              var savedFields = Object.keys(form_data)\n                              keys.map(val =>{\n                                  var  key = savedFields.filter(key => val.toUpperCase()=== key.toUpperCase() )\n                                  if( key ){\n                                      new_data.[val] = form_data.[key]\n                                  }\n\n                              })\n                              setFormData(new_data)\n                          }}\n                         onSubmit={submit}  />\n                </CCardBody>\n            </CCard>\n        </div>\n    )\n\n}\nexport default MasterView"],"sourceRoot":""}