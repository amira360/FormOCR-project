{"version":3,"sources":["components/dashboard/WidgetEdit.js","views/Administration/dashboard/Edit.js"],"names":["useStyles","makeStyles","root","width","height","display","flexDirection","header","alignItems","padding","spacer","flexGrow","body","StyledRoot","styled","div","StyledContent","StyledMyChart","StyledLine","StyledColumn","StyledPie","StyledBar","StyledSpline","StyledVariwide","WidgetEdit","chart","id","type","title","onRemoveItem","workflowMaster","component","kpi","useState","chartData","setChartData","JSON","parse","localStorage","getItem","domainName","classes","useEffect","undefined","performance","worklow_master_id","value","performance_indicator_data","method","headers","stringify","workflowMasterId","kpiId","fetch","INDICATOR_SERVICE","then","response","Promise","resolve","reject","text","length","catch","err","data","console","log","tab","map","val","push","y","name","Date","x","getMonth","getFullYear","Line","workflowMasterName","label","Bar","Spline","Column","Pie","Card","className","style","backgroundColor","Typography","variant","gutterBottom","IconButton","aria-label","onClick","fontSize","ReactGridLayout","WidthProvider","RGL","EditDashboard","props","menu","React","createRef","onLayoutChange","bind","selectWorklfowMaster","handleFormSubmit","state","visibleDashboard","orders","layout","items","initialLoad","newCounter","titles","performanceIndicators","selectedPerformanceIndicator","chartTypes","dashboardName","dashboardId","match","params","roles","grid","admin","selectedUsers","users","userRoles","selectedType","workflowMasters","selectedWorkflowMaster","selectedTypes","selectedWorkflowMasters","selectedPerformanceIndicators","domainId","position","dashboard_data","this","access_role_data","admin_access_data","user_access_data","DASHBOARD_SERVICE","dashboard","setState","grid_items","dashboardGridItems","access_role","admin_access","user_access","titles_list","selected_types","selected_workflow_masters","selected_performance_indicators","layout_list","items_list","obj","sort","a","b","elem","chartType","performanceIndicatorId","performanceIndicatorName","w","i","h","static","staticLayout","xLayout","yLayout","wLayout","iLayout","hLayout","worklfow_master_data","WORKFLOW_MASTER_SERVICE","worklfowMasters","USER_SERVICE","json","rolesFromApi","role","roleName","roles_data","selected_role","filter","roleId","admin_data","selected_admin","error","userId","firstName","lastName","user_data","selected_user","onAddItem","onBreakpointChange","icon","command","onSubmit","autoFocus","onHide","el","key","selected","order","data-grid","concat","cols","Infinity","breakpoint","_","saveToLS","e","indicator","event","layouts_data","gridItems","controlAccessRoles","controlAccessAdmin","controlAccessUsers","dashboard_request_data","history","isVisibleDashboard","xs","sm","noValidate","row","md","htmlFor","onChange","target","placeholder","options","isMulti","model","popup","ref","paddingLeft","size","toggle","aria-controls","aria-haspopup","createElement","visible","displayMaximizable","maximizable","modal","footer","renderFooter","col","xl","block","color","Save","Cancel","PureComponent","setItem","defaultProps","process","STATIC_EXAMPLES","fn","default"],"mappings":"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","file":"static/js/98.38046f0a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CardHeader } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport MyChart, { StyledMyChart } from \"./Chart\";\nimport \"./styles.css\";\nimport Variwide, { StyledVariwide }  from \"./VariwideSeries\";\nimport Bar, { StyledBar }  from \"./Bar\";\nimport Line, { StyledLine }  from \"./Line\";\nimport Spline, { StyledSpline }  from \"./Spline\";\nimport Pie , { StyledPie } from \"./Pie\";\nimport Column , { StyledColumn } from \"./Column\";\nimport {INDICATOR_SERVICE} from \"../../constants\";\nconst useStyles = makeStyles({\n    root: {\n        width: \"100%\",\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\"\n    },\n    header: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: \"0.5rem\"\n    },\n    spacer: {\n        flexGrow: 1\n    },\n    body: {\n        padding: \"0.5rem\",\n        flexGrow: 1\n    }\n});\n\nconst widgetNames = {\n    n0: \"Line Chart\",\n    n1: \"Area Chart\",\n    n3: \"Bar Chart\",\n    n4: \"Scatter Chart\"\n};\n\nconst StyledRoot = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledContent = styled.div`\n  flex: 1 1 0;\n  display: flex;\n  flex-direction: column;\n\n  .text-container {\n    min-height: 50px;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: solid 2px black;\n    .text {\n      font-size: 30px;\n    }\n  }\n\n  ${StyledMyChart} {\n    flex: 1;\n  }\n   ${StyledLine} {\n      flex: 1;\n    }\n     ${StyledColumn} {\n        flex: 1;\n      }\n       ${StyledPie} {\n          flex: 1;\n        }\n         ${StyledBar} {\n            flex: 1;\n          }\n           ${StyledSpline} {\n              flex: 1;\n            }\n             ${StyledVariwide} {\n                flex: 1;\n              }\n`;\n\n\nexport default function WidgetEdit({ id, type, title, onRemoveItem, component: Item, workflowMaster, kpi }) {\n    const [slider, setSlider] = useState(300);\n    const [height, setHeight] = useState(200);\n    const [chartData, setChartData] = useState([]);\n    const [domainName, setDomainName] = useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\n    const classes = useStyles();\n    let chart;\n    useEffect(() =>{\n        if(kpi !== null && kpi !== undefined ){\n\n\n            var performance = \"\"\n            var worklow_master_id = \"\"\n            if(typeof(kpi) === \"string\"){\n                performance = kpi\n            }else{\n                performance = kpi.value\n            }\n            if(typeof(workflowMaster) === \"string\"){\n                worklow_master_id = workflowMaster\n            }else{\n                worklow_master_id = workflowMaster.value\n            }\n\n            const performance_indicator_data = {\n                method: 'POST',\n                headers: {\n                    \"X-Tenant\": domainName,\n                    'Content-Type': 'application/json',\n                    \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n                body: JSON.stringify({workflowMasterId : worklow_master_id, domainName: domainName, kpiId : performance})\n            };\n            fetch(INDICATOR_SERVICE + '/api/indicator/getById', performance_indicator_data)\n                .then(response => {\n                    return new Promise((resolve, reject) => {\n                        response.text().then(body => {\n                            resolve(\n                                body.length ? JSON.parse(body) : null\n                            );\n                        }).catch(err => {\n                            reject(err);\n                        });\n                    });\n                })\n                .then(data => {\n                    console.log(data)\n                    var tab = []\n                    // const categories = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\n                    data.map(val =>{\n                        tab.push({data: [val.y], name: (new Date(val.x).getMonth()+1)+\"-\"+new Date(val.x).getFullYear()})\n                    })\n                    setChartData(tab)\n                    /* var tab = []\n                     data.map(elem =>{\n                         tab.push({value: elem.id, label: elem.name})\n                     })\n                     this.setState({worklfowMasters: tab})*/\n                })\n        }\n\n    },[])\n    if (type ===\"Line\") {\n        chart = <Line data={chartData} workflowMasterName={workflowMaster.label}/>;\n    } else if (type ===\"Bar\"){\n        chart = <Bar data={chartData} workflowMasterName={workflowMaster.label} />;\n    }\n    else if (type ===\"Spline\"){\n        chart = <Spline  data={chartData} workflowMasterName={workflowMaster.label}/>;\n    }\n    else if (type ===\"Column\"){\n        chart = <Column data={chartData} workflowMasterName={workflowMaster.label}/>;\n    }\n    else if (type ===\"Pie\"){\n        chart = <Pie data={chartData} workflowMasterName={workflowMaster.label}/>;\n    }\n    else if (type ===\"Variwide\"){\n        chart = <Variwide data={chartData} workflowMasterName={workflowMaster.label} />;\n    }\n    return (\n        <Card className={classes.root} key={id} >\n            <div\n                className={classes.header}\n                style={{ backgroundColor: \"#E4E6E8\", height: \"40px\" }}\n            >\n                <Typography variant=\"h6\" gutterBottom>\n                    {title}\n                </Typography>\n                <div className={classes.spacer} />\n                <IconButton aria-label=\"delete\" onClick={() => onRemoveItem(id)}>\n                    <CloseIcon fontSize=\"small\" />\n                </IconButton>\n            </div>\n            <div className={classes.body}>\n                <StyledRoot>\n                    <StyledContent height={height}>\n                        {chart}\n                    </StyledContent>\n                </StyledRoot>\n            </div>\n        </Card>\n    );\n}\n","import React , {useRef} from \"react\";\nimport RGL ,{ WidthProvider, Responsive } from \"react-grid-layout\";\nimport _ from \"lodash\";\nimport WidgetEdit from \"./../../../components/dashboard/WidgetEdit\";\nimport LineChart from \"./../../../components/dashboard/Chart\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport \"./css/styles.css\";\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\n\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport Select from 'react-select';\nimport { Menu } from 'primereact/menu';\nimport {Link} from \"react-router-dom\";\nimport 'primeicons/primeicons.css';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.css';\nimport 'primeflex/primeflex.css';\nimport {\n  CLink,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CInput,\n  CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback,\n} from '@coreui/react'\nimport {DASHBOARD_SERVICE, USER_SERVICE, INDICATOR_SERVICE, WORKFLOW_MASTER_SERVICE} from '../../../constants';\n\n// const ResponsiveReactGridLayout = WidthProvider(Responsive);\nconst ReactGridLayout = WidthProvider(RGL);\n\n/**\n * This layout demonstrates how to use a grid with a dynamic number of elements.\n */\n\n\n\nexport default class EditDashboard extends React.PureComponent {\n  /* static defaultProps = {\n     className: \"layout\",\n     cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n     rowHeight: 200\n   };*/\n  /*  static defaultProps = {\n        className: \"layout\",\n        cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n        rowHeight: 200,\n        onLayoutChange: function() {}\n    }*/\n\n  static defaultProps = {\n    className: \"layout\",\n    // cols: 12,\n    // rowHeight: 200,\n    onLayoutChange: function() {}\n  };\n  constructor(props) {\n    super(props);\n    this.menu = React.createRef();\n    this.onLayoutChange = this.onLayoutChange.bind(this);\n    this.selectWorklfowMaster = this.selectWorklfowMaster.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    // this.loadElement = this.loadElement.bind(this);\n    this.state =\n        {\n          visibleDashboard: false,\n          orders: [],\n          layout: [],\n          items: [],\n          // items:[],\n          initialLoad: true,\n          newCounter: 0,\n          // newCounter: 0,\n          workflowMaster: '',\n          titles: [],\n          // titles:[],\n          title: \"\",\n          performanceIndicators: [],\n          selectedPerformanceIndicator: {},\n          chartTypes: [{value: \"Line\", label: \"Ligne\"}, {value: \"Bar\", label: \"Bar\"}, {\n            value: \"Variwide\",\n            label: \"Varié\"\n          }, {value: \"Column\", label: \"Colonne\"}, {value: \"Spline\", label: \"Spline\"}, {value: \"Pie\", label: \"Pie\"}],\n          dashboardName: '',\n          dashboardId: props.match.params.dashboardId,\n          roles: [],\n          grid: [],\n          admin: [],\n          selectedUsers: [],\n          users: [],\n          userRoles: [],\n          selectedType: \"\",\n          workflowMasters: [],\n          selectedWorkflowMaster: {},\n          selectedTypes: [],\n          selectedWorkflowMasters: [],\n          selectedPerformanceIndicators: [],\n          domainId: JSON.parse(localStorage.getItem('domain_data')).domainId,\n          domainName: JSON.parse(localStorage.getItem('domain_data')).domainName,\n          // selectedTypes:[],\n          position: 'center'\n        };\n\n\n\n  }\n  async componentDidMount(){\n\n    const domainId = JSON.parse(localStorage.getItem('domain_data')).domainId\n    const domainName = JSON.parse(localStorage.getItem('domain_data')).domainName\n\n    const dashboard_data = {\n      method: 'POST',\n      headers: {\"X-Tenant\": domainName,\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n      body: JSON.stringify({dashboardId : this.state.dashboardId})\n    };\n    var access_role_data = []\n    var admin_access_data = []\n    var user_access_data = []\n    await fetch(DASHBOARD_SERVICE + '/api/dashboard/getById', dashboard_data)\n        .then(response => {\n          return new Promise((resolve, reject) => {\n            response.text().then(body => {\n              resolve(\n                  body.length ? JSON.parse(body) : null\n              );\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        })\n        .then(data => {\n          const dashboard_data = JSON.parse(data.dashboard)\n          console.log(dashboard_data)\n          this.setState({dashboardName: dashboard_data.name})\n\n          const grid_items = dashboard_data.dashboardGridItems\n\n          access_role_data = JSON.parse(data.access_role)\n          admin_access_data = JSON.parse(data.admin_access)\n          user_access_data = JSON.parse(data.user_access)\n          console.log(access_role_data)\n          console.log(admin_access_data)\n          console.log(user_access_data)\n         // const grid_items = dashboard_data.dashboardGridItems;\n          var titles_list = []\n          var selected_types = []\n          var selected_workflow_masters = []\n          var selected_performance_indicators = []\n          var layout_list = []\n          var items_list = []\n          var obj = [...grid_items];\n          obj.sort((a,b) => a.orders - b.orders);\n\n          var orders = []\n          this.setState({ grid: obj });\n          obj.map(elem =>{\n            orders.push(elem.orders)\n            titles_list.push(elem.title)\n            selected_types.push({label: elem.chartType, value: elem.chartType})\n            selected_workflow_masters.push({label: elem.workflowMasterName, value: elem.workflowMasterId })\n            selected_performance_indicators.push({value: elem.performanceIndicatorId, label: elem.performanceIndicatorName })\n            items_list.push({x: elem.x, y: elem.y, w: elem.w, i: elem.i, h: elem.h })\n            layout_list.push({static: elem.staticLayout, x: elem.xLayout, y: elem.yLayout, w: elem.wLayout, i: elem.iLayout, h: elem.hLayout })\n          })\n          this.setState({orders: orders})\n          this.setState({ layout: layout_list });\n          this.setState({ titles :  [...titles_list] });\n          this.setState({ selectedTypes: [...selected_types]});\n          this.setState({ selectedWorkflowMasters:  [...selected_workflow_masters]} );\n          this.setState({ selectedPerformanceIndicators: [...selected_performance_indicators]});\n          this.setState({ newCounter: this.state.newCounter});\n          this.setState({ items: items_list });\n\n          this.setState({visibleDashboard: true})\n          const worklfow_master_data = {\n            method: 'POST',\n            headers: {\"X-Tenant\": domainName,\n              'Content-Type': 'application/json',\n              \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({domainId : domainId})\n          };\n          fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getAll', worklfow_master_data)\n              .then(response => {\n                return new Promise((resolve, reject) => {\n                  response.text().then(body => {\n                    resolve(\n                        body.length ? JSON.parse(body) : null\n                    );\n                  }).catch(err => {\n                    reject(err);\n                  });\n                });\n              })\n              .then(data => {\n                console.log(data)\n                var tab = []\n                data.map(elem =>{\n                  tab.push({value: elem.id, label: elem.name})\n                })\n                this.setState({worklfowMasters: tab})\n              })\n\n          /************************************* get all roles from DB *******************************/\n          fetch(USER_SERVICE + \"/api/auth/role/getRoles\")\n              .then((response) => {\n                return response.json();\n              })\n              .then(data => {\n                var rolesFromApi = [];\n                data.map(role => {\n                  rolesFromApi.push({\n                    value : role.roleName,\n                    label : role.roleName\n                  })})\n                var roles_data = []\n                access_role_data.map(val =>{\n                  var selected_role = data.filter(elem =>{\n                    return elem.roleId === val.roleId\n                  })\n                  roles_data.push({\n                    value : selected_role[0].roleName,\n                    label : selected_role[0].roleName\n                  })\n                })\n                this.setState({roles: roles_data})\n\n                var admin_data = []\n                admin_access_data.map(val =>{\n                  var selected_admin = data.filter(elem =>{\n                    return elem.roleId === val.roleId\n                  })\n                  admin_data.push({\n                    value : selected_admin[0].roleName,\n                    label : selected_admin[0].roleName\n                  })\n                })\n                this.setState({admin: admin_data})\n\n                this.setState({userRoles: rolesFromApi});\n              }).catch(error => {\n            console.log(error);\n          });\n\n         /* saveToLS(\"items\", layout_list);\n          saveToLS(\"dashboardName\", dashboard_data.name);\n\n          saveToLS(\"dashboard_data\", dashboard_data);\n          saveToLS(\"titles\", [...titles_list]);\n          saveToLS(\"selectedTypes\",  [...selected_types]);\n          saveToLS(\"selectedWorkflowMasters\",  [...selected_workflow_masters]);\n          saveToLS(\"selectedPerformanceIndicators\",  [...selected_performance_indicators]);\n          saveToLS(\"newCounter\",  this.state.newCounter);\n          saveToLS(\"layoutViews\", layout_list);*/\n\n\n        })\n\n\n    /************************************* get all organization users from DB *****************/\n    /*const users_data = {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json', \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n        body: JSON.stringify({domainId : domainId})\n    };*/\n     fetch(USER_SERVICE + '/api/auth/user/getUsersByDomain/'+domainId)\n        .then(response => {\n          return new Promise((resolve, reject) => {\n            response.text().then(body => {\n              resolve(\n                  body.length ? JSON.parse(body) : null\n              );\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        })\n        .then(data => {\n          var tab = []\n          data.map(elem =>{\n            tab.push({value: elem.userId, label: elem.firstName + \" \" + elem.lastName})\n          })\n          var user_data = []\n          user_access_data?.map(val =>{\n            var selected_user = data.filter(elem =>{\n              return elem.userId === val.userId\n            })\n            user_data.push({\n              value : selected_user[0].userId,\n              label : selected_user[0].firstName + \" \" + selected_user[0].lastName\n            })\n          })\n          this.setState({selectedUsers: user_data})\n          this.setState({users: tab})\n        })\n    this.onClick = this.onClick.bind(this)\n    this.onAddItem = this.onAddItem.bind(this);\n    this.onBreakpointChange = this.onBreakpointChange.bind(this);\n    this.items = [\n      {\n        label: 'Ajouter un chart',\n        icon: 'pi pi-plus',\n//                command:  this.onAddItem\n        command:  () => {this.onClick('displayMaximizable')}\n\n      }\n    ];\n/*    console.log(this.state.items)\n    console.log(this.state.titles)\n    console.log(this.state.layout)\n    console.log(this.state.selectedTypes)\n    console.log(this.state.selectedWorkflowMasters)\n    console.log(this.state.selectedPerformanceIndicators)*/\n\n  }\n\n  onClick(name, position) {\n    let state = {\n      [`${name}`]: true\n    };\n\n    if (position) {\n      state = {\n        ...state,\n        position\n      }\n    }\n\n    this.setState(state);\n  }\n  onHide(name) {\n    console.log(this.state.selectedType)\n    // this.onAddItem();\n    this.setState({\n      [`${name}`]: false\n    });\n  }\n  onSubmit(name) {\n    console.log(this.state.selectedType)\n    this.onAddItem();\n    this.setState({\n      [`${name}`]: false\n    });\n  }\n  renderFooter(name) {\n    return (\n        <div>\n          <Button label=\"Soumettre\" icon=\"pi pi-check\" onClick={() => this.onSubmit(name )} autoFocus />\n\n          <Button label=\"Annuler\" icon=\"pi pi-times\" onClick={() => this.onHide(name)} className=\"p-button-text\" />\n        </div>\n    );\n  }\n\n\n  createElement(el, key) {\n    const removeStyle = {\n      position: \"absolute\",\n      right: \"2px\",\n      top: 0,\n      cursor: \"pointer\"\n    };\n /*   var titles_list = []\n    var selected_types = []\n    var selected_workflow_masters = []\n    var selected_performance_indicators = []\n    var layout_list = []\n    var items_list = []\n    const grid = this.state.grid*/\n    /*grid.map(elem =>{\n      titles_list.push(elem.title)\n      selected_types.push(elem.chartType)\n      selected_workflow_masters.push({label: elem.workflowMasterName, value: elem.workflowMasterId })\n      selected_performance_indicators.push({value: elem.performanceIndicatorId, label: elem.performanceIndicatorName })\n      items_list.push({x: elem.x, y: elem.y, w: elem.w, i: elem.i, h: elem.h })\n      layout_list.push({static: elem.staticLayout, x: elem.xLayout, y: elem.yLayout, w: elem.wLayout, i: elem.iLayout, h: elem.hLayout })\n    })\n\n    this.setState({ Layout: layout_list });\n    this.setState({ items: items_list });\n    this.setState({ titles :  [...titles_list] });\n    this.setState({ selectedTypes: [...selected_types]});\n    this.setState({ selectedWorkflowMasters:  [...selected_workflow_masters]} );\n    this.setState({ selectedPerformanceIndicators: [...selected_performance_indicators]});\n    this.setState({ newCounter: this.state.newCounter});*/\n\n    const i = el.i;\n    /* console.log(this.state.selectedTypes)\n     console.log( this.state.items)\n     console.log(this.state.layout)\n       console.log(i)\n       console.log( this.state.selectedWorkflowMasters)\n       console.log( this.state.selectedPerformanceIndicators)*/\n    var selected = ''\n\n    console.log(key)\n    console.log(this.state.orders)\n    const order = this.state.orders[key]\n    if(this.state.selectedTypes[order] !== undefined){\n      if(typeof(this.state.selectedTypes[order]) === \"string\" ){\n        selected = this.state.selectedTypes[order]\n      }else{\n        selected = this.state.selectedTypes[order].value\n      }\n      let title = this.state.titles[order];\n      let workflowMaster = this.state.selectedWorkflowMasters[order];\n      let kpi = this.state.selectedPerformanceIndicators[order];\n      if(kpi !== null) {\n        return (\n            <div key={order+\"\"} data-grid={el}>\n\n              <WidgetEdit\n                  id={order+\"\"}\n                  workflowMaster={workflowMaster}\n                  kpi={kpi}\n                  type={selected}\n                  title={title}\n                  onRemoveItem={(i) => {\n                    // console.log(\"removing\", i);\n                    this.onRemoveItem(i)\n                  }}\n                  // component={Widget}\n              />\n\n            </div>\n        );\n    }\n\n\n\n    }\n  }\n\n\n  onAddItem() {\n    /*eslint no-console: 0*/\n  //  console.log(\"adding\", \"n\" + this.state.newCounter);\n    this.setState({\n      // Add a new item. It must have a unique key!\n      items: this.state.items.concat({\n        i: ''+this.state.newCounter,\n        x: (this.state.items.length * 2) % (this.state.cols || 12),\n        y: Infinity, // puts it at the bottom\n        w: 2,\n        h: 2\n      }),\n      titles: [...this.state.titles, this.state.title],\n      selectedTypes:  [...this.state.selectedTypes,this.state.selectedType],\n      selectedWorkflowMasters:  [...this.state.selectedWorkflowMasters,this.state.selectedWorkflowMaster],\n      selectedPerformanceIndicators:  [...this.state.selectedPerformanceIndicators,this.state.selectedPerformanceIndicator],\n\n      // Increment the counter to ensure key is always unique.\n      newCounter: this.state.newCounter + 1\n    });\n\n  }\n\n  // We're using the cols coming back from this to calculate where to add new items.\n  onBreakpointChange(breakpoint, cols) {\n    this.setState({\n      breakpoint: breakpoint,\n      cols: cols\n    });\n  }\n\n\n  onRemoveItem(i) {\n    console.log(\"removing\", i);\n    this.setState({ items: _.reject(this.state.items, { i: i }) });\n  }\n\n  onLayoutChange(layout) {\n    console.log(layout)\n    const layouts_data = {\n      // Add a new item. It must have a unique key!\n      items: this.state.items,\n      layout: layout,\n      titles: [...this.state.titles],\n      selectedTypes:  [...this.state.selectedTypes],\n\n      // Increment the counter to ensure key is always unique.\n      newCounter: this.state.newCounter\n    }\n    /*eslint no-console: 0*/\n    // if(layout.length && layout){\n    saveToLS(\"items\", this.state.items);\n    saveToLS(\"titles\", [...this.state.titles]);\n    saveToLS(\"selectedTypes\",  [...this.state.selectedTypes]);\n    saveToLS(\"selectedWorkflowMasters\",  [...this.state.selectedWorkflowMasters]);\n    saveToLS(\"selectedPerformanceIndicators\",  [...this.state.selectedPerformanceIndicators]);\n    saveToLS(\"newCounter\",  this.state.newCounter);\n    saveToLS(\"layout\", layout);\n    this.setState({ layout });\n    //this.props.onLayoutChange(layout);\n    // }\n\n    // updates status display\n  }\n  selectWorklfowMaster  (e ) {\n    this.setState({selectedWorkflowMaster: e})\n    const performance_indicator_data = {\n      method: 'POST',\n      headers: {\n        \"X-Tenant\": this.state.domainName,\n        'Content-Type': 'application/json', \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n      body: JSON.stringify({workflowMasterId : e.value})\n    };\n    fetch(INDICATOR_SERVICE + '/api/indicator/getAll', performance_indicator_data)\n        .then(response => {\n          return new Promise((resolve, reject) => {\n            response.text().then(body => {\n              resolve(\n                  body.length ? JSON.parse(body) : null\n              );\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        })\n        .then(data => {\n          console.log(data)\n          var tab = []\n          data.map(elem =>{\n            tab.push({value: elem.id, label: elem.indicator})\n          })\n          this.setState({performanceIndicators: tab})\n        })\n  }\n\n\n  /**************************************************  submit dashboard ****************************************************/\n  handleFormSubmit (event )  {\n    \n    var layouts_data =[]\n    const layouts = this.state.layout\n    layouts.map(val => {\n      layouts_data.push({h: val.h, i: val.i, static: val.static, w: val.w, x: val.x, y: val.y})\n    })\n\n\n    const gridItems = {\n      titles:this.state.titles , selectedTypes: this.state.selectedTypes, selectedWorkflowMasters: this.state.selectedWorkflowMasters,\n      selectedPerformanceIndicators: this.state.selectedPerformanceIndicators, items: this.state.items,\n      layout: layouts_data,\n    }\n\n    const dashboard_data = {\n      dashboardId: this.state.dashboardId,\n      domainName: this.state.domainName,\n      dashboardName: this.state.dashboardName, controlAccessRoles: this.state.roles, controlAccessAdmin: this.state.admin,\n      controlAccessUsers: this.state.selectedUsers, gridItems: gridItems\n    }\n    const dashboard_request_data = {\n      method: 'POST',\n      headers: {\n        \"X-Tenant\": this.state.domainName,\n        'Content-Type': 'application/json', \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n      body: JSON.stringify(dashboard_data)\n    };\n    fetch(DASHBOARD_SERVICE + '/api/dashboard/edit', dashboard_request_data)\n        .then(response => {\n          return new Promise((resolve, reject) => {\n            response.text().then(body => {\n              resolve(\n                  body.length ? JSON.parse(body) : null\n              );\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        })\n        .then(data => {\n          this.props.history.push(\"/admin/dashboard/list\");\n        })\n\n\n  }\n  /*************************************************** render dashboard ************************************************/\n  render() {\n\n    const isVisibleDashboard = this.state.visibleDashboard;\n    return (\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard>\n            <CCardHeader>\n              <h2>Créer un Tableau de bord</h2>\n            </CCardHeader>\n            <CCardBody>\n              <CForm  noValidate>\n                <CFormGroup row className=\"my-0\">\n                  <CCol sm={12} md={6}>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"dashboardName\">Nom du Tableau de bord</CLabel>\n                      <CInput id=\"dashboardName\" onChange={e => this.setState({dashboardName: e.target.value})}\n                              value={this.state.dashboardName}  />\n                    </CFormGroup>\n                  </CCol>\n\n                  <CCol sm={12} md={6}>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"AccessControlRoles\">Contrôle d'accès (Rôles)</CLabel>\n\n                      <Select\n                          name=\"AccessControlRoles\"\n                          placeholder=\"Global\"\n                          value={this.state.roles}\n                          options={this.state.userRoles}\n                          onChange={e => this.setState({roles: e})}\n                          isMulti\n                      />\n                    </CFormGroup>\n                  </CCol>\n\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol sm={12} md={6}>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"AccessControlAdmin\">Contrôle d'accès (Admin)</CLabel>\n\n                      <Select\n                          name=\"AccessControlAdmin\"\n                          placeholder=\"Global\"\n                          value={this.state.admin}\n                          options={this.state.userRoles}\n                          onChange={e => this.setState({admin: e})}\n                          isMulti\n                      />\n                    </CFormGroup>\n                  </CCol>\n                  <CCol sm={12} md={6}>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"AccessControlUser\">Contrôle d'accès (User)</CLabel>\n\n                      <Select\n                          name=\"AccessControlUser\"\n                          placeholder=\"Global\"\n                          value={this.state.selectedUsers}\n                          options={this.state.users}\n                          onChange={e => this.setState({selectedUsers: e})}\n                          isMulti\n                      />\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CCard>\n                  <CCardHeader style={{backgroundColor:\"#F5F5F5\"}}>\n                    Tableau de Bord\n                    <Menu model={this.items} popup ref={el => this.menu = el} id=\"popup_menu\" />\n                    <CLink style={{ paddingLeft: \"10px\" }} className=\"card-header-actions\" >\n                      <i  size=\"2xl\" className=\"pi pi-bars\" icon=\"pi pi-bars\" onClick={(event) => this.menu.toggle(event)} aria-controls=\"popup_menu\" aria-haspopup></i>\n                    </CLink>\n                  </CCardHeader>\n                  <CCardBody>\n                    <div>\n                      {isVisibleDashboard &&\n                          <ReactGridLayout\n                              layout={this.state.layout}\n                              onLayoutChange={this.onLayoutChange}\n                              onBreakpointChange={this.onBreakpointChange}\n                          >\n                            {this.state.items.map( (el, key) => this.createElement(el, key))}\n                          </ReactGridLayout>\n                        }\n\n\n                    </div>\n                  </CCardBody>\n                  <Dialog visible={this.state.displayMaximizable} maximizable modal style={{ width: '70vw' }} footer={this.renderFooter('displayMaximizable')} onHide={() => this.onHide('displayMaximizable')}>\n                    <CForm  noValidate>\n                      <CFormGroup row className=\"my-0\">\n                        <CCol sm={12} md={12}>\n                          <CFormGroup>\n                            <CLabel htmlFor=\"title\">Titre</CLabel>\n                            <CInput id=\"title\" onChange={e => this.setState({title: e.target.value})}\n                                    value={this.state.title}  />\n                          </CFormGroup>\n                        </CCol>\n\n                        <CCol sm={12} md={12}>\n                          <CFormGroup>\n                            <CLabel htmlFor=\"chartType\">Type de chart</CLabel>\n\n                            <Select\n                                name=\"chartType\"\n                                value={this.state.selectedType}\n                                options={this.state.chartTypes}\n                                onChange={e => this.setState({selectedType: e})}\n\n                            />\n                          </CFormGroup>\n                        </CCol>\n\n                      </CFormGroup>\n                      <CFormGroup row className=\"my-0\">\n                        <CCol sm={12} md={12}>\n                          <CFormGroup>\n                            <CLabel htmlFor=\"workfowMaster\">Maître de flux de travail</CLabel>\n                            <Select\n                                name=\"workfowMaster\"\n                                value={this.state.selectedWorkflowMaster}\n                                options={this.state.worklfowMasters}\n                                onChange={e => this.selectWorklfowMaster(e)}\n                            />\n                          </CFormGroup>\n                        </CCol>\n                        <CCol sm={12} md={12}>\n                          <CFormGroup>\n                            <CLabel htmlFor=\"indicator\">Indicateur</CLabel>\n                            <Select\n                                name=\"indicator\"\n                                value={this.state.selectedPerformanceIndicator}\n                                options={this.state.performanceIndicators}\n                                onChange={e => this.setState({selectedPerformanceIndicator: e})}\n                            />\n                          </CFormGroup>\n                        </CCol>\n                      </CFormGroup>\n                    </CForm>\n                  </Dialog>\n                </CCard>\n                <CRow xs=\"4\">\n\n                  <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                    <CButton block variant=\"outline\" color=\"info\" id=\"formSave\" onClick={e => this.handleFormSubmit(e)}><Save/> Enregister</CButton>\n                  </CCol>\n                  <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                    <CButton block variant=\"outline\" color=\"danger\" onClick={()=> this.props.history.push(\"/admin/dashboard/list\")}><Cancel /> Annuler</CButton>\n                  </CCol>\n                </CRow>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n    );\n  }\n\n}\nfunction getFromLS(key) {\n  let ls = {};\n  if (localStorage) {\n    try {\n      ls = JSON.parse(localStorage.getItem(key)) || {};\n    } catch (e) {\n      /*Ignore*/\n    }\n  }\n  return ls[key];\n}\n\nfunction saveToLS(key, value) {\n  if (localStorage) {\n    localStorage.setItem(\n        key,\n        JSON.stringify({\n          [key]: value\n        })\n    );\n  }\n}\n\nif (process.env.STATIC_EXAMPLES === true) {\n  import(\"./test-hook.js\").then(fn => fn.default(EditDashboard));\n}"],"sourceRoot":""}