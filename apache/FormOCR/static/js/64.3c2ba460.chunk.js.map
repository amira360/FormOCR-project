{"version":3,"sources":["views/Administration/workflowBuilder/CreateWorkflow.js","../node_modules/@material-ui/icons/esm/Save.js","../node_modules/@material-ui/icons/esm/Cancel.js","assets/bpmn/empty.bpmn.jsx"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","withStyles","withTheme","props","React","useState","workflowName","setWorkflowName","workflowVersion","setWorkflowVersion","workflowId","workflowNameState","setWorkflowNameState","setWorklfowNameError","workflowVersionState","setWorkflowVersionState","setWorklfowVersionError","JSON","parse","localStorage","getItem","domainId","roles","setRoles","userRoles","setUserRoles","setBusinessObject","modeler","setModeler","username","domainName","useEffect","get_header","method","headers","fetch","USER_SERVICE","then","response","json","data","rolesFromApi","map","role","push","key","roleId","value","roleName","label","id","catch","error","console","log","model","Modeler","container","propertiesPanel","parent","additionalModules","propertiesPanelModule","propertiesProviderModule","moddleExtensions","camunda","camundaModdleDescriptor","importXML","emptyBpmn","canvas","get","zoom","_rootElement","businessObject","verifyLength","length","xs","sm","noValidate","row","className","htmlFor","disabled","onChange","e","target","invalid","md","name","placeholder","options","isMulti","style","backgroundColor","paddingTop","paddingLeft","paddingRight","width","borderColor","height","border","position","top","bottom","right","zIndex","borderLeft","borderTop","borderRight","borderBottom","overflow","float","col","xl","block","variant","color","onClick","workflowRoles","xml","saveXML","format","err","workflow_data","body","stringify","WORKFLOW_SERVICE","Promise","resolve","reject","text","history","alert","createSvgIcon","d","result","characters","charactersLength","i","charAt","Math","floor","random","join","makeid"],"mappings":"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","file":"static/js/64.3c2ba460.chunk.js","sourcesContent":["\nimport React, {useEffect} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CInput, CSelect,\n  CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback,\n} from '@coreui/react'\nimport {NORM_SERVICE, SERVER_URL, USER_SERVICE, WORKFLOW_SERVICE} from \"../../../constants\";\n\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport {emptyBpmn} from \"../../../assets/bpmn/empty.bpmn\";\nimport 'bpmn-js-properties-panel/dist/assets/bpmn-js-properties-panel.css';\nimport Modeler from \"bpmn-js/lib/Modeler\";\nimport camundaModdleDescriptor from 'camunda-bpmn-moddle/resources/camunda';\nimport propertiesPanelModule from \"bpmn-js-properties-panel\";\nimport propertiesProviderModule from \"bpmn-js-properties-panel/lib/provider/camunda\";\nimport 'bpmn-js/dist/assets/diagram-js.css';\nimport 'bpmn-font/dist/css/bpmn-embedded.css';\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from 'react-select';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Input from \"@material-ui/core/Input\";\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    marginLeft: 0+'px !important',\n    minWidth: 220,\n    maxWidth: 300,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst CreateWorkflow = (props) => {\n  const [collapsed, setCollapsed] = React.useState(true)\n  const [showElements, setShowElements] = React.useState(true)\n  const [workflowName, setWorkflowName] = React.useState('');\n  const [alert1, setAlert1] = React.useState('');\n  const [workflowVersion, setWorkflowVersion] = React.useState('');\n  const [display, setDisplay] = React.useState('');\n  const [workflowId, setWorkflowId] = React.useState('');\n  const [type, setType] = React.useState('workflow');\n  const [workflowNameState, setWorkflowNameState] = React.useState('');\n\n  const [workflowNameError, setWorklfowNameError] = React.useState('');\n\n    const [workflowVersionState, setWorkflowVersionState] = React.useState('');\n  const [workflowVersionError, setWorklfowVersionError] = React.useState('');\n  const [form, setForm] = React.useState('');\n  const [domainId, setDomainId] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainId);\n  const [roles, setRoles] = React.useState([]);\n  const [xml, setXml] = React.useState([]);\n  const [userRoles, setUserRoles] = React.useState([]);\n  const [businessObject, setBusinessObject] = React.useState(null);\n  const classes = useStyles();\n  const [modeler, setModeler] = React.useState(null);\n  const [username, setUsername] = React.useState(localStorage.getItem('username'));\n    const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\n    /*    const [norms, setNorms] = React.useState([]);\n        const [selectedNorms, setSelectedNorms] = React.useState([]);*/\n  useEffect(()=> {\n      const get_header = {\n          method: 'GET',\n          headers: {\n              \"X-Tenant\": domainName,\n              'Content-Type': 'application/json',\n              \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n          }\n      };\n    fetch(USER_SERVICE + \"/api/auth/role/getRoles\", get_header)\n      .then((response) => {\n        return response.json();\n      })\n      .then(data => {\n        var rolesFromApi = [];\n\n        data.map(role => {\n          rolesFromApi.push({\n            key: role.roleId,\n            value : role.roleName,\n            label : role.roleName,\n              id: role.roleId\n          })\n        })\n        setUserRoles(rolesFromApi);\n\n      })\n        .catch(error => {\n      console.log(error);\n    });\n var model = new Modeler({\n   container: '#bpmnview',\n   propertiesPanel: {\n     parent: '#propview'\n   },\n   additionalModules: [\n     propertiesPanelModule,\n     propertiesProviderModule\n   ],\n   moddleExtensions: {\n     camunda: camundaModdleDescriptor\n   }\n\n })\n\n    model.importXML(emptyBpmn, (error) => {\n      if (error) {\n        return console.log('fail import xml');\n      }\n      var  canvas = null;\n      canvas = model.get('canvas') ;\n      canvas.zoom('fit-viewport');\n     setBusinessObject(canvas._rootElement.businessObject);\n     setModeler(model)\n      // const data = canvas._rootElement.businessObject;\n      // console.log(data);\n    });\n\n\n     /* fetch(NORM_SERVICE + \"/api/auth/norm/getAll\")\n          .then((response) => {\n              return response.json();\n          })\n          .then(data => {\n              console.log(data);\n              var normsFromApi = [];\n              const allNorms = JSON.parse(data.standards)\n              allNorms.map(norm =>{\n                  normsFromApi.push({label: norm.name, value: norm.id})\n              })\n              setNorms(normsFromApi)\n          })\n          .catch(err => {\n              console.log(err);\n          });*/\n\n\n\n\n  },[]);\n\n\n  const handleInputChange  =(event) =>  {\n    console.log(event.target.value);\n  }\n\n  const handleChangeMultiple =(event)=> {\n    const {options} = event.target;\n    const value = [];\n    for (let i = 0, l = options.length; i < l; i += 1) {\n      if (options[i].selected) {\n        value.push(options[i].value);\n      }\n    }\n    setRoles(value);\n  }\n\n  const handleSubmit = () =>  {\n    // const err= null\n    var data = {workflowId: workflowId,\n      workflowName: workflowName,\n      workflowVersion: workflowVersion, workflowRoles: roles,\n      xml: null,\n      domainId: domainId,\n      username: username\n      // standards: selectedNorms\n    };\n    modeler.saveXML({ format: true }, function( err, xml) {\n      // log the current xml content to the browser console\n      data.xml = xml;\n      const workflow_data = {\n        method: 'POST',\n        headers: {\n            \"X-Tenant\": domainName,\n            'Content-Type': 'application/json',\n          \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n        body: JSON.stringify(data)\n      };\n      if( workflowNameState === \"success\" && workflowVersionState === \"success\"){\n          fetch(WORKFLOW_SERVICE + '/api/workflow/save', workflow_data)\n              .then(response => {\n                  return new Promise((resolve, reject) => {\n                      response.text().then(body => {\n                          resolve(\n                              body.length ? JSON.parse(body) : null\n                          );\n                      }).catch(err => {\n                          reject(err);\n                      });\n                  });\n              })\n              .then(data => {\n                  const workflowId = data.workflowId\n                  props.history.push(\"/admin/workflow/list\");\n              })\n      }else{\n          alert(\"Prière de remplir les champs obligatores ! \")\n      }\n\n    });\n  /*  const workflow_data = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n      body: JSON.stringify({domainId: domainId})\n    };\n    fetch(SERVER_URL + '/api/workflow/getAll',workflow_data)\n      .then(response => {\n        return new Promise((resolve, reject) => {\n          response.text().then(body => {\n            resolve(\n              body.length ? JSON.parse(body) : null\n            );\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      })\n      .then(data => {\n        localStorage.setItem(\"workflows\", JSON.stringify(data))\n      })*/\n\n  }\n\n  const hideAlert = () => {\n    setAlert1(null)\n  };\n\n  const verifyLength = (value, length) => {\n    if (value.length >= length) {\n      return true;\n    }\n    return false;\n  };\n  const basicAlert = () =>{\n    /* this.setState({alert:\n         <SweetAlert\n           style={{ display: \"block\", marginTop: \"-100px\" }}\n           title=\"the form code is already used !\"\n           onConfirm={() => this.hideAlert()}\n           onCancel={() => this.hideAlert()}\n         />\n     })*/\n  };\n\n  const handleDelete = (chipToDelete) =>{\n\n    const data = roles.filter((chip) => chip !== chipToDelete);\n    setRoles(data);\n\n  };\n  let icon;\n  return (\n    <>\n      <CCol xs=\"12\" sm=\"12\">\n        <CCard>\n          <CCardHeader>\n            <h2>Créer un workflow</h2>\n          </CCardHeader>\n          <CCardBody>\n            <CForm  noValidate >\n              <CFormGroup row className=\"my-0\">\n                <CCol xs=\"6\">\n                  <CFormGroup>\n                    <CLabel htmlFor=\"workflowId\">S No</CLabel>\n                    <CInput id=\"workflowId\" /*onChange={e => setWorkflowId(e.target.value) }\n                            value={workflowId}*/ disabled />\n                  </CFormGroup>\n                </CCol>\n                <CCol xs=\"6\">\n                  <CFormGroup>\n                    <CLabel htmlFor=\"workflowName\">Workflow name</CLabel>\n                    <CInput id=\"workflowName\"\n                            onChange={e => {\n                                setWorkflowName(e.target.value);\n                                if(verifyLength(e.target.value, 3) ){\n                                    setWorkflowNameState(\"success\");\n\n                                } else {\n                                    setWorkflowNameState(\"error\");\n                                    setWorklfowNameError(\"Le nom du workflow est obligatoire !\")\n                                }\n                            }\n\n                                }\n                            invalid={workflowNameState === \"error\"}\n                            value={workflowName}  />\n                  </CFormGroup>\n                </CCol>\n\n              </CFormGroup>\n              <CFormGroup row className=\"my-0\">\n                <CCol xs=\"6\">\n                  <CFormGroup>\n                    <CLabel htmlFor=\"workflowVersion\">Version</CLabel>\n                    <CInput id=\"workflowVersion\"\n                            onChange={e => {\n                                setWorkflowVersion(e.target.value);\n                                if(verifyLength(e.target.value, 3) ){\n                                    setWorkflowVersionState(\"success\");\n\n                                } else {\n                                    setWorkflowVersionState(\"error\");\n                                    setWorklfowVersionError(\"Le nom du workflow est obligatoire !\")\n                                }\n                            }\n\n                            }\n                            invalid={workflowVersionState === \"error\"}\n                            value={workflowVersion} />\n                  </CFormGroup>\n                </CCol>\n\n\n                  <CCol sm={12} md={6}>\n                      <CFormGroup>\n                          <CLabel htmlFor=\"roles\">Access control</CLabel>\n                          <Select\n                              name=\"roles\"\n                              value={roles}\n                              onChange={setRoles}\n                              placeholder=\"Globale\"\n                              options={userRoles}\n                              isMulti\n                          />\n                      </CFormGroup>\n                  </CCol>\n                 {/* <CCol sm={12} md={6}>\n                      <CFormGroup>\n                          <CLabel htmlFor=\"type\">Norme</CLabel>\n                          <Select\n                              name=\"type\"\n                              value={selectedNorms}\n                              onChange={setSelectedNorms}\n                              placeholder=\"Selectionnez les normes\"\n                              options={norms}\n                              isMulti\n                          />\n                      </CFormGroup>\n                  </CCol>*/}\n              </CFormGroup>\n              <CCard>\n                 <CCardHeader style={{backgroundColor:\"#F5F5F5\"}}>\n                                 Editeur de workflow\n                              </CCardHeader>\n                  <CCardBody style={{paddingTop:\"0px\", paddingLeft: '0px', paddingRight: '0px'}}>\n\n                      <div className=\"panel panel-default\" style={{width:100+'%',borderColor: '#ddd !important'}}>\n                        <div className=\"panel-body\">\n                              <div id=\"bpmncontainer\"  style={{    height: \"750px\",\n                                                                   border: \"1px solid grey\"}}>\n                                <div id=\"propview\"  style={{    position: \"absolute\",\n                                                                top: \"161px\",\n                                                                bottom: \"300px\",\n                                                                right: \"15px\",\n                                                                width: \"260px\",\n                                                                zIndex: 10,\n                                                                borderLeft: \"1px solid #cc\",\n                                                                borderTop: \"1px solid #ccc\",\n                                                                borderRight: \"1px solid #ccc\",\n                                                                borderBottom: \"1px solid #ccc\",\n                                                                overflow: \"auto\"  }}></div>\n                                <div id=\"bpmnview\" style={{width: '100%', height: '100%', position:\"relative\", float: 'left',backgroundColor: 'white' }}></div>\n                              </div>\n                        </div>\n                      </div>\n\n                </CCardBody>\n              </CCard>\n               <CRow xs=\"4\">\n\n            <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n              <CButton block variant=\"outline\" color=\"info\" id=\"workflowSave\" onClick={handleSubmit}><Save/> Enregister</CButton>\n            </CCol>\n            <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n              <CButton block variant=\"outline\" color=\"danger\"\n                       onClick={()=> props.history.push(\"/admin/workflow/list\")}><Cancel />\n                                                                                                        Annuler</CButton>\n            </CCol>\n\n            </CRow>\n            </CForm>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\nexport default withStyles({ ...useStyles}, { withTheme: true })(CreateWorkflow) ;\n\n","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');"," const makeid = (length) =>{\n                              var result           = [\"Process_\"];\n                              var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n                              var charactersLength = characters.length;\n                              for ( var i = 0; i < length; i++ ) {\n                                result.push(characters.charAt(Math.floor(Math.random() *\n                           charactersLength)));\n                             }\n                             return result.join('');\n                          }\n\nexport const emptyBpmn = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><bpmn2:definitions xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" id=\"sample-diagram\" targetNamespace=\"http://bpmn.io/schema/bpmn\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\">\n                            <bpmn2:process id=\"${makeid(7)}\" isExecutable=\"true\"/>\n                            <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n                              <bpmndi:BPMNPlane bpmnElement=\"Process_1bzh145\" id=\"BPMNPlane_1\"/>\n                            </bpmndi:BPMNDiagram>\n                          </bpmn2:definitions>`;\n\n\n"],"sourceRoot":""}