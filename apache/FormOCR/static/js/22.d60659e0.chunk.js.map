{"version":3,"sources":["views/Administration/dashboard/test-hook.js"],"names":["makeLayout","Layout","ListeningLayout","state","layout","onLayoutChange","setState","this","map","l","name","i","className","x","y","w","h","StrictMode","stringifyLayout","React","Component","run","contentDiv","document","getElementById","gridProps","window","ReactDOM","render","createElement","addEventListener"],"mappings":"kPAMe,SAASA,EAAWC,GAAQ,IAGnCC,EAHmC,4MAIvCC,MAAQ,CAAEC,OAAQ,IAJqB,EAMvCC,eAAiB,SAAAD,GACf,EAAKE,SAAS,CAAEF,OAAQA,KAPa,gEAWrC,OAAOG,KAAKJ,MAAMC,OAAOI,KAAI,SAAUC,GACrC,IAAMC,EAAe,sBAARD,EAAEE,EAA4B,OAASF,EAAEE,EACtD,OACI,sBAAKC,UAAU,aAAf,UACE,4BAAIF,IADN,aAESD,EAAEI,EAFX,aAEiBJ,EAAEK,EAFnB,aAEyBL,EAAEM,EAF3B,aAEiCN,EAAEO,EAFnC,OAAiCP,EAAEE,QAdJ,+BAuBrC,OACI,cAAC,IAAMM,WAAP,UACE,gCACE,sBAAKL,UAAU,aAAf,0BACe,gDADf,IAEE,qBAAKA,UAAU,UAAf,SAA0BL,KAAKW,uBAEjC,cAACjB,EAAD,CAAQI,eAAgBE,KAAKF,0BA9BA,GAGXc,IAAMC,WAkCpC,SAASC,IACP,IAAMC,EAAaC,SAASC,eAAe,WACrCC,EAAYC,OAAOD,WAAa,GACtCE,IAASC,OACLT,IAAMU,cAAc3B,EAAiBuB,GACrCH,GASN,OANKC,SAASC,eAAe,WAG3BH,IAFAE,SAASO,iBAAiB,mBAAoBT,GAKzCnB,EArDS,qBAAXwB,SAA2BA,OAAOP,MAAQA","file":"static/js/22.d60659e0.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"style-loader!css-loader!../css/styles.css\";\n// import \"style-loader!css-loader!../examples/example-styles.css\";\ntypeof window !== \"undefined\" && (window.React = React); // for devtools\n\nexport default function makeLayout(Layout) {\n  // Basic layout that mirrors the internals of its child layout by listening to `onLayoutChange`.\n  // It does not pass any other props to the Layout.\n  class ListeningLayout extends React.Component {\n    state = { layout: [] };\n\n    onLayoutChange = layout => {\n      this.setState({ layout: layout });\n    };\n\n    stringifyLayout() {\n      return this.state.layout.map(function (l) {\n        const name = l.i === \"__dropping-elem__\" ? \"drop\" : l.i;\n        return (\n            <div className=\"layoutItem\" key={l.i}>\n              <b>{name}</b>\n              {`: [${l.x}, ${l.y}, ${l.w}, ${l.h}]`}\n            </div>\n        );\n      });\n    }\n\n    render() {\n      return (\n          <React.StrictMode>\n            <div>\n              <div className=\"layoutJSON\">\n                Displayed as <code>[x, y, w, h]</code>:\n                <div className=\"columns\">{this.stringifyLayout()}</div>\n              </div>\n              <Layout onLayoutChange={this.onLayoutChange} />\n            </div>\n          </React.StrictMode>\n      );\n    }\n  }\n\n  function run() {\n    const contentDiv = document.getElementById(\"content\");\n    const gridProps = window.gridProps || {};\n    ReactDOM.render(\n        React.createElement(ListeningLayout, gridProps),\n        contentDiv\n    );\n  }\n  if (!document.getElementById(\"content\")) {\n    document.addEventListener(\"DOMContentLoaded\", run);\n  } else {\n    run();\n  }\n\n  return ListeningLayout;\n}"],"sourceRoot":""}