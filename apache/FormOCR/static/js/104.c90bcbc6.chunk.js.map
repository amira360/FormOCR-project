{"version":3,"sources":["views/Administration/processDependenciesMatrix/print/DefaultPrint.js","views/Administration/processDependenciesMatrix/ViewDependencyMatrix.js"],"names":["addHighchartsMore","Highcharts","addVariwideModule","DefaultPrint","props","state","height","width","printPage","bind","createFieldsNamesTree","console","log","localStorage","getItem","userData","domainName","JSON","parse","dependencyId","formIds","nodeDataTable","processKey","historics","formDataHistoric","formsData","chartFig","chartOptions","series","data","chart","type","xAxis","labels","useHTML","formatter","name","y","color","isSub","lev","children","map","component","level0","components","push","label","title","id","fieldKey","key","datagridComp","level1","columns","col","sub_comp","level3","datagridComps","level4","comp","level5","level6","e","pdf1","input","document","getElementById","html2canvas","useCORS","then","canvas","imgHeight","imgData","toDataURL","pdf","jsPDF","addImage","output","style","display","src","verif_dataGrid","workflowMasterName","currentdate","Date","toLocaleString","className","minHeight","this","firstName","lastName","formData","i","panelData","textAlign","backgroundColor","scope","colSpan","elem","val","Array","isArray","child","count","childVal","step","position","right","Component","useStyles","makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","flexWrap","chip","noLabel","marginTop","withStyles","withTheme","toast","useRef","menu","React","useState","setPosition","dependencySno","setDependencySno","setWorkflow","domainId","forms","setDependency","setDependencyId","dependencyName","setDependencyName","formValues","setFormValues","displayMaximizable","setDisplayMaximizable","useEffect","workflowsApi","workflow_data","method","headers","body","stringify","fetch","WORKFLOW_SERVICE","response","Promise","resolve","reject","text","length","catch","err","item","value","version","match","params","dependency_data","DEPENDENCY_SERVICE","matrix","process_list","sno","process_ids","process_ids_list","dependsOn","formValuesData","process_index","depend","processId","process_index_string","toString","includes","index_process_id","indexOf","process_val","filter","dependsOnId","undefined","index","string_index","dependOn","dialogFuncMap","items","icon","command","setItem","onClick","window","print","onHide","heightLeft","doc","addPage","ref","xs","sm","history","rel","target","size","event","model","popup","paddingLeft","paddingRight","current","toggle","noValidate","row","md","htmlFor","disabled","element","borderBottom","isMulti","xl","block","variant","Cancel","visible","maximizable","modal","footer","autoFocus"],"mappings":"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","file":"static/js/104.c90bcbc6.chunk.js","sourcesContent":["import React, {Component, PropTypes, useEffect} from \"react\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\n//import Pie from \"./Pie.js\";\nimport Highcharts from \"highcharts/highcharts.src.js\";\nimport addHighchartsMore from \"highcharts/highcharts-more\";\nimport addVariwideModule from \"highcharts/modules/variwide\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CInput, CSelect,\n  CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback, CLink\n} from '@coreui/react'\nimport {SERVER_URL, USER_SERVICE, PROCESS_SERVICE} from \"../../../../constants\";\n\naddHighchartsMore(Highcharts);\naddVariwideModule(Highcharts);\n\nclass DefaultPrint extends Component {\n  constructor(props) {\n    super(props);\n\n    //   pdf.addImage(Logo, \"PNG\", 0, 0, \"300px\", \"300px\");\n   // forms.map((formData, index) =>}\n    this.printPage = this.printPage.bind(this);\n    this.createFieldsNamesTree = this.createFieldsNamesTree.bind(this);\n\n    // this.getLineFromData =  this.getLineFromData.bind(this);\n    console.log(localStorage.getItem(\"processHistory\"))\n    this.state = {\n      userData:{},\n      domainName : JSON.parse(localStorage.getItem(\"domain_data\")).domainName,\n      dependencyId: '',\n\n      formIds: [],\n      nodeDataTable:[],\n      processKey: '',\n      historics:[],\n      formDataHistoric: [],\n      formsData: localStorage.getItem(\"processHistory\"),\n      chartFig: null,\n      chartOptions: {\n        series: [\n          {\n            data: [1, 2, 3]\n          }\n        ],\n        chart: {\n          height: 400,\n          type: \"column\"\n        },\n        xAxis: {\n          labels: {\n            useHTML: true,\n            formatter: function () {\n              return \"\";\n            }\n          }\n        }\n      },\n      series: [\n        {\n          name: \"Gases\",\n          data: [\n            {\n              name: \"Argon\",\n              y: 0.9,\n              color: \"#3498db\"\n            },\n            {\n              name: \"Nitrogen\",\n              y: 78.1,\n              color: \"#9b59b6\"\n            },\n            {\n              name: \"Oxygen\",\n              y: 20.9,\n              color: \"#2ecc71\"\n            },\n            {\n              name: \"Trace Gases\",\n              y: 0.1,\n              color: \"#f1c40f\"\n            }\n          ]\n        }\n      ]\n    }\n\n      const dependency_id = props.dependencyId;\n    const user_data = {\n      method: 'GET',\n      headers: {\n        \"X-Tenant\": this.state.domainName,\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n    };\n    const username_data = localStorage.getItem(\"username\");\n    /*fetch(USER_SERVICE +'/api/auth/user/getUserByUsername/'+username_data, user_data)\n        .then(response =>{\n          return new Promise((resolve, reject) => {\n            response.text().then(body => {\n              resolve(\n                  body.length ? JSON.parse(body) : null\n              );\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        })\n        .then(data=>{\n          this.setState({userData : JSON.parse(data.user)})\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      this.setState({workflowMasterId: workflowMaster_id})\n      console.log(processInstanceId)\n      console.log(workflowMaster_id)\n      this.setState({processInstanceId: processInstanceId})\n      //  this.setState({processKey: processKey})\n      const username = localStorage.getItem(\"username\");\n      localStorage.setItem(\"processInstanceId\",processInstanceId)\n      const process_data = {\n        method: 'POST',\n        headers: {\n          \"X-Tenant\": this.state.domainName,\n          'Content-Type': 'application/json',\n          \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n        body: JSON.stringify({processInstanceId: processInstanceId})\n      };\n      fetch(PROCESS_SERVICE +\"/api/process/auth/historic\", process_data)\n          .then(response => {\n            return new Promise((resolve, reject) => {\n              response.text().then(body => {\n                resolve(\n                    body.length ? JSON.parse(body) : null\n                );\n              })\n                  .catch(err => {\n                    reject(err);\n                  });\n            });\n          })\n          .then(data => {\n            console.log(data)\n            console.log(JSON.parse(data.historicVariableInstances))\n            //    console.log( data.historicTaskInstances);\n            //console.log(JSON.parse(data.processDefinitionId))\n            const historicVariableInstances = JSON.parse(data.historicVariableInstances);\n            const historicTaskInstances = JSON.parse(data.historicTaskInstances);\n            this.setState({processKey: historicVariableInstances[0].processDefinitionKey})\n            this.setState({historics: historicVariableInstances});\n            var taskForms = []\n            var ids = [];\n            var formDataHistorics = []\n            historicVariableInstances.map(instance_data =>{\n              if(typeof (instance_data.value) === \"object\"){\n                ids.push({formCode: instance_data.variableName})\n\n                taskForms.push(instance_data.value)\n                /!*let formCodes = []\n                formCodes = Object.keys(instance_data.value);\n                console.log(formCodes)\n                console.log(instance_data.value)\n\n                formCodes.map(id =>{\n                  ids.push({formCode: id})\n                  const taskForm = instance_data.value;\n                  taskForms.push(taskForm.[id])\n                  /!*\n                  var taskFormFields = Object.keys(taskForm)\n                  taskFormFields.map(formFieldVal =>{\n                    taskForms.push(taskForm.[formFieldVal])\n                    ids.push({formCode: formCodeVal})\n                  })*!/\n\n                })*!/\n              }\n            })\n\n\n            console.log(taskForms)\n            console.log(ids)\n            var nodeDataTab = []\n            var forms_json = JSON.parse(localStorage.getItem(\"formsJson\"));\n            console.log(forms_json)\n            taskForms.map((formVal, index) =>{\n\n              if(formVal !== null && forms_json[index] !== undefined ){\n                formDataHistorics.push(formVal)\n                const nodeData = this.createFieldsNamesTree(forms_json[index].components,true, 0 )\n                nodeDataTab.push(nodeData)\n              }\n\n              /!*   if(!Array.isArray(formVal.[item])){\n                     formDataHistoric.push(formVal.[item])\n                 }else{\n                     formDataHistoric.push(...formVal.[item])\n                 }*!/\n            })\n            this.setState({formDataHistoric: formDataHistorics})\n\n            console.log(nodeDataTab)\n            console.log(formDataHistorics)\n            this.setState({nodeDataTable: nodeDataTab})\n            this.setState({formIds: ids })\n            console.log(ids)\n  })*/\n  }\n   createFieldsNamesTree (data, isSub,lev) {\n    var children = [];\n    var count = 0;\n    console.log(data)\n    data.map((component, level0) =>{\n      if (typeof(component.components) === 'object') { // Sub array found, build structure\n        //   children.push({label: component.title, key: component.key, children: createTree(component.components, true, level)})\n        if (component.type !== \"datagrid\"){\n          children.push({\n            label: component.title,\n            id: component.id,\n            fieldKey: component.key,\n            children: this.createFieldsNamesTree(component.components, true, count)\n          })\n        }else{\n          component.components.map((datagridComp, level1) => {\n            if (typeof(datagridComp.components) === 'object')  {\n              children.push({\n                label: datagridComp.label,\n                id: datagridComp.id,\n                fieldKey: datagridComp.key,\n                children: this.createFieldsNamesTree(datagridComp.components, true, count)\n              })\n            } else  if(typeof(datagridComp.columns) === 'object')\n            {\n              datagridComp.columns.map((col) =>{\n                if (typeof(col.components) === 'object') { // Sub array found, build structure\n                  col.components.map((sub_comp, level3) =>{\n                    if (typeof(sub_comp.components) === 'object') {\n                      if (sub_comp.type !== \"datagrid\"){\n                        children.push({\n                          label: sub_comp.label,\n                          id: sub_comp.id,\n                          fieldKey: sub_comp.key,\n                          children: this.createFieldsNamesTree(sub_comp.components, true, count)\n                        })\n                      }else{\n                        sub_comp.components.map((datagridComps, level4) => {\n                          if (typeof(datagridComps.components) === 'object')  {\n                            children.push({\n                              label: datagridComps.label,\n                              id: datagridComps.id,\n                              fieldKey: datagridComps.key,\n                              children: this.createFieldsNamesTree(datagridComps.components, true, count)\n                            })\n                          } else {\n                            children.push({\n                              label: datagridComps.label,\n                              id: datagridComps.id,\n                              fieldKey: datagridComps.key,\n                            })\n                          }\n                        })\n                      }\n                    } else{\n                      children.push(\n                          {label: sub_comp.label,\n                            id: sub_comp.id,\n                            fieldKey: sub_comp.key,\n                          }\n                      );\n                    }\n                  })\n                }\n              })\n            }else{\n              children.push({\n                label: datagridComp.label,\n                id: datagridComp.id,\n                fieldKey: datagridComp.key,\n              })\n            }\n          })\n        }\n      }else if (typeof(component.columns) === 'object') {\n        component.columns.map((col) =>{\n          if (typeof(col.components) === 'object') { // Sub array found, build structure\n            col.components.map((comp, level5) =>{\n              if (typeof(comp.components) === 'object') {\n                if (comp.type !== \"datagrid\"){\n                  children.push({\n                    label: comp.label,\n                    id: comp.id,\n                    fieldKey: comp.key,\n                    children: this.createFieldsNamesTree(comp.components, true, count)\n                  })\n                }else{\n                  comp.components.map((datagridComp, level6) => {\n                    if (typeof(datagridComp.components) === 'object')  {\n                      children.push({\n                        label: datagridComp.label,\n                        id: datagridComp.id,\n                        fieldKey: datagridComp.key,\n                        children: this.createFieldsNamesTree(datagridComp.components, true, count)\n                      })\n                    } else {\n                      children.push({\n                        label: datagridComp.label,\n                        id: datagridComp.id,\n                        fieldKey: datagridComp.key,\n                      })\n                    }\n                  })\n                }\n              } else{\n                children.push(\n                    {label: comp.label,\n                      id: comp.id,\n                      fieldKey: comp.key,\n                    }\n                );\n              }\n            })\n          }\n        })\n      }else { // No submenu, bottom of tree\n        children.push(\n            {label: component.label,\n              id: component.id,\n              fieldKey: component.key,\n            }\n        );\n      }\n    })\n\n    //  setExpandedKeys(keys)\n    /* console.log(keys)*/\n\n    return children;\n    //return <div className='filter-body open'>{children}</div>;\n\n  }\n  printPage(e) {\n    //  e.preventdefault();\n      var pdf1 = null;\n      const input = document.getElementById(\"divToPrint\");\n      /////setTimeout(() => input, 2000);\n      html2canvas(input, { useCORS: true }).then((canvas) => {\n        let imgWidth = 190;\n        let imgHeight = (canvas.height * imgWidth) / canvas.width + 300;\n        const imgData = canvas.toDataURL(\"img/png\");\n        const pdf = new jsPDF(\"p\", \"mm\", \"a4\");\n        pdf.addImage(imgData, \"PNG\", 10, 10, imgWidth, imgHeight);\n        //   pdf.text(\"Octonyan loves jsPDF\", 35, 25);\n        pdf1 = pdf.output(\"bloburl\");\n        // this.setState({ file: pdf1 });\n      //  document.getElementById(\"test\").src = pdf1;\n       document.getElementById(\"tab\").style.display = \"none\";\n       document.getElementById(\"test\").style.display = \"block\";\n\n       document.getElementById(\"test\").src = pdf1;\n\n        //   pdf.text(\"Octonyan loves jsPDF\", 35, 25);\n\n        //   pdf.addImage(Logo, \"PNG\", 0, 0, \"300px\", \"300px\");\n        // this.setState({ file: pdf.output(\"bloburl\") });\n\n        //  pdf.output(\"dataurlnewwindow\");\n        // pdf.save(\"download.pdf\");\n        // return pdf;\n      });\n\n  }\n\n  state = {\n    height: 200,\n    width: 200\n  };\n\n\n/*    return (\n        <tr key={elem.id}>\n          <td style={{width: \"35%\"}}>{elem.label}</td>\n          <td>{val[\"dataGrid\"]}</td>)\n\n  }\n}*/\n  render() {\n    const data = [\n      {\n        name: \"Argon\",\n        y: 0.9,\n        color: \"#3498db\"\n      },\n      {\n        name: \"Nitrogen\",\n        y: 78.1,\n        color: \"#9b59b6\"\n      },\n      {\n        name: \"Oxygen\",\n        y: 20.9,\n        color: \"#2ecc71\"\n      },\n      {\n        name: \"Trace Gases\",\n        y: 0.1,\n        color: \"#f1c40f\"\n      }\n    ];\n\n    const customLabels = [];\n    var counter = 0;\n    var countChild = 0;\n    var verif_dataGrid = true;\n    const workflowMasterName = localStorage.getItem(\"workflowMasterName\");\n    // const domainName = JSON.parse(localStorage.getItem(\"domain_data\")).domainName;\n\n    const currentdate = new Date().toLocaleString();\n    /*const currentDateTime = currentdate.getDate() + \"/\" + (currentdate.getMonth()+1)\n        + \"/\" + currentdate.getFullYear() + \" @ \"\n        + currentdate.getHours() + \":\"\n        + currentdate.getMinutes() + \":\" + currentdate.getSeconds();*/\n    // const currentDateTime = new Date().today() + \" @ \" + new Date().timeNow()\n    return (\n    <div>\n    <CCard>\n            <CCardHeader>\n              <div className=\"m-subheader\">\n                <div className=\"d-flex align-items-center\">\n                  <div className=\"mr-auto col-xs-6 \"><h4\n                    className=\"m-subheader__title m-subheader__title--separator\"><span className=\"ng-tns-c2-0\">{workflowMasterName} </span>\n                  </h4>\n\n                  </div>\n                  <div className=\"card-header-actions\">\n                                                                         {/*  <CLink\n                                                                              style={{color: \"#716ACA\"}}\n                                                                              onClick={(e)=> this.printPage(e)}\n                                                                              rel=\"noreferrer noopener\"\n                                                                              target=\"_blank\"\n                                                                              className=\"c-subheader-nav-link\"\n                                                                            >\n                                                                                      <i  size=\"2xl\" className=\"pi pi-print\" onClick={(event) => console.log(event)}></i>\n\n                                                                            </CLink>*/}\n</div>\n           </div>\n           </div>\n        </CCardHeader>\n        <CCardBody style={{minHeight:\"300px\"}}>\n      <div>\n              <div\n                id=\"tab\"\n                // style={{ height: 0, overflow: \"hidden\" }}\n              >\n                <div className=\"container\" id=\"divToPrint\">\n                  <div className=\"text-center\">\n                    <div className=\"row py-3\">\n                      <div className=\"col-12 mb-3\">\n                      <h3>{this.state.domainName}</h3>\n                      </div>\n                      <div className=\"col-12 mb-3\">\n                        Téléchargé par {this.state.userData.firstName} {this.state.userData.lastName} le {currentdate}\n                      </div>\n                    </div>\n                    {/* <img src={Img} height=\"400px\" width=\"400px\" />\n\n                                <Pie />*/}\n                  </div>\n<div >\n  {this.state.nodeDataTable?.map((formData, i) =>{\n    return (\n        <div className=\"row\" >\n          {formData?.map(panelData =>{\n\n            return (\n                <table\n                    style={{ textAlign: \"left\" , width:\"100%\"}}\n                    className=\"table table-striped table-bordered\"\n                >\n                  <thead>\n                    <tr\n                        style={{\n                          backgroundColor: \"#4a7bc4\",\n                          color: \"#fff\"\n                        }}\n                    >\n                      <th scope=\"col\" colSpan=\"8\">\n                          {panelData.label}\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                  {\n                    panelData.children?.map(elem => {\n\n                      const val = this.state.formDataHistoric[i]\n                      console.log(elem)\n                      console.log(val)\n                      if (val[elem.fieldKey] && typeof (val[elem.fieldKey]) !== \"object\") {\n                        //  console.log(val[elem.fieldKey])\n\n                        return (<tr key={elem.id}>\n                          <td style={{width: \"35%\"}}>{elem.label}</td>\n                          <td style={{width: \"65%\"}}>{val[elem.fieldKey] !== null ? val[elem.fieldKey] : null}</td>\n                        </tr>)\n                      } else if (val[elem.fieldKey] && typeof (val[elem.fieldKey]) === \"object\" && !Array.isArray(val[elem.fieldKey])) {\n                        console.log(val[elem.fieldKey])\n                        return (<tr key={elem.id}>\n                          {elem.children.map((child, count) => {\n                            return (<td>{child.label}</td>)\n                          })}\n                          {\n                            val[elem.fieldKey].map((childVal, count) => {\n                              elem.children.map((child, count) => {\n                                return (<td>{childVal[child.fieldKey] !== null ? val[elem.fieldKey] : null}</td>)\n                              })\n                            })\n                          }\n                        </tr>)\n                      } else if ( elem.fieldKey === \"dataGrid\" && val[\"dataGrid\"] && verif_dataGrid && typeof (val[\"dataGrid\"]) === \"object\") {\n                          console.log(val[\"dataGrid\"])\n                          verif_dataGrid = false\n                          return (<><tr key={panelData.id}>\n                            {\n                              panelData.children.map(child => {\n                                return (<th scope=\"col\" >\n                                  {child.label}\n                                </th>)\n                              })\n                            } </tr>\n                            {\n                                  val[\"dataGrid\"].map((childVal, count) => {\n\n                                   return (<tr> {panelData.children.map((child, step) => {\n                                      return (<td>{childVal[child.fieldKey]  !== null ? val[elem.fieldKey] : null}</td>)\n                                    })}</tr>)\n                            })\n                          }\n                          </>)\n                      }\n                    })\n                  }\n                  </tbody>\n                </table>\n            )\n          })}\n        </div>\n        )\n  })}\n</div>\n\n                </div>\n              </div>\n\n                    <iframe\n                      id=\"test\"\n                      style={{ position: \"absolute\", right: 0, display:\"none\", height:\"300px\" }}\n                      // src={pdf1}\n                      //  onLoad={this.printDocument}\n                      width=\"100%\"\n                    />\n                  </div>\n                  </CCardBody>\n                      </CCard>\n                      </div>\n    );\n  }\n}\n\nexport default DefaultPrint;\n","\nimport React, {useEffect, useRef} from 'react';\nimport { Toast } from 'primereact/toast';\nimport {Checkbox} from 'primereact/checkbox';\n\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CFormGroup,\n    CInput, CSelect,\n    CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback, CInputCheckbox, CLink\n} from '@coreui/react'\nimport { Button } from 'primereact/button';\n\nimport {DEPENDENCY_SERVICE, USER_SERVICE, WORKFLOW_SERVICE, WORKFLOW_MASTER_SERVICE, FORM_SERVICE} from \"../../../constants\";\nimport \"./css/styles.css\";\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport \"primeicons/primeicons.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport \"primereact/resources/primereact.css\";\nimport \"primeflex/primeflex.css\";\n\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from 'react-select';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Input from \"@material-ui/core/Input\";\nimport { Panel } from 'primereact/panel';\nimport {Menu} from \"primereact/menu\";\nimport DefaultPrint from \"./print/DefaultPrint\";\nimport {Dialog} from \"primereact/dialog\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        marginLeft: 0+'px !important',\n        minWidth: 220,\n        maxWidth: 300,\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n    noLabel: {\n        marginTop: theme.spacing(3),\n    },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst ViewDependencyMatrix = (props) => {\n    const toast = useRef(null);\n    const menu = useRef(null);\n    const [position, setPosition] = React.useState('center');\n    const [collapsed, setCollapsed] = React.useState(true)\n    const [showElements, setShowElements] = React.useState(true)\n    const [workflowMasterName, setWorkflowMasterName] = React.useState('');\n    const [dependencySno, setDependencySno] = React.useState('');\n    const [alert, setAlert] = React.useState('');\n    const [workflowMasterCode, setWorkflowMasterCode] = React.useState('');\n    const [display, setDisplay] = React.useState('');\n    const [workflow, setWorkflow] = React.useState([]);\n    const [selectedWorkflow, setSelectedWorkflow] = React.useState(null);\n    const [type, setType] = React.useState('workflow');\n    const [formCodeState, setFormCodeState] = React.useState('');\n    const [form, setForm] = React.useState('');\n    const [domainId, setDomainId] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainId);\n    const [rolesAdmin, setRolesAdmin] = React.useState([]);\n    const [roles, setRoles] = React.useState([]);\n    const [userRoles, setUserRoles] = React.useState([]);\n    const [formsList, setFormsList] = React.useState([]);\n    const [fieldsList, setFieldsList] = React.useState([]);\n    const [selectedForm, setSelectedForm] = React.useState('');\n    const [selectedField, setSelectedField] = React.useState('');\n    const [processAccessRoles, setProcessAccessRoles] = React.useState([]);\n    const [xml, setXml] = React.useState([]);\n\n    const [businessObject, setBusinessObject] = React.useState(null);\n    const classes = useStyles();\n    const [modeler, setModeler] = React.useState(null);\n    const [activeIndex, setActiveIndex] = React.useState(null);\n    const [username, setUsername] = React.useState(localStorage.getItem('username'));\n    const [disableAddNewButton, setDisableAddNewButton] = React.useState('');\n    const [source, setSource] = React.useState('');\n    const [Indicator, setIndicator] = React.useState('');\n    const [forms, setForms] = React.useState([]);\n\n    const [operator1, setOperator1] = React.useState('');\n    const [workflowMasterCodeState, setWorkflowMasterCodeState] = React.useState('');\n    const [workflowMasterCodeError, setWorkflowMasterCodeError] = React.useState('');\n    const [workflowState, setWorkflowState] = React.useState('');\n    const [workflowError, setWorkflowError] = React.useState('');\n    const [workflowValid, setWorkflowValid] = React.useState('');\n    const [dependency, setDependency] = React.useState('');\n    const [dependencyId, setDependencyId] = React.useState('');\n    const [selectedDependency, setSelectedDependency] = React.useState([]);\n    const [dependencyName, setDependencyName] = React.useState('');\n    const [formFields, setFormFields] = React.useState([]);\n    const [percentage, setPercentage] = React.useState(false);\n    const [formValues, setFormValues] = React.useState([]);\n    const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n    const [displayMaximizable, setDisplayMaximizable] = React.useState(false);\n\n    useEffect(()=> {\n        var workflowsApi = [];\n        const workflow_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({domainId: domainId})\n        };\n        fetch(WORKFLOW_SERVICE + '/api/workflow/getAll',workflow_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                console.log(data);\n\n                data.map(item => {\n                    workflowsApi.push({\n                        value : item.id,\n                        label : item.name+\"-\"+item.version\n                    })})\n                setWorkflow(workflowsApi);\n                setDependency(workflowsApi);\n            });\n        const dependencyId = props.match.params.dependencyId\n        setDependencyId(props.match.params.dependencyId)\n\n\n\n        const dependency_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({id: dependencyId})\n        };\n        fetch(DEPENDENCY_SERVICE + '/api/auth/getById',dependency_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                const matrix = JSON.parse(data.matrix)\n                var process_list = JSON.parse(data.process_list)\n                console.log(process_list)\n                setDependencyName(matrix.name)\n                setDependencySno(matrix.sno)\n\n                var depend_list = []\n                var process_ids = []\n                var process_ids_list = []\n                var dependsOn = {}\n\n                var formValuesData = []\n                var process_index = 0;\n                process_list.map(depend => {\n                    var processId = depend.processId\n                    var process_index_string = process_index.toString()\n                    if(!process_ids.includes(processId)){\n\n                        process_ids.push(processId)\n                        var process_val = workflowsApi.filter(val => {return val.value === processId})\n                        process_ids_list.push(process_val[0])\n\n                        if(dependsOn.[process_index_string] === undefined){\n                            var process_val = workflowsApi.filter(val => {return val.value === depend.dependsOnId})\n                            dependsOn.[process_index_string] = [process_val[0]]\n\n                        }else{\n                            var process_val = workflowsApi.filter(val => {return val.value === depend.dependsOnId})\n\n                            dependsOn.[process_index_string] = [...dependsOn.[process_index_string], process_val[0]]\n\n                        }\n                        process_index ++\n                    }else{\n                        var index_process_id = process_ids.indexOf(processId).toString()\n\n                        var process_val = workflowsApi.filter(val => {return val.value === depend.dependsOnId})\n\n                        dependsOn.[index_process_id] = [...dependsOn.[index_process_id],  process_val[0]]\n                    }\n\n                })\n\n                process_ids_list.map((val, index)=>{\n                    var string_index = index.toString()\n                    formValuesData = [...formValuesData, { processId: val , dependOn: dependsOn.[string_index] }]\n\n                })\n\n                console.log(formValuesData)\n                setFormValues([...formValuesData])\n\n                /*var workflowsApi = [];\n                data.map(item => {\n                    workflowsApi.push({\n                        value : item.id,\n                        label : item.name+\"-\"+item.version\n                    })})\n                setWorkflow(workflowsApi);\n                setDependency(workflowsApi);*/\n            });\n\n        /* var model = new Modeler({\n           container: '#bpmnview',\n           propertiesPanel: {\n             parent: '#propview'\n           },\n           additionalModules: [\n             propertiesPanelModule,\n             propertiesProviderModule\n           ],\n           moddleExtensions: {\n             camunda: camundaModdleDescriptor\n           }\n\n         })*/\n\n        /* model.importXML(emptyBpmn, (error) => {\n           if (error) {\n             return console.log('fail import xml');\n           }\n           var  canvas = null;\n           canvas = model.get('canvas') ;\n           canvas.zoom('fit-viewport');\n          setBusinessObject(canvas._rootElement.businessObject);\n          setModeler(model)\n           // const data = canvas._rootElement.businessObject;\n           // console.log(data);\n         });*/\n    },[]);\n\n\n\n    let addFormFields = () => {\n        setFormValues([...formValues,{ processId: \"\", dependOn: [] }]);\n    };\n\n    let removeFormFields = (event, i) => {\n        event.preventDefault();\n        let newFormValues = [...formValues];\n        newFormValues.splice(i, 1);\n        setFormValues(newFormValues);\n    };\n    const dialogFuncMap = {\n\n        'displayMaximizable': setDisplayMaximizable,\n\n    }\n    const onClick = ( position) => {\n        dialogFuncMap['displayMaximizable'](true);\n        localStorage.setItem(\"processHistory\", forms)\n        if (position) {\n            setPosition(position);\n        }\n    }\n    const items = [\n        {label: 'Imprimer', icon: 'pi pi-print', command: () => {onClick()}},\n        {label: 'Imprimer (Navigateur)', icon: 'pi pi-print',\n            command: () => {\n                window.print()\n            }}\n    ];\n    const onHide = (name) => {\n        dialogFuncMap[`${name}`](false);\n    }\n    const  renderFooter = (name)=> {\n        return (\n            <div>\n                <Button label=\"Imprimer\" icon=\"pi pi-check\" onClick={() => printPage(name)} autoFocus />\n                <Button label=\"Annuler\" icon=\"pi pi-times\" onClick={() => onHide(name)} className=\"p-button-text\" />\n            </div>\n        );\n    }\n    const printPage = (e) => {\n        //  e.preventdefault();\n        var pdf1 = null;\n        const input = document.getElementById(\"divToPrint\");\n        /////setTimeout(() => input, 2000);\n        html2canvas(input, { useCORS: true }).then((canvas) => {\n            // let imgWidth = 210;\n            // let imgHeight = (canvas.height * imgWidth) / canvas.width ;\n            const imgData = canvas.toDataURL(\"img/png\");\n            /*\n  Here are the numbers (paper width and height) that I found to work.\n  It still creates a little overlap part between the pages, but good enough for me.\n  if you can find an official number from jsPDF, use them.\n  */\n            var imgWidth = 190;\n            var pageHeight = 295;\n            var imgHeight = canvas.height * imgWidth / canvas.width;\n            var heightLeft = imgHeight;\n\n            var doc = new jsPDF(\"p\", \"mm\", \"a4\");\n            var position = 0;\n\n            doc.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);\n            heightLeft -= pageHeight;\n\n            while (heightLeft >= 5) {\n                position = heightLeft - imgHeight;\n                doc.addPage();\n                doc.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);\n                heightLeft -= pageHeight;\n            }\n            pdf1 = doc.output(\"bloburl\");\n            // this.setState({ file: pdf1 });\n            //  document.getElementById(\"test\").src = pdf1;\n            document.getElementById(\"tab\").style.display = \"none\";\n            document.getElementById(\"test\").style.display = \"block\";\n\n            document.getElementById(\"test\").src = pdf1;\n\n            //   pdf.text(\"Octonyan loves jsPDF\", 35, 25);\n\n            //   pdf.addImage(Logo, \"PNG\", 0, 0, \"300px\", \"300px\");\n            // this.setState({ file: pdf.output(\"bloburl\") });\n\n            //  pdf.output(\"dataurlnewwindow\");\n            // pdf.save(\"download.pdf\");\n            // return pdf;\n        });\n\n\n\n    }\n\n    let icon;\n\n    return (\n        <>\n            <Toast ref={toast} />\n            <CCol xs=\"12\" sm=\"12\">\n                <CCard>\n\n                    <CCardHeader>\n                        <div className=\"m-subheader\">\n                            <div className=\"d-flex align-items-center\">\n                                <div className=\"mr-auto col-xs-6 \"><h4\n                                    className=\"m-subheader__title m-subheader__title--separator\"><span className=\"ng-tns-c2-0\">Aperçu de matrice de dépendance</span>\n                                </h4>              </div>\n                                <div className=\"card-header-actions\">\n                                    <CLink\n                                        style={{color: \"#716ACA\"}}\n                                        onClick={()=> props.history.push(\"/admin/dependencies/list\")}\n                                        rel=\"noreferrer noopener\"\n                                        target=\"_blank\"\n                                        className=\"c-subheader-nav-link\"\n                                    >\n                                        <i  size=\"2xl\" className=\"pi pi-arrow-left\" onClick={(event) => console.log(event)}></i>\n                                    </CLink>\n\n                                    <Menu model={items} popup ref={menu} />\n                                    <CLink className=\"c-subheader-nav-link\" style={{paddingLeft: \"15px\", paddingRight: \"20px\"}} >\n                                        <i  size=\"2xl\" className=\"pi pi-bars\" onClick={(event) => menu.current.toggle(event)}></i>\n                                    </CLink>\n                                </div>\n                            </div>\n                        </div>\n                    </CCardHeader>\n                    <CCardBody>\n                        <CForm  noValidate >\n                            <CFormGroup row className=\"my-0\">\n                                <CCol sm={12} md={6}>\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"dependencyId\">S No</CLabel>\n                                        <CInput id=\"dependencyId\"\n                            value={dependencySno} disabled />\n                                    </CFormGroup>\n                                </CCol>\n\n                                <CCol sm={12} md={6}>\n                                    <CFormGroup>\n                                        <CLabel htmlFor=\"dependencyName\"> Nom </CLabel>\n                                        <CInput id=\"dependencyName\" disabled\n                                                value={dependencyName}  />\n                                    </CFormGroup>\n                                </CCol>\n                            </CFormGroup>\n\n\n                            <CCard>\n                                <CCardHeader color=\"light\" >\n                                    Dépendance\n                                </CCardHeader>\n                                <CCardBody>\n                                    {formValues.map((element, index) => (\n                                        <div  key={index} style={{marginTop:\"10px\"}}>\n                                            <div  style={{ width: \"100%\", borderBottom: \"1px solid lightGray\"}}>\n                                                <CFormGroup row className=\"my-0\">\n\n                                                    <CCol sm={12} md={5}>\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"processus\">Processus</CLabel>\n                                                            <Select\n                                                                name=\"processus\"\n                                                                value={element.processId}\n\n                                                                disabled\n                                                            />\n                                                        </CFormGroup>\n                                                    </CCol>\n\n                                                    <CCol sm={12} md={5}>\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"source\">Dépend de</CLabel>\n                                                            <Select\n                                                                name=\"source\" value={element.dependOn}\n                                                                isMulti\n                                                                disabled\n                                                            />\n                                                        </CFormGroup>\n                                                    </CCol>\n\n                                                </CFormGroup>\n\n                                            </div>\n                                        </div>\n                                    ))\n                                    }\n\n                                </CCardBody>\n                            </CCard>\n                            {/* Card of the KPI*/}\n                            <CRow xs=\"4\">\n\n\n                                <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                                    <CButton block variant=\"outline\" color=\"danger\"\n                                             onClick={()=> props.history.push(\"/admin/dependencies/list\")}\n                                    ><Cancel />\n                                        Retourner</CButton>\n                                </CCol>\n\n                            </CRow>\n                        </CForm>\n                    </CCardBody>\n                </CCard>\n\n            </CCol>\n            <Dialog visible={displayMaximizable} maximizable modal  style={{ width: '70vw'}} footer={renderFooter('displayMaximizable')} onHide={() => onHide('displayMaximizable')}>\n                <DefaultPrint dependencyId={dependencyId} />\n            </Dialog>\n        </>\n    )\n}\nexport default withStyles({ ...useStyles}, { withTheme: true })(ViewDependencyMatrix) ;\n\n"],"sourceRoot":""}