{"version":3,"sources":["views/Administration/users/CreateUser.js","../node_modules/@material-ui/icons/esm/Save.js","../node_modules/@material-ui/icons/esm/Cancel.js"],"names":["CreateUser","props","useState","firstname","setFirstname","lastname","setLastname","email","setEmail","phone","setPhone","username","setUsername","usernameState","setUsernameState","usernameError","setUsernameError","lastnameState","setLastnameState","lastnameError","setLastnameError","firstnameError","setFirstnameError","firstnameState","setFirstnameState","repeatPassword","setRepeatPassword","repeatPasswordState","setRepeatPasswordState","repeatPasswordError","setRepeatPasswordError","emailState","setEmailState","emailError","setEmailError","phoneState","setPhoneState","phoneError","setPhoneError","passwordState","setPasswordState","passwordError","setPasswordError","password","setPassword","photo","setPhoto","React","JSON","parse","localStorage","getItem","domainId","domainName","usernameAdmin","useRef","userRoles","setUserRoles","selectedRoles","setSelectedRoles","useEffect","roles_data","method","headers","fetch","USER_SERVICE","then","response","json","data","rolesFromApi","selectedList","map","role","push","name","roleName","key","checked","default","catch","error","console","log","onRoleChange","e","_selectedRoles","value","i","length","splice","verifyLength","activeTab","variant","data-tab","noValidate","style","marginTop","row","className","sm","md","htmlFor","fontWeight","id","type","onChange","event","image","document","getElementById","files","target","exec","src","URL","createObjectURL","alert","loadFile","UserImage","width","invalid","requestOptions","body","stringify","Promise","resolve","reject","text","err","verifyUsername","valid","margin","inputId","some","item","position","xs","col","xl","block","color","onClick","fd","FormData","append","date","Date","getDate","request","url","formCodes","formCode","processDefinitionKey","startEvent","titreDutilisateur","nomDutilisateur","dateDinscription","prenom","nom","dateDeNaissance","departement","designation","domaine","statutDeLemploye","remarque","numeroDeTelephone","manager","address","etatDeContrat","user_data","history","processStart","createSvgIcon","d"],"mappings":"gVAmoBeA,UA3lBI,SAACC,GAAU,MAEYC,oBAAS,GAFrB,gCAGIA,oBAAS,IAHb,gCAIQA,mBAAS,KAJjB,mBAInBC,EAJmB,KAIRC,EAJQ,OAKMF,mBAAS,IALf,mBAKnBG,EALmB,KAKTC,EALS,OAMAJ,mBAAS,IANT,mBAMnBK,EANmB,KAMZC,EANY,OAOAN,mBAAS,IAPT,mBAOnBO,EAPmB,KAOZC,EAPY,OAQMR,mBAAS,IARf,mBAQnBS,EARmB,KAQTC,EARS,OASgBV,mBAAS,IATzB,mBASnBW,EATmB,KASJC,EATI,OAUgBZ,mBAAS,IAVzB,mBAUnBa,EAVmB,KAUJC,EAVI,OAWgBd,mBAAS,IAXzB,mBAWnBe,EAXmB,KAWJC,EAXI,OAYgBhB,mBAAS,IAZzB,mBAYnBiB,EAZmB,KAYJC,EAZI,OAakBlB,mBAAS,IAb3B,mBAanBmB,GAbmB,KAaHC,GAbG,QAckBpB,mBAAS,IAd3B,qBAcnBqB,GAdmB,MAcHC,GAdG,SAekBtB,mBAAS,IAf3B,qBAenBuB,GAfmB,MAeHC,GAfG,SAgB4BxB,mBAAS,IAhBrC,qBAgBnByB,GAhBmB,MAgBEC,GAhBF,SAiB4B1B,mBAAS,IAjBrC,qBAiBnB2B,GAjBmB,MAiBEC,GAjBF,SAkBU5B,mBAAS,IAlBnB,qBAkBnB6B,GAlBmB,MAkBPC,GAlBO,SAmBU9B,mBAAS,IAnBnB,qBAmBnB+B,GAnBmB,MAmBPC,GAnBO,SAoBUhC,mBAAS,IApBnB,qBAoBnBiC,GApBmB,MAoBPC,GApBO,SAqBUlC,mBAAS,IArBnB,qBAqBnBmC,GArBmB,MAqBPC,GArBO,SAsBgBpC,mBAAS,IAtBzB,qBAsBnBqC,GAtBmB,MAsBJC,GAtBI,SAuBgBtC,mBAAS,IAvBzB,qBAuBnBuC,GAvBmB,MAuBJC,GAvBI,SAwBMxC,mBAAS,IAxBf,qBAwBnByC,GAxBmB,MAwBTC,GAxBS,SAyBA1C,mBAAS,MAzBT,qBAyBnB2C,GAzBmB,MAyBZC,GAzBY,SA0BM5C,mBAAS,IA1Bf,qCA2BM6C,IAAM7C,SAAS8C,KAAKC,MAAMC,aAAaC,QAAQ,gBAAgBC,WA3BrE,qBA2BnBA,GA3BmB,gBA4BUL,IAAM7C,SAAS8C,KAAKC,MAAMC,aAAaC,QAAQ,gBAAgBE,aA5BzE,qBA4BnBA,GA5BmB,gBA6BgBN,IAAM7C,SAASgD,aAAaC,QAAQ,cA7BpD,qBA6BnBG,GA7BmB,gBA+BQpD,mBAAS,IA/BjB,qCAgCZqD,iBAAO,MACCA,iBAAO,MACKR,IAAM7C,SAAS,KAlCvB,qBAkCnBsD,GAlCmB,MAkCRC,GAlCQ,SAmCgBvD,qBAnChB,qBAmCnBwD,GAnCmB,MAmCJC,GAnCI,MAsC1BC,qBAAU,WACN,IAAMC,EAAa,CACfC,OAAQ,MACRC,QAAS,CACL,WAAYV,GACZ,eAAgB,mBAChB,cAAiB,UAAYH,aAAaC,QAAQ,mBAG1Da,MAAMC,IAAe,0BAA2BJ,GAC3CK,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,IAAIC,EAAe,GACfC,EAAe,GACnBF,EAAKG,KAAI,SAAAC,GACLH,EAAaI,KAAK,CACdC,KAAOF,EAAKG,SACZC,IAAMJ,EAAKG,SACXE,QAASL,EAAKM,WAEE,IAAjBN,EAAKM,SACJR,EAAaG,KAAK,CACdC,KAAOF,EAAKG,SACZC,IAAMJ,EAAKG,SACXE,QAASL,EAAKM,aAK1BpB,GAAiBY,GACjBd,GAAaa,MAEdU,OAAM,SAAAC,GACTC,QAAQC,IAAIF,QAGjB,IACH,IAAMG,GAAe,SAACC,GAClB,IAAIC,EAAc,YAAO5B,IAEzB,GAAI2B,EAAEP,QACFQ,EAAeZ,KAAKW,EAAEE,YAGtB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAeG,OAAQD,IAAK,CAG5C,GAFsBF,EAAeE,GAEnBX,MAAQQ,EAAEE,MAAMV,IAAK,CACnCS,EAAeI,OAAOF,EAAG,GACzB,OAKZ7B,GAAiB2B,IA2MfK,GAAe,SAACJ,EAAOE,GACzB,OAAIF,EAAME,QAAUA,GA+DxB,OACI,mCACA,eAAC,IAAD,WACI,cAAC,IAAD,UACI,mEAGJ,eAAC,IAAD,WACI,eAAC,KAAD,CAAOG,UAAU,OAAjB,UACI,eAAC,IAAD,CAAMC,QAAQ,OAAd,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAUC,WAAS,OAAnB,yCAIJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAUA,WAAS,OAAnB,wBAKR,eAAC,IAAD,WACI,cAAC,IAAD,CAAUA,WAAS,OAAnB,SACI,eAAC,IAAD,CAAQC,YAAU,EAACC,MAAO,CAACC,UAAW,QAAtC,UACI,eAAC,IAAD,CAAYC,KAAG,EAACC,UAAU,OAA1B,UACI,cAAC,IAAD,CAAMC,GAAI,GAAIC,GAAI,EAAlB,SACI,sBAAKF,UAAU,cAAf,UACI,wBAAOA,UAAU,SAASG,QAAQ,OAAlC,UACI,mBAAGN,MAAO,CAACO,WAAW,QAASJ,UAAU,iBACzC,sBAAMH,MAAO,CAACO,WAAW,QAAzB,gCAEJ,uBAAOC,GAAG,OAAOC,KAAK,OAAOC,SAAU,SAAAC,GAAK,OAjDrE,SAAUA,GACrB,IAAIC,EAAQC,SAASC,eAAe,UAC9BC,EAAQJ,EAAMK,OAAOD,MAGvB,+BAImBE,KAAKF,EAAM,GAAGpC,OAIjC7B,GAASiE,EAAM,IACfH,EAAMM,IAAMC,IAAIC,gBAAgBL,EAAM,IACtCjE,GAASiE,EAAM,KALfM,MAAO,mBAuCyEC,CAASX,MACzD,qBAAKO,IAAKK,IAAWf,GAAG,SACnBgB,MAAM,aAGnB,eAAC,IAAD,CAAMpB,GAAI,GAAIC,GAAI,EAAlB,UACI,qBAAKF,UAAU,MAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQG,QAAQ,WAAhB,iBACA,cAAC,IAAD,CAAQmB,QAA2B,UAAlBxG,EAA4BuF,GAAG,WACvCE,SAAU,SAAArB,GAEN/E,EAAY+E,EAAE2B,OAAOzB,OAClBI,GAAaN,EAAE2B,OAAOzB,MAAO,GAC5BrE,EAAiB,YAGjBA,EAAiB,SACjBE,EAAiB,8BAGzBmE,MAAOlF,IAChB,cAAC,IAAD,CAAkB8F,UAAU,aAA5B,SACKhF,SAIb,qBAAKgF,UAAU,MAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQG,QAAQ,YAAhB,uBACA,cAAC,IAAD,CAAQN,MAAO,CAACwB,MAAM,QAAShB,GAAG,YAC1BiB,QAA4B,UAAnBlG,GACTmF,SAAU,SAAArB,GAENjF,EAAaiF,EAAE2B,OAAOzB,OACnBI,GAAaN,EAAE2B,OAAOzB,MAAO,GAC5B/D,GAAkB,YAElBA,GAAkB,SAClBF,GAAkB,oCAG1BiE,MAAOpF,IACf,cAAC,IAAD,CAAkBgG,UAAU,aAA5B,SACK9E,gBAOrB,eAAC,IAAD,CAAY6E,KAAG,EAACC,UAAU,OAA1B,UACI,cAAC,IAAD,CAAMC,GAAI,GAAIC,GAAI,EAAlB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,QAAQ,WAAhB,+BACA,cAAC,IAAD,CACImB,QAA2B,UAAlB5G,GAA+C,UAAlBA,GAA+C,aAAlBA,EAA8B2F,GAAG,WACpGE,SAAU,SAAAC,GACN/F,EAAY+F,EAAMK,OAAOzB,OACtBI,GAAagB,EAAMK,OAAOzB,MAAO,IAChCzE,EAAiB,WAnJ9C,SAACH,GACpB,IAAM+G,EAAiB,CACnB5D,OAAQ,OACRC,QAAS,CACL,WAAYV,GACZ,eAAgB,mBAChB,cAAiB,UAAUH,aAAaC,QAAQ,kBAEpDwE,KAAM3E,KAAK4E,UAAU,CAACjH,SAAUA,KAGpCqD,MAAMC,IAAe,2BAA4ByD,GAC5CxD,MAAK,SAAAC,GACF,OAAO,IAAI0D,SAAQ,SAACC,EAASC,GACzB5D,EAAS6D,OAAO9D,MAAK,SAAAyD,GACjBG,EACIH,EAAKlC,OAASzC,KAAKC,MAAM0E,GAAQ,SAEtC3C,OAAM,SAAAiD,GACLF,EAAOE,YAIlB/D,MAAK,SAAAG,GAEW,OAATA,EACAvD,EAAiB,YAEjBA,EAAiB,UACjBE,EAAiB,uCAGxBgE,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAmH4BiD,CAAgBvB,EAAMK,OAAOzB,SAE7BzE,EAAiB,SACjBE,EAAiB,8CAI7B,cAAC,IAAD,CAAkBmF,UAAU,aAA5B,SACKpF,SAIb,cAAC,IAAD,CAAMqF,GAAI,GAAIC,GAAI,EAAlB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,QAAQ,QAAhB,mBACA,cAAC,IAAD,CAAQE,GAAG,QACHiB,QAAwB,UAAf1F,GACT2E,SAAU,SAAArB,GAEN7E,EAAS6E,EAAE2B,OAAOzB,OACfI,GAAaN,EAAE2B,OAAOzB,MAAO,GAC5BvD,GAAc,YAEdA,GAAc,SACdE,GAAc,wCAItBqD,MAAOhF,IACf,cAAC,IAAD,CAAkB4F,UAAU,aAA5B,SACKlE,aAKjB,eAAC,IAAD,CAAYiE,KAAG,EAACC,UAAU,OAA1B,UAEI,cAAC,IAAD,CAAMC,GAAI,GAAIC,GAAI,EAAlB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,QAAQ,QAAhB,6BACA,cAAC,IAAD,CAAQE,GAAG,QACHiB,QAAwB,UAAftF,GACTuE,SAAU,SAAArB,GAEN3E,EAAS2E,EAAE2B,OAAOzB,OACfI,GAAaN,EAAE2B,OAAOzB,MAAO,GAC5BnD,GAAc,YAEdA,GAAc,SACdE,GAAc,8DAGtBiD,MAAO9E,IACf,cAAC,IAAD,CAAkB0F,UAAU,aAA5B,SACK9D,UAIb,cAAC,IAAD,CAAM+D,GAAI,GAAIC,GAAI,EAAlB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,QAAQ,WAAhB,0BACA,cAAC,IAAD,CAAQE,GAAG,WAAWC,KAAK,WACnBgB,QAA2B,UAAlBlF,GACTmE,SAAU,SAAArB,GAENzC,GAAYyC,EAAE2B,OAAOzB,OAClBI,GAAaN,EAAE2B,OAAOzB,MAAO,GAC5B/C,GAAiB,YAEjBA,GAAiB,SACjBE,GAAiB,wCAGzB6C,MAAO5C,KACf,cAAC,IAAD,CAAkBwD,UAAU,aAA5B,SACK1D,UAIb,cAAC,IAAD,CAAM2D,GAAI,GAAIC,GAAI,EAAlB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,QAAQ,WAAhB,uCACA,cAAC,IAAD,CAAQE,GAAG,kBAAkBC,KAAK,WAC1BgB,QAAiC,UAAxB9F,GACTwG,MAA+B,YAAxBxG,GACP+E,SAAU,SAAArB,GAEN3D,GAAkB2D,EAAE2B,OAAOzB,OACxB5C,KAAa0C,EAAE2B,OAAOzB,MACrB3D,GAAuB,YAEvBA,GAAuB,SACvBE,GAAuB,6BAG/ByD,MAAO9D,KACf,cAAC,IAAD,CAAkB0E,UAAU,aAA5B,SACKtE,kBAiBzB,cAAC,IAAD,CAAUiE,WAAS,OAAnB,SACI,cAAC,IAAD,UAEQtC,GAAUgB,KAAI,SAACC,GACX,OACI,sBAAoB0B,UAAU,iBAAiBH,MAAO,CAACoC,OAAO,QAA9D,UACI,cAAC,WAAD,CAAWC,QAAS5D,EAAKI,IAAKF,KAAK,OAAOY,MAAOd,EAAMiC,SAAUtB,GAAcN,QAASpB,GAAc4E,MAAK,SAACC,GAAD,OAAUA,EAAK1D,MAAQJ,EAAKI,SACvI,wBAAOmB,MAAO,CAACwC,SAAU,YAAalC,QAAS7B,EAAKI,IAApD,kBAAiEJ,EAAKE,UAFhEF,EAAKI,kBAavC,eAAC,IAAD,CAAM4D,GAAG,IAAIzC,MAAO,CAACC,UAAW,QAAhC,UAEI,cAAC,IAAD,CAAMyC,IAAI,IAAItC,GAAG,IAAIC,GAAG,IAAIsC,IAAE,EAACxC,UAAU,eAAzC,SACI,eAAC,IAAD,CAASyC,OAAK,EAAC/C,QAAQ,UAAUgD,MAAM,OAAOrC,GAAG,eAAesC,QA7cvE,WAuCjB,GAvBsB,KAAlBjI,GACAC,EAAiB,SAEE,KAAnBS,IACAC,GAAkB,SAEA,KAAlBP,GACAC,EAAiB,SAEF,KAAfiB,IACAC,GAAc,SAEC,KAAfL,IACAC,GAAc,SAEI,KAAlBO,IACAC,GAAiB,SAEO,KAAxBb,IACAC,GAAuB,SAIP,YAAhBf,GAA8C,YAAjBU,IAA8C,YAAhBN,GAC3C,YAAbkB,IAAuC,YAAbJ,IACb,YAAhBQ,IAAmD,YAAtBZ,GAC5B,CACD,IAAMoH,EAAK,IAAIC,SACf,GAAa,OAAVnG,GAAe,CACdkG,EAAGE,OAAO,QAASpG,GAAOA,GAAM8B,MAChCoE,EAAGE,OAAO,WAAY7F,IACtB2F,EAAGE,OAAO,aAAc5F,IACxB0F,EAAGE,OAAO,WAAY3F,IAGtB,IAAMe,EAAO,CACTP,OAAQ,OACRC,QAAQ,CACJ,WAAYV,GACZ,cAAiB,UAAYH,aAAaC,QAAQ,kBAEtDwE,KAAMoB,GAGNG,GADU,IAAIC,MACCC,UACnBpF,MAAMC,IAAa,wBAAyBI,GACvCH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GACH,IAAMgF,EAAU,CAAEhG,WAAYA,GAAYD,SAAUA,GAAUkG,IAAMjF,EAAKiF,IACrE3I,SAAUA,EAAUR,UAAWA,EAAWE,SAAUA,EACpDE,MAAOA,EAAOE,MAAOA,EAAOoC,MAAOkG,EAAIrF,cAAcA,GACrDf,SAAUA,GACV4G,UAAW,CAAC,CAACC,SAAU,YACvBC,qBAAsB,sBACtBC,WAAY,CAAC,CAAEC,kBAAmB,GAC9BC,gBAAiBjJ,EACjBkJ,iBAAiBX,EAAMY,OAAQ3J,EAC/B4J,IAAK1J,EACL2J,gBAAiB,GACjBC,YAAa,GACbC,YAAa,GACbC,QAAS,GACTC,iBAAiB,GACjB7J,MAAOA,EACP8J,SAAU,GACVC,kBAAmB7J,EACnB8J,QAAS,GACTC,QAAS,GACTC,cAAe,GACf9H,SAAUA,MAIZ+H,EAAY,CACd5G,OAAQ,OACRC,QAAS,CACL,WAAYV,GACZ,eAAgB,mBAChB,cAAiB,UAAUH,aAAaC,QAAQ,kBACpDwE,KAAM3E,KAAK4E,UAAUyB,IAEzBrF,MAAMC,IAAe,qBAAsByG,GACtCxG,MAAK,SAAAC,GACFe,QAAQC,IAAIhB,MAEpBlE,EAAM0K,QAAQjG,KAAK,2BAG1B,CACD,IAAM2E,EAAU,CAAEhG,WAAYA,GAAYD,SAAUA,GAAUkG,IAAM,GAChE3I,SAAUA,EAAUR,UAAWA,EAAWE,SAAUA,EACpDE,MAAOA,EAAOE,MAAOA,EAAOoC,MAAOkG,EAAIrF,cAAcA,GACrDf,SAAUA,GACViI,aAAa,CACTvH,WAAYA,GAAYD,SAAUA,GAClCmG,UAAW,CAAC,CAACC,SAAU,YACvBC,qBAAsB,sBACtBC,WAAY,CAAC,CACTC,kBAAmB,GACnBC,gBAAiBjJ,EACjBkJ,iBAAiBX,EAAMY,OAAQ3J,EAC/B4J,IAAK1J,EACL2J,gBAAiB,GACjBC,YAAa,GACbxJ,MAAOA,EACPyJ,YAAa,GACbC,QAAS,GACTC,iBAAiB,GACjB7J,MAAOA,EACP8J,SAAU,GACVC,kBAAmB7J,EACnB8J,QAAS,GACTC,QAAS,GACTC,cAAe,GACf9H,SAAUA,OAMhB+H,EAAY,CACd5G,OAAQ,OACRC,QAAS,CACL,WAAYV,GACZ,eAAgB,mBAChB,cAAiB,UAAUH,aAAaC,QAAQ,kBACpDwE,KAAM3E,KAAK4E,UAAUyB,IAEzBrF,MAAMC,IAAe,qBAAsByG,GACtCxG,MAAK,SAAAC,GACFe,QAAQC,IAAIhB,MAEpBlE,EAAM0K,QAAQjG,KAAK,uBAyTH,UAAuF,cAAC,IAAD,IAAvF,mBAEJ,cAAC,IAAD,CAAMgE,IAAI,IAAItC,GAAG,IAAIC,GAAG,IAAIsC,IAAE,EAACxC,UAAU,eAAzC,SACI,eAAC,IAAD,CAASyC,OAAK,EAAC/C,QAAQ,UAAUgD,MAAM,SAC9BC,QAAS,kBAAK7I,EAAM0K,QAAQjG,KAAK,qBAD1C,UAC+D,cAAC,IAAD,IAD/D,4B,iCCvnB5B,qBAEemG,gBAA4B9H,gBAAoB,OAAQ,CACrE+H,EAAG,mJACD,S,iCCJJ,qBAEeD,gBAA4B9H,gBAAoB,OAAQ,CACrE+H,EAAG,oLACD,W","file":"static/js/56.d4806d57.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n// import { Form, Field } from 'react-final-form';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Calendar } from 'primereact/calendar';\nimport { Password } from 'primereact/password';\nimport { Checkbox } from 'primereact/checkbox';\nimport { Dialog } from 'primereact/dialog';\nimport { Divider } from 'primereact/divider';\nimport { classNames } from 'primereact/utils';\nimport { Toast } from 'primereact/toast';\nimport { FileUpload } from 'primereact/fileupload';\nimport { ProgressBar } from 'primereact/progressbar';\nimport { Tooltip } from 'primereact/tooltip';\nimport { Tag } from 'primereact/tag';\nimport './img css/imgStyle.scss';\nimport axios from 'axios';\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CInput,\n    CInvalidFeedback,\n    CValidFeedback,\n    CLabel, CNav, CNavItem, CNavLink,\n    CRow, CTabContent, CTabPane, CTabs\n} from \"@coreui/react\";\nimport Select from \"@material-ui/core/Select\";\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {SERVER_URL, USER_SERVICE, PROFILE_IMG_UPLOAD_URL} from \"../../../constants\";\nimport UserImage from \"./img/user.png\"\nimport Editor from \"@monaco-editor/react\";\n// import { CountryService } from '../service/CountryService';\n//import './FormDemo.css';\n\nconst CreateUser = (props) => {\n    // const [countries, setCountries] = useState([]);\n    const [showMessage, setShowMessage] = useState(false);\n    const [checked, setChecked] = useState(false);\n    const [firstname, setFirstname] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [usernameState, setUsernameState] = useState(\"\");\n    const [usernameError, setUsernameError] = useState(\"\");\n    const [lastnameState, setLastnameState] = useState(\"\");\n    const [lastnameError, setLastnameError] = useState(\"\");\n    const [firstnameError, setFirstnameError] = useState(\"\");\n    const [firstnameState, setFirstnameState] = useState(\"\");\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\n    const [repeatPasswordState, setRepeatPasswordState] = useState(\"\");\n    const [repeatPasswordError, setRepeatPasswordError] = useState(\"\");\n    const [emailState, setEmailState] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\");\n    const [phoneState, setPhoneState] = useState(\"\");\n    const [phoneError, setPhoneError] = useState(\"\");\n    const [passwordState, setPasswordState] = useState(\"\");\n    const [passwordError, setPasswordError] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [photo, setPhoto] = useState(null);\n    const [formData, setFormData] = useState({});\n    const [domainId, setDomainId] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainId);\n    const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n    const [usernameAdmin, setUsernameAdmin] = React.useState(localStorage.getItem('username'));\n    // const countryservice = new CountryService();\n    const [totalSize, setTotalSize] = useState(0);\n    const toast = useRef(null);\n    const fileUploadRef = useRef(null);\n    const [userRoles, setUserRoles] = React.useState([]);\n    const [selectedRoles, setSelectedRoles] = useState();\n\n\n    useEffect(() => {\n        const roles_data = {\n            method: 'GET',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n            }\n        };\n        fetch(USER_SERVICE + \"/api/auth/role/getRoles\", roles_data)\n            .then((response) => {\n                return response.json();\n            })\n            .then(data => {\n                var rolesFromApi = [];\n                var selectedList = [];\n                data.map(role => {\n                    rolesFromApi.push({\n                        name : role.roleName,\n                        key : role.roleName,\n                        checked: role.default\n                    })\n                    if(role.default === true ){\n                        selectedList.push({\n                            name : role.roleName,\n                            key : role.roleName,\n                            checked: role.default\n                        })\n                    }\n                })\n\n                setSelectedRoles(selectedList);\n                setUserRoles(rolesFromApi);\n\n            }).catch(error => {\n            console.log(error);\n        });\n\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n    const onRoleChange = (e) => {\n        let _selectedRoles = [...selectedRoles];\n\n        if (e.checked) {\n            _selectedRoles.push(e.value);\n        }\n        else {\n            for (let i = 0; i < _selectedRoles.length; i++) {\n                const selectedRoles = _selectedRoles[i];\n\n                if (selectedRoles.key === e.value.key) {\n                    _selectedRoles.splice(i, 1);\n                    break;\n                }\n            }\n        }\n\n        setSelectedRoles(_selectedRoles);\n    }\n    const validate = (data) => {\n        let errors = {};\n\n        if (!data.name) {\n            errors.name = 'Name is required.';\n        }\n\n        if (!data.email) {\n            errors.email = 'Email is required.';\n        }\n        else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(data.email)) {\n            errors.email = 'Invalid email address. E.g. example@email.com';\n        }\n\n        if (!data.password) {\n            errors.password = 'Password is required.';\n        }\n\n        if (!data.accept) {\n            errors.accept = 'You need to agree to the terms and conditions.';\n        }\n\n        return errors;\n    };\n\n    const onSubmit = (data, form) => {\n        setFormData(data);\n        setShowMessage(true);\n\n        form.restart();\n    };\nconst handleSubmit = ()=>{\n    // event.preventDefault();\n\n\n\n   /* const fd = new FormData();\n    fd.append('image', photo, photo.name);\n*/\n\n   /* const data = {\n        method: 'POST',\n        headers: {\n            \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n        body:  fd\n    };*/\n\n    if (usernameState === \"\") {\n        setUsernameState(\"error\");\n    }\n    if (firstnameState === \"\") {\n        setFirstnameState(\"error\");\n    }\n    if (lastnameState === \"\") {\n        setLastnameState(\"error\");\n    }\n    if (phoneState === \"\") {\n        setPhoneState(\"error\");\n    }\n    if (emailState === \"\") {\n        setEmailState(\"error\");\n    }\n    if (passwordState === \"\") {\n        setPasswordState(\"error\");\n    }\n    if (repeatPasswordState === \"\") {\n        setRepeatPasswordState(\"error\");\n    }\n\n\n    if (usernameState===\"success\" && firstnameState===\"success\" && lastnameState===\"success\"\n        && phoneState===\"success\" && emailState===\"success\" &&\n        passwordState===\"success\" && repeatPasswordState===\"success\"\n        ){\n        const fd = new FormData();\n        if(photo !== null){\n            fd.append('image', photo, photo.name);\n            fd.append('domainId', domainId);\n            fd.append('domainName', domainName);\n            fd.append('username', usernameAdmin);\n\n\n            const data = {\n                method: 'POST',\n                headers:{\n                    \"X-Tenant\": domainName,\n                    \"Authorization\": \"Bearer \" + localStorage.getItem('Authorization')\n                },\n                body: fd\n            };\n            let newDate = new Date()\n            var date = newDate.getDate();\n            fetch(USER_SERVICE+\"/api/auth/user/upload\", data)\n                .then(response => response.json())\n                .then( data =>{\n                    const request = { domainName: domainName, domainId: domainId, url : data.url,\n                        username: username, firstname: firstname, lastname: lastname,\n                        email: email, phone: phone, photo: fd, selectedRoles:selectedRoles,\n                        password: password,\n                        formCodes: [{formCode: \"FORRC14\"}],\n                        processDefinitionKey: \"Process_Recrutement\",\n                        startEvent: [{ titreDutilisateur: \"\",\n                            nomDutilisateur: username,\n                            dateDinscription:date, prenom: firstname,\n                            nom: lastname,\n                            dateDeNaissance: \"\",\n                            departement: \"\",\n                            designation: \"\",\n                            domaine: \"\",\n                            statutDeLemploye:\"\",\n                            email: email,\n                            remarque: \"\",\n                            numeroDeTelephone: phone,\n                            manager: \"\",\n                            address: \"\",\n                            etatDeContrat: \"\",\n                            password: password\n                        }]\n                    }\n\n                    const user_data = {\n                        method: 'POST',\n                        headers: {\n                            \"X-Tenant\": domainName,\n                            'Content-Type': 'application/json',\n                            \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n                        body: JSON.stringify(request)\n                    };\n                    fetch(USER_SERVICE + \"/api/auth/user/add\", user_data)\n                        .then(response => {\n                            console.log(response)\n                        })\n                    props.history.push(\"/admin/user/list\");\n                    //send all data + url to the api to create new user\n                })\n        }else{\n            const request = { domainName: domainName, domainId: domainId, url : \"\",\n                username: username, firstname: firstname, lastname: lastname,\n                email: email, phone: phone, photo: fd, selectedRoles:selectedRoles,\n                password: password,\n                processStart:{\n                    domainName: domainName, domainId: domainId,\n                    formCodes: [{formCode: \"FORRC14\"}],\n                    processDefinitionKey: \"Process_Recrutement\",\n                    startEvent: [{\n                        titreDutilisateur: \"\",\n                        nomDutilisateur: username,\n                        dateDinscription:date, prenom: firstname,\n                        nom: lastname,\n                        dateDeNaissance: \"\",\n                        departement: \"\",\n                        phone: phone,\n                        designation: \"\",\n                        domaine: \"\",\n                        statutDeLemploye:\"\",\n                        email: email,\n                        remarque: \"\",\n                        numeroDeTelephone: phone,\n                        manager: \"\",\n                        address: \"\",\n                        etatDeContrat: \"\",\n                        password: password\n                    }]\n                }\n\n            }\n\n            const user_data = {\n                method: 'POST',\n                headers: {\n                    \"X-Tenant\": domainName,\n                    'Content-Type': 'application/json',\n                    \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n                body: JSON.stringify(request)\n            };\n            fetch(USER_SERVICE + \"/api/auth/user/add\", user_data)\n                .then(response => {\n                    console.log(response)\n                })\n            props.history.push(\"/admin/user/list\");\n        }\n\n\n\n    }\n\n  /*  fetch(\"http://localhost:8082/api/auth/upload\", data)\n        .then(response => {\n            console.log(response)\n        })*/\n\n}\n\n\n\n    const onUpload = () => {\n        toast.current.show({severity: 'info', summary: 'Success', detail: 'File Uploaded'});\n    }\n\n\n\n    const verifyLength = (value, length) => {\n        if (value.length >= length) {\n            return true;\n        }\n        return false;\n    };\n\n\n    const verifyUsername = (username) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')\n            },\n            body: JSON.stringify({username: username})\n        };\n\n        fetch(USER_SERVICE + '/api/auth/verifyUsername', requestOptions)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data =>\n            {\n                if (data === null) {\n                    setUsernameState(\"success\");\n                } else {\n                    setUsernameState(\"existe\");\n                    setUsernameError(\"Nom d'utilisateur indisponible!\")\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n\n    var loadFile = function (event) {\n        var image = document.getElementById(\"output\");\n        const files = event.target.files\n        // Allowing file type\n        const allowedExtensions =\n            /(\\.jpg|\\.jpeg|\\.png|\\.gif)$/i;\n\n        /*let reader = new FileReader();\n        reader.readAsDataURL(files[0] )*/\n        if (!allowedExtensions.exec(files[0].name)) {\n            alert( \"Format invalid!\")\n        }\n        else {\n            setPhoto(files[0])\n            image.src = URL.createObjectURL(files[0]);\n            setPhoto(files[0])\n        }\n    };\n    return (\n        <>\n        <CCard>\n            <CCardHeader>\n                <h3>Créer un nouveau utilisateur</h3>\n            </CCardHeader>\n\n            <CCardBody>\n                <CTabs activeTab=\"user\">\n                    <CNav variant=\"tabs\">\n                        <CNavItem>\n                            <CNavLink data-tab=\"user\">\n                                Information d'utilisateur\n                            </CNavLink>\n                        </CNavItem>\n                        <CNavItem>\n                            <CNavLink data-tab=\"role\">\n                                Roles\n                            </CNavLink>\n                        </CNavItem>\n                    </CNav>\n                    <CTabContent>\n                        <CTabPane data-tab=\"user\">\n                            <CForm  noValidate style={{marginTop: \"20px\"}}>\n                                <CFormGroup row className=\"my-0\">\n                                    <CCol sm={12} md={6}>\n                                        <div className=\"profile-pic\" >\n                                            <label className=\"-label\" htmlFor=\"file\" >\n                                                <i style={{fontWeight:\"bold\"}} className=\"pi pi-camera\"></i>\n                                                <span style={{fontWeight:\"bold\"}}>Changer l'image</span>\n                                            </label>\n                                            <input id=\"file\" type=\"file\" onChange={event => loadFile(event)} />\n                                            <img src={UserImage} id=\"output\"\n                                                 width=\"200\"/>\n                                        </div>\n                                    </CCol>\n                                    <CCol sm={12} md={6}>\n                                        <div className=\"row\">\n                                            <CFormGroup>\n                                                <CLabel htmlFor=\"lastname\">Nom</CLabel>\n                                                <CInput invalid={lastnameState === \"error\" } id=\"lastname\"\n                                                         onChange={e =>\n                                                         {\n                                                             setLastname(e.target.value)\n                                                             if(verifyLength(e.target.value, 3) ){\n                                                                 setLastnameState(\"success\");\n\n                                                             } else {\n                                                                 setLastnameState(\"error\");\n                                                                 setLastnameError(\"Le nom est obligatoire !\")\n                                                             }\n                                                         }}\n                                                         value={lastname} />\n                                                <CInvalidFeedback className=\"help-block\">\n                                                    {lastnameError}\n                                                </CInvalidFeedback>\n                                            </CFormGroup>\n                                        </div>\n                                        <div className=\"row\">\n                                            <CFormGroup>\n                                                <CLabel htmlFor=\"firstname\">Prénom</CLabel>\n                                                <CInput style={{width:\"100%\"}} id=\"firstname\"\n                                                        invalid={firstnameState === \"error\" }\n                                                        onChange={e =>\n                                                        {\n                                                            setFirstname(e.target.value)\n                                                            if(verifyLength(e.target.value, 3) ){\n                                                                setFirstnameState(\"success\");\n                                                            } else {\n                                                                setFirstnameState(\"error\");\n                                                                setFirstnameError(\"Le prénom est obligatoire !\")\n                                                            }\n                                                        }}\n                                                        value={firstname} />\n                                                <CInvalidFeedback className=\"help-block\">\n                                                    {firstnameError}\n                                                </CInvalidFeedback>\n                                            </CFormGroup>\n                                        </div>\n                                    </CCol>\n                                </CFormGroup>\n\n                                <CFormGroup row className=\"my-0\">\n                                    <CCol sm={12} md={6}>\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"username\">Nom d'utilisateur</CLabel>\n                                            <CInput\n                                                invalid={usernameState === \"error\" || usernameState === \"exist\" || usernameState === \"notValid\"} id=\"username\"\n                                                onChange={event => {\n                                                    setUsername(event.target.value)\n                                                    if(verifyLength(event.target.value, 3) ){\n                                                        setUsernameState(\"success\");\n                                                        verifyUsername( event.target.value)\n                                                    } else {\n                                                        setUsernameState(\"error\");\n                                                        setUsernameError(\"Le nom d'utilisateur est obligatoire !\")\n                                                    }\n                                                }}\n                                            />\n                                            <CInvalidFeedback className=\"help-block\">\n                                                {usernameError}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol sm={12} md={6}>\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"email\">Email</CLabel>\n                                            <CInput id=\"email\"\n                                                    invalid={emailState === \"error\" }\n                                                    onChange={e =>\n                                                    {\n                                                        setEmail(e.target.value)\n                                                        if(verifyLength(e.target.value, 3) ){\n                                                            setEmailState(\"success\");\n                                                        } else {\n                                                            setEmailState(\"error\");\n                                                            setEmailError(\"L'adresse email  est obligatoire !\")\n                                                        }\n                                                    }}\n\n                                                    value={email} />\n                                            <CInvalidFeedback className=\"help-block\">\n                                                {emailError}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                </CFormGroup>\n                                <CFormGroup row className=\"my-0\">\n\n                                    <CCol sm={12} md={6}>\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"phone\">Téléphone</CLabel>\n                                            <CInput id=\"phone\"\n                                                    invalid={phoneState === \"error\" }\n                                                    onChange={e =>\n                                                    {\n                                                        setPhone(e.target.value)\n                                                        if(verifyLength(e.target.value, 3) ){\n                                                            setPhoneState(\"success\");\n                                                        } else {\n                                                            setPhoneState(\"error\");\n                                                            setPhoneError(\"Le numéro de téléphone email  est obligatoire !\")\n                                                        }\n                                                    }}\n                                                    value={phone}  />\n                                            <CInvalidFeedback className=\"help-block\">\n                                                {phoneError}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol sm={12} md={6}>\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"password\">Mot de passe</CLabel>\n                                            <CInput id=\"password\" type=\"password\"\n                                                    invalid={passwordState === \"error\" }\n                                                    onChange={e =>\n                                                    {\n                                                        setPassword(e.target.value)\n                                                        if(verifyLength(e.target.value, 3) ){\n                                                            setPasswordState(\"success\");\n                                                        } else {\n                                                            setPasswordState(\"error\");\n                                                            setPasswordError(\"Le mot de passe  est obligatoire !\")\n                                                        }\n                                                    }}\n                                                    value={password} />\n                                            <CInvalidFeedback className=\"help-block\">\n                                                {passwordError}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol sm={12} md={6}>\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"password\">Confirmer le mot de passe</CLabel>\n                                            <CInput id=\"repeat_password\" type=\"password\"\n                                                    invalid={repeatPasswordState === \"error\" }\n                                                    valid={repeatPasswordState === \"success\"}\n                                                    onChange={e =>\n                                                    {\n                                                        setRepeatPassword(e.target.value)\n                                                        if(password === e.target.value ){\n                                                            setRepeatPasswordState(\"success\");\n                                                        } else {\n                                                            setRepeatPasswordState(\"error\");\n                                                            setRepeatPasswordError(\"Mot de passe invalide !\")\n                                                        }\n                                                    }}\n                                                    value={repeatPassword} />\n                                            <CInvalidFeedback className=\"help-block\">\n                                                {repeatPasswordError}\n                                            </CInvalidFeedback>\n\n                                        </CFormGroup>\n                                    </CCol>\n                                    {/*<CCol sm={12} md={6}>\n                        <div className=\"p-field-checkbox\">\n                            <Checkbox inputId=\"default\" name=\"defaut\" value=\"defaut\" onChange={e => setChecked(e.checked)} checked={checked} />\n                            <label htmlFor=\"default\"> Defaut</label>\n\n                        </div>\n                        </CCol>*/}\n\n                                </CFormGroup>\n                            </CForm>\n\n                        </CTabPane>\n                        <CTabPane data-tab=\"role\">\n                            <CCardBody>\n                                {\n                                    userRoles.map((role) => {\n                                        return (\n                                            <div key={role.key} className=\"field-checkbox\" style={{margin:\"10px\"}}>\n                                                <Checkbox  inputId={role.key} name=\"role\" value={role} onChange={onRoleChange} checked={selectedRoles.some((item) => item.key === role.key)} />\n                                                <label style={{position: \"absolute\"}} htmlFor={role.key}> &nbsp;{role.name}</label>\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </CCardBody>\n                        </CTabPane>\n                    </CTabContent>\n                </CTabs>\n\n\n                    <CRow xs=\"4\" style={{marginTop: \"50px\"}}>\n\n                        <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                            <CButton block variant=\"outline\" color=\"info\" id=\"workflowSave\" onClick={handleSubmit}><Save/> Enregister</CButton>\n                        </CCol>\n                        <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                            <CButton block variant=\"outline\" color=\"danger\"\n                                     onClick={()=> props.history.push(\"/admin/user/list\")}><Cancel />\n                                Annuler</CButton>\n                        </CCol>\n\n                    </CRow>\n            </CCardBody>\n        </CCard>\n        </>\n\n    );\n}\nexport default CreateUser","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');"],"sourceRoot":""}