{"version":3,"sources":["views/Administration/workflowBuilder/EditWorkflow.js","assets/bpmn/empty.bpmn.jsx"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","withStyles","withTheme","props","React","useState","workflowName","setWorkflowName","JSON","parse","localStorage","getItem","domainId","roles","setRoles","userRoles","setUserRoles","setBusinessObject","workflow","setWorkflow","workflowRoles","setWorkflowRoles","modeler","setModeler","domainName","classes","useEffect","get_header","method","headers","fetch","USER_SERVICE","then","response","json","data","rolesFromApi","map","role","push","key","roleId","value","roleName","id","catch","error","console","log","workflowId","match","params","workflow_data","body","stringify","WORKFLOW_SERVICE","Promise","resolve","reject","text","length","err","workflow_val","selectedRoles","name","adaptedRoles","model","Modeler","container","propertiesPanel","parent","additionalModules","propertiesPanelModule","propertiesProviderModule","moddleExtensions","camunda","camundaModdleDescriptor","importXML","xml","canvas","get","zoom","_rootElement","businessObject","xs","sm","noValidate","row","className","htmlFor","sno","disabled","onChange","e","target","version","color","labelId","multiple","input","renderValue","selected","onMouseDown","event","stopPropagation","icon","label","onDelete","chipToDelete","filter","handleDelete","expandable","borderColor","height","float","overflowX","backgroundColor","onClick","workflowVersion","saveXML","format","history","emptyBpmn","result","characters","charactersLength","i","charAt","Math","floor","random","join","makeid"],"mappings":"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","file":"static/js/85.2e4ab576.chunk.js","sourcesContent":["\nimport React, {useEffect} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CInput, CSelect,\n  CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { DocsLink } from 'src/reusable'\nimport { Link } from 'react-router-dom'\nimport {FormBuilder} from 'react-formio';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport {emptyBpmn} from \"../../../assets/bpmn/empty.bpmn\";\nimport 'bpmn-js-properties-panel/dist/assets/bpmn-js-properties-panel.css';\nimport Modeler from \"bpmn-js/lib/Modeler\";\nimport camundaModdleDescriptor from 'camunda-bpmn-moddle/resources/camunda';\nimport propertiesPanelModule from \"bpmn-js-properties-panel\";\nimport propertiesProviderModule from \"bpmn-js-properties-panel/lib/provider/camunda\";\nimport 'bpmn-js/dist/assets/diagram-js.css';\nimport 'bpmn-font/dist/css/bpmn-embedded.css';\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\"; \nimport Input from \"@material-ui/core/Input\";\nimport {SERVER_URL, USER_SERVICE, WORKFLOW_SERVICE} from \"../../../constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    marginLeft: 0+'px !important',\n    minWidth: 220,\n    maxWidth: 300,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst EditWorkflow = (props) => {\n  const [collapsed, setCollapsed] = React.useState(true)\n  const [showElements, setShowElements] = React.useState(true)\n  const [workflowName, setWorkflowName] = React.useState('');\n  const [Alert, setAlert] = React.useState('');\n  const [workflowVersion, setWorkflowVersion] = React.useState('');\n  const [display, setDisplay] = React.useState('');\n  const [workflowId, setWorkflowId] = React.useState('');\n  const [type, setType] = React.useState('workflow');\n  const [formCodeState, setFormCodeState] = React.useState('');\n  const [form, setForm] = React.useState('');\n  const [domainId, setDomainId] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainId);\n  const [roles, setRoles] = React.useState([]);\n  const [xml, setXml] = React.useState(null);\n  const [userRoles, setUserRoles] = React.useState([]);\n  const [businessObject, setBusinessObject] = React.useState(null);\n  const [workflow, setWorkflow] = React.useState({\n  });\n  const [url, setUrl] = React.useState(\"\");\n  const [workflowRoles, setWorkflowRoles] = React.useState([]);\n  const [modeler, setModeler] = React.useState(null);\n  const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\n  const classes = useStyles();\n\n\n  useEffect(()=> {\n   /* var tab = ['test10', 'FORMGQ06'];\n    localStorage.setItem('tab',tab)\n    console.log(localStorage.getItem('tab').split(','))*/\n    const get_header = {\n      method: 'GET',\n      headers: {\n        \"X-Tenant\": domainName,\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n      }\n    };\n    fetch(USER_SERVICE + \"/api/auth/role/getRoles\", get_header)\n      .then((response) => {\n        return response.json();\n      })\n      .then(data => {\n        var rolesFromApi = [];\n\n        data.map(role => {\n          rolesFromApi.push({\n            key: role.roleId,\n            value : role.roleName,\n            display : role.roleName,\n            id: role.roleId\n          })})\n        setUserRoles(rolesFromApi);\n\n      }).catch(error => {\n      console.log(error);\n    });\n\n\n      // const data = canvas._rootElement.businessObject;\n      // console.log(data);\n\n    const  workflowId = props.match.params.workflowId;\n    const workflow_data = {\n      method: 'POST',\n      headers: {\n        \"X-Tenant\" : domainName,\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n      body: JSON.stringify({id : workflowId})\n    };\n    fetch(WORKFLOW_SERVICE + '/api/workflow/getByWorkflowId',workflow_data)\n      .then(response => {\n        return new Promise((resolve, reject) => {\n          response.text().then(body => {\n            resolve(\n              body.length ? JSON.parse(body) : null\n            );\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      })\n      .then(data => {\n        setWorkflow(JSON.parse(data.workflow))\n        let workflow_val = JSON.parse(data.workflow);\n        const selectedRoles = JSON.parse(data.roles)\n        setWorkflowName(workflow_val.name);\n     //   console.log(JSON.parse(data.workflow).workflowRoles)\n     //    const selectedRoles = JSON.parse(data.workflow).workflowRoles;\n        var adaptedRoles = [];\n        selectedRoles.map(role => {\n          adaptedRoles.push(role.roleName)\n        })\n        setWorkflowRoles(adaptedRoles);\n      //  console.log(workflowRoles)\n       // const workflow_data = JSON.parse(workflow);\n        var model = new Modeler({\n          container: '#bpmnview',\n          propertiesPanel: {\n            parent: '#propview'\n          },\n          additionalModules: [\n            propertiesPanelModule,\n            propertiesProviderModule\n          ],\n          moddleExtensions: {\n            camunda: camundaModdleDescriptor\n          }\n        });\n        //this.newBpmnDiagram();\n        model.importXML(data.xml, (error) => {\n          if (error) {\n            return console.log('fail import xml');\n          }\n          var  canvas = null;\n          canvas = model.get('canvas') ;\n          canvas.zoom('fit-viewport');\n          setBusinessObject(canvas._rootElement.businessObject);\n          setModeler(model)\n        })\n      //  console.log(workflow_data);\n       // setWorkflowId(workflow_data.id);\n       // setWorkflowName(workflow_data.name);\n       // setWorkflowVersion(workflow_data.version);\n\n      //  setUrl(workflow_data.url);\n     //   setXml(data.xml);\n        // this.props.history.push(\"/admin/formView\");\n      })\n      .catch(error => {\n        console.log(error);\n      });\n\n  },[]);\n  const getWorkflowById = ( ) => {\n\n  }\n\n  const openBpmnDiagram = (xml)  => {\n    modeler.importXML(xml, (error) => {\n      if (error) {\n        return console.log('fail import xml');\n      }\n      var  canvas = null;\n      canvas = modeler.get('canvas') ;\n      canvas.zoom('fit-viewport');\n      setBusinessObject(canvas._rootElement.businessObject);\n      // const data = canvas._rootElement.businessObject;\n      // console.log(data);\n    });\n  }\n\n  const handleInputChange  =(event) =>  {\n    console.log(event.target.value);\n  }\n\n  const handleChangeMultiple =(event)=> {\n    const {options} = event.target;\n    const value = [];\n    for (let i = 0, l = options.length; i < l; i += 1) {\n      if (options[i].selected) {\n        value.push(options[i].value);\n      }\n    }\n    setRoles(value);\n  }\n\n  const handleSubmit = () =>  {\n    // const err= null\n    var data = {workflowId: workflow.id,\n      workflowName: workflowName,\n      workflowVersion: workflow.version, workflowRoles: workflowRoles,\n      xml: null,\n      domainId: domainId\n    };\n    modeler.saveXML({ format: true }, function( err, xml) {\n      // log the current xml content to the browser console\n      data.xml = xml;\n      const workflow_data = {\n        method: 'POST',\n        headers: {\n          \"X-Tenant\": domainName,\n          'Content-Type': 'application/json',\n          \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n        body: JSON.stringify(data)\n      };\n      fetch(WORKFLOW_SERVICE + '/api/workflow/edit', workflow_data)\n        .then(response => {\n          console.log(response)\n        })\n    });\n    props.history.push(\"/admin/workflow/list\");\n  }\n\n  const hideAlert = () => {\n    setAlert(null)\n  };\n\n  const verifyLength = (value, length) => {\n    if (value.length >= length) {\n      return true;\n    }\n    return false;\n  };\n  const basicAlert = () =>{\n    /* this.setState({alert:\n         <SweetAlert\n           style={{ display: \"block\", marginTop: \"-100px\" }}\n           title=\"the form code is already used !\"\n           onConfirm={() => this.hideAlert()}\n           onCancel={() => this.hideAlert()}\n         />\n     })*/\n  };\n\n  const handleDelete = (chipToDelete) =>{\n\n    const data = roles.filter((chip) => chip !== chipToDelete);\n    setRoles(data);\n\n  };\n  let icon;\n  return (\n    <>\n      <CCol xs=\"12\" sm=\"12\">\n        <CCard>\n          <CCardHeader>\n            <h2>Modifier  -   {workflow.name}</h2>\n          </CCardHeader>\n          <CCardBody>\n            <CForm  noValidate >\n              <CFormGroup row className=\"my-0\">\n                <CCol xs=\"6\">\n                  <CFormGroup>\n                    <CLabel htmlFor=\"workflowId\">S No</CLabel>\n                    <CInput id=\"workflowId\" /*onChange={e => setWorkflowId(e.target.value) }\n                            value={workflowId}*/ value={workflow.sno} disabled />\n                  </CFormGroup>\n                </CCol>\n                <CCol xs=\"6\">\n                  <CFormGroup>\n                    <CLabel htmlFor=\"workflowName\">Workflow name</CLabel>\n                    <CInput id=\"workflowName\" onChange={e => setWorkflowName(e.target.value) }\n                            value={workflowName}   />\n                  </CFormGroup>\n                </CCol>\n\n              </CFormGroup>\n              <CFormGroup row className=\"my-0\">\n                <CCol xs=\"6\">\n                  <CFormGroup>\n                    <CLabel htmlFor=\"workflowVersion\">Version</CLabel>\n                    <CInput id=\"workflowVersion\"\n                            value={workflow.version} disabled />\n                  </CFormGroup>\n                </CCol>\n                <CCol xs=\"6\">\n                  <CFormGroup>\n                    <CCol xs=\"12\">\n                      <CLabel htmlFor=\"AccessConntrol\">Access control</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\">\n                      <Select  style={{\n                        marginLeft: 0+'px !important',\n                        width:'100%',\n                        color: \"black\"}}\n                               labelId=\"demo-mutiple-chip-label\"\n                               id=\"accessControl\"\n                               value={workflowRoles}\n                               onChange={e =>\n                                 setWorkflowRoles(e.target.value)}\n                               multiple\n                               input={<Input id=\"select-multiple-chip\" />}\n                               renderValue={(selected) =>(\n                                 <div className={classes.chips} style={{\n                                   display: 'flex',\n                                   flexWrap: 'wrap'\n                                 }}>\n                                   {\n                                     selected.map((value) =>\n                                       // console.log(value)\n                                       <div key={value}>\n                                         <Chip\n                                           onMouseDown={(event) => {\n                                             event.stopPropagation();\n                                           }}\n                                           icon={icon}\n                                           label={value}\n                                           onDelete={e => handleDelete(value)}\n                                           className={classes.chip}\n                                         />\n                                       </div>\n                                     )}\n                                 </div>\n                               )}\n                               MenuProps={MenuProps}>\n\n                        {userRoles.map((role) =>\n                          <MenuItem\n                            key={role.value}\n                            value={role.value}\n                          >\n                            {role.display}\n                          </MenuItem>\n                        )}\n                      </Select>\n                    </CCol>\n                  </CFormGroup>\n                </CCol>\n              </CFormGroup>\n              <CCard>\n                <CRow>\n                  <CCol xs=\"12\">\n                    <CNavbar expandable=\"sm\" color=\"info\" >\n                      <CNavbarBrand>\n                        Workflow Builder\n                      </CNavbarBrand>\n                    </CNavbar>\n                  </CCol>\n                  <CCol xs=\"12\">\n                    <div className=\"col-sm-12 row\">\n                      <div className=\"panel panel-default\" style={{width:100+'%',borderColor: '#ddd !important'}}>\n                        <div className=\"panel-body\">\n                          <div className=\"row\" >\n                            <div className=\"col-sm-12\" >\n                              <div id=\"bpmncontainer\">\n                                <div id=\"propview\"  style={{ width: '25%', height: '110vh', float: 'right', maxHeight: '98vh', overflowX: 'auto' }}></div>\n                                <div id=\"bpmnview\" style={{ width: '75%', height: '110vh', float: 'left',backgroundColor: 'white' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                  </CCol>\n                </CRow>\n              </CCard>\n              <CRow xs=\"4\">\n                <CCol xs=\"2\" className=\"text-md-right\">\n                  <CButton color=\"success\" id=\"workflowSave\" onClick={handleSubmit}>\n                    <Save/> Save\n                  </CButton>\n                </CCol>\n                <CCol xs=\"2\" className=\"text-md-left\">\n                  <CButton color=\"danger\" onClick={()=> props.history.push(\"/admin/workflow/list\")}>\n                    <Cancel />\n                    Cancel\n                  </CButton>\n                </CCol></CRow>\n            </CForm>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\nexport default withStyles({ ...useStyles}, { withTheme: true })(EditWorkflow) ;\n\n"," const makeid = (length) =>{\n                              var result           = [\"Process_\"];\n                              var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n                              var charactersLength = characters.length;\n                              for ( var i = 0; i < length; i++ ) {\n                                result.push(characters.charAt(Math.floor(Math.random() *\n                           charactersLength)));\n                             }\n                             return result.join('');\n                          }\n\nexport const emptyBpmn = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><bpmn2:definitions xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" id=\"sample-diagram\" targetNamespace=\"http://bpmn.io/schema/bpmn\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\">\n                            <bpmn2:process id=\"${makeid(7)}\" isExecutable=\"true\"/>\n                            <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n                              <bpmndi:BPMNPlane bpmnElement=\"Process_1bzh145\" id=\"BPMNPlane_1\"/>\n                            </bpmndi:BPMNDiagram>\n                          </bpmn2:definitions>`;\n\n\n"],"sourceRoot":""}