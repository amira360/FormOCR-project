{"version":3,"sources":["views/Administration/notificationBuilder/EditNotification.js","../node_modules/@material-ui/icons/esm/Save.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","withStyles","withTheme","props","React","useState","notificationName","setNotificationName","notificationFrom","setNotificationFrom","notificationTo","setNotificationTo","notificationSubject","setNotificationSubject","notificationCc","setNotificationCc","notificationBcc","setNotificationBcc","enableEmailNotification","setEnableEmailNotification","notificationVersion","setNotificationVersion","versionState","setVersionState","JSON","parse","localStorage","getItem","domainId","roles","setRoles","toRoles","setToRoles","userRoles","setUserRoles","versionError","setVersionError","notificationId","setNotificationId","notificationData","setNotificationData","notificationSno","setNotificationSno","domainName","useEffect","roles_data","method","headers","fetch","USER_SERVICE","then","response","json","data","console","log","rolesFromApi","map","role","push","value","roleName","label","catch","error","notification_id","match","params","notification_data","body","stringify","MAIL_NOTIFICATION_SERVICE","Promise","resolve","reject","text","length","err","notification","notification_msg","notificationRoles","enabled","tab","toRoles_data","notificationToRoles","version","sno","xs","sm","noValidate","row","className","htmlFor","id","disabled","onChange","e","target","invalid","event","md","name","placeholder","options","isMulti","variant","inline","custom","checked","style","backgroundColor","padding","editor","getData","color","onClick","preventDefault","roles_names","to_roles_names","val","notification_post","history","createSvgIcon","d"],"mappings":"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","file":"static/js/89.1002ef4b.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CInput, CSelect,\n  CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback, CInputCheckbox,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport { DocsLink } from 'src/reusable'\nimport { Link } from 'react-router-dom'\nimport {FormBuilder, form} from 'react-formio';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport {SERVER_URL, USER_SERVICE,MAIL_NOTIFICATION_SERVICE} from \"../../../constants\";\n\nimport 'formiojs/dist/formio.full.min';\nimport 'formiojs/dist/formio.full.min.css';\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from 'react-select';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Input from \"@material-ui/core/Input\";\nimport CKEditor from \"ckeditor4-react\";\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    marginLeft: 0+'px !important',\n    minWidth: 220,\n    maxWidth: 300,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst EditNotification = (props) => {\n  const [collapsed, setCollapsed] = React.useState(true)\n  const [showElements, setShowElements] = React.useState(true)\n  const [notificationName, setNotificationName] = React.useState('');\n  const [Alert, setAlert] = React.useState('');\n  const [formId, setFormId] = React.useState('');\n  const [display, setDisplay] = React.useState('');\n  const [notificationFrom, setNotificationFrom] = React.useState('support@isct-group.com');\n  const [notificationTo, setNotificationTo] = React.useState('');\n  const [notificationSubject, setNotificationSubject] = React.useState('');\n  const [notificationCc, setNotificationCc] = React.useState('');\n  const [notificationBcc, setNotificationBcc] = React.useState('');\n  const [notificationSite, setNotificationSite] = React.useState('');\n  const [enableEmailNotification, setEnableEmailNotification] = React.useState('');\n  const [notificationVersion, setNotificationVersion] = React.useState('');\n  const [versionState, setVersionState] = React.useState('');\n  const [domainId, setDomainId] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainId);\n  const [roles, setRoles] = React.useState([]);\n  const [toRoles, setToRoles] = React.useState([]);\n  const [components, setComponents] = React.useState([]);\n  const [userRoles, setUserRoles] = React.useState([]);\n  const [versionError, setVersionError] = React.useState('');\n  const [notificationId, setNotificationId] = React.useState('');\n  const [notificationData, setNotificationData] = React.useState('');\n  const [notificationSno, setNotificationSno] = React.useState('');\n  const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\n\n  const classes = useStyles();\n  useEffect(()=> {\n    const roles_data = {\n      method: 'GET',\n      headers: {\n        \"X-Tenant\": domainName,\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n      }\n    };\n    fetch(USER_SERVICE + \"/api/auth/role/getRoles\", roles_data)\n      .then((response) => {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n        var rolesFromApi = [];\n        data.map(role => {\n          rolesFromApi.push({\n            value : role.roleName,\n            label : role.roleName\n          })})\n        setUserRoles(rolesFromApi);\n        console.log(userRoles);\n      }).catch(error => {\n      console.log(error);\n    });\n\n    const  notification_id = props.match.params.notificationId;\n    setNotificationId(notification_id)\n    //  alert(formCode)\n    // const  getFormId = props.match.params.formId;\n\n    console.log(localStorage.getItem(\"Authorization\"))\n    const notification_data = {\n      method: 'POST',\n      headers: {\n        \"X-Tenant\": domainName,\n        'Content-Type': 'application/json', \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n      body: JSON.stringify({notificationId : notification_id})\n    };\n    fetch(MAIL_NOTIFICATION_SERVICE + '/api/notification/getByNotificationId',notification_data)\n      .then(response => {\n        return new Promise((resolve, reject) => {\n          response.text().then(body => {\n            resolve(\n              body.length ? JSON.parse(body) : null\n            );\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      })\n      .then(data => {\n        console.log(data);\n        const notification = JSON.parse(data.notification)\n        const notification_msg = data.notification_msg\n\n        setNotificationData(notification_msg);\n        //  setComponents(JSON.parse(data.form_json).components)\n       const notification_data = JSON.parse(data.notification);\n       const roles_data =JSON.parse(data.notificationRoles);\n        console.log(notification.enabled);\n       var tab = []\n           roles_data.map(role => {\n             tab.push({value: role.roleName, label: role.roleName})\n           })\n        setRoles(tab)\n        const toRoles_data = JSON.parse(data.notificationToRoles)\n         tab = []\n           toRoles_data.map(role => {\n           tab.push({value: role.roleName, label: role.roleName})\n           })\n        setToRoles(tab)\n        setEnableEmailNotification(notification.enabled)\n        setNotificationBcc(notification.notificationBcc)\n        setNotificationCc(notification.notificationCc)\n        setNotificationFrom(notification.notificationFrom)\n        setNotificationName(notification.notificationName)\n        setNotificationVersion(notification.version)\n        setNotificationSubject(notification.notificationSubject)\n        setNotificationTo(notification.notificationTo)\n        setNotificationSno(notification.sno)\n\n        // this.props.history.push(\"/admin/formView\");\n      })\n      .catch(error => {\n        console.log(error);\n      })\n\n  },[]);\n\n  const verifyLength = (value, length) => {\n    if (value.length >= length) {\n      return true;\n    }\n    return false;\n  };\n  const handleToRolesDelete = (chipToDelete) =>{\n    console.log(chipToDelete);\n    console.log(toRoles.filter((chip) => chip !== chipToDelete))\n    const data = toRoles.filter((chip) => chip !== chipToDelete);\n    setToRoles(data);\n  };\n  const handleNotificationSubmit =(event ) => {\n    event.preventDefault();\n    var roles_names = []\n    var to_roles_names = []\n    roles.map(val =>{\n      roles_names.push(val.label)\n    })\n    toRoles.map(val =>{\n      to_roles_names.push(val.label)\n    })\n    const notification_post = {\n      method: 'POST',\n      headers: {\n        \"X-Tenant\": domainName,\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n      body: JSON.stringify({name: notificationName, version:notificationVersion,\n        notificationRoles:roles_names, notificationFrom: notificationFrom, enabled : enableEmailNotification,\n        notificationTo: notificationTo, notificationCc: notificationCc,\n        notificationBcc: notificationBcc, notificationSubject: notificationSubject,\n        domainId: domainId, notificationToRoles: to_roles_names , notificationId: notificationId, notificationData: notificationData})\n    };\nconsole.log(roles)\nconsole.log(toRoles)\n\n\n    fetch(MAIL_NOTIFICATION_SERVICE + '/api/notification/edit', notification_post)\n      .then(response => {\n        console.log(response)\n        //toaser\n        props.history.push(\"/admin/notification/list\");\n      })\n  }\n\n\n  const handleDelete = (chipToDelete) =>{\n    console.log(chipToDelete);\n    console.log(roles);\n    console.log(roles.filter((chip) => chip !== chipToDelete))\n    const data = roles.filter((chip) => chip !== chipToDelete);\n    setRoles(data);\n  };\n  let icon;\n  return (\n      <>\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard>\n            <CCardHeader>\n              <h2>Modifier la notification</h2>\n            </CCardHeader>\n            <CCardBody>\n              <CForm  noValidate >\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"SNo\">S No</CLabel>\n                      <CInput id=\"SNo\" /*onChange={e => setFormId(e.target.value)}\n                              value={formId}*/ value={notificationSno}  disabled />\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"notificationName\">Nom de la notification</CLabel>\n                      <CInput id=\"notificationName\" onChange={e => setNotificationName(e.target.value) }\n                              value={notificationName}  />\n                    </CFormGroup>\n                  </CCol>\n\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"version\">Version</CLabel>\n                      <CInput invalid={versionState === \"error\"} id=\"version\" value = {notificationVersion} onChange={event => {\n                        setNotificationVersion(event.target.value)\n                        if(verifyLength(event.target.value, 3) ){\n                          setVersionState(\"success\");\n                        } else {\n                          setVersionState(\"error\");\n                          setVersionError(\"invalid notificationVersion !\")\n                        }\n                      }} />\n                      <CInvalidFeedback className=\"help-block\">\n                        {versionError}\n                      </CInvalidFeedback>\n                    </CFormGroup>\n                  </CCol>\n                  <CCol sm={12} md={6}>\n                                       <CFormGroup>\n                                           <CLabel htmlFor=\"AccessControlUser\">Contrôle d'accès</CLabel>\n\n                                           <Select\n                                             name=\"form-field-name2\"\n                                             placeholder=\"Global\"\n                                             value={roles}\n                                             options={userRoles}\n                                             onChange={setRoles}\n                                             isMulti\n                                           />\n                                     </CFormGroup>\n                                   </CCol>\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"From\">De</CLabel>\n                      <CInput id=\"From\"\n                              value=\"support@isct-group.com\" disabled />\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n\n                    <CFormGroup variant=\"custom-checkbox\" inline>\n                      <CInputCheckbox custom id=\"inline-checkbox2\" name=\"inline-checkbox2\"  checked={enableEmailNotification} onChange={e => {setEnableEmailNotification(e.target.checked);\n                       console.log(e.target.checked)}}\n                       />\n                      <CLabel variant=\"custom-checkbox\" htmlFor=\"inline-checkbox2\" >Activer la notification par e-mail</CLabel>\n                    </CFormGroup>\n                  </CCol>\n\n                </CFormGroup>\n\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"To\">À</CLabel>\n                      <CInput id=\"To\"  onChange={e => setNotificationTo(e.target.value) }\n                              value={notificationTo} />\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"Subject\">Sujet</CLabel>\n                      <CInput id=\"Subject\" onChange={e => setNotificationSubject(e.target.value) }\n                              value={notificationSubject}  />\n                    </CFormGroup>\n                  </CCol>\n\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol sm={12} md={6}>\n                         <CFormGroup>\n                             <CLabel htmlFor=\"AccessControlUser\">À (Roles)</CLabel>\n\n                             <Select\n                               name=\"form-field-name2\"\n                               placeholder=\"Global\"\n                               value={toRoles}\n                               onChange={setToRoles}\n                               options={userRoles}\n                               isMulti\n                             />\n                       </CFormGroup>\n                     </CCol>\n                  {/*     <CCol md=\"6\">\n                  <CFormGroup variant=\"custom-radio\" inline>\n                    <CInputRadio custom id=\"inline-radio1\" name=\"inline-radios\" value=\"option1\" />\n                    <CLabel variant=\"custom-checkbox\" htmlFor=\"inline-radio1\">Html email</CLabel>\n                  </CFormGroup>\n                  <CFormGroup variant=\"custom-radio\" inline>\n                    <CInputRadio custom id=\"inline-radio2\" name=\"inline-radios\" value=\"option2\" />\n                    <CLabel variant=\"custom-checkbox\" htmlFor=\"inline-radio2\">Script Email</CLabel>\n                  </CFormGroup>\n\n                </CCol>*/}\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"Cc\">Cc</CLabel>\n                      <CInput id=\"Cc\"  onChange={e => setNotificationCc(e.target.value) }\n                              value={notificationCc} />\n                    </CFormGroup>\n                  </CCol>\n\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n\n                 { /*<CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"Site\">Site</CLabel>\n                      <CInput id=\"Site\" onChange={e => setNotificationSite(e.target.value) }\n                              value={notificationSite}  />\n                    </CFormGroup>\n                  </CCol>*/}\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"Bcc\">Cci</CLabel>\n                      <CInput id=\"Bcc\" onChange={e => setNotificationBcc(e.target.value) }\n                              value={notificationBcc} />\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n\n\n                <CCard>\n                     <CCardHeader style={{backgroundColor:\"#F5F5F5\"}}>\n                          Body\n                      </CCardHeader>\n\n                  <CCardBody style={{padding:'0px'}}>\n                    <CKEditor\n                        data={notificationData}\n                         onChange={(event) => {\n                              setNotificationData(event.editor.getData());\n                            }}\n                    />\n                  </CCardBody>\n                </CCard>\n\n                <CRow xs=\"4\">\n                  <CCol xs=\"2\" className=\"text-md-right\">\n                    <CButton color=\"success\" id=\"formSave\" onClick={handleNotificationSubmit}>\n                      <Save/> Save\n                    </CButton>\n                  </CCol>\n                  <CCol xs=\"2\" className=\"text-md-left\">\n                    <CButton color=\"danger\" onClick={()=> props.history.push(\"/admin/notification/list\")}>\n                      <Cancel />\n                      Cancel\n                    </CButton>\n                  </CCol></CRow>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </>\n  )\n}\nexport default withStyles({ ...useStyles}, { withTheme: true })(EditNotification) ;\n\n","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');"],"sourceRoot":""}