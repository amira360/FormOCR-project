{"version":3,"sources":["views/Administration/workflowMaster/NotificationSettings.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","marginLeft","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","withStyles","withTheme","props","toast","useRef","React","useState","setWorkflow","JSON","parse","localStorage","getItem","domainId","setUserRoles","workflowList","setWorkflowList","steps","setSteps","formFields","setFormFields","value","label","workflow","step","fields","workflowValues","setWorkflowValues","domainName","useEffect","workflow_master_data","method","headers","body","stringify","workflowMasterId","fetch","WORKFLOW_MASTER_SERVICE","then","response","Promise","resolve","reject","text","length","catch","err","data","workflow_list","push","id","name","get_header","USER_SERVICE","json","rolesFromApi","map","role","roleName","error","console","log","workflow_data","WORKFLOW_SERVICE","workflowsApi","item","version","createTree","isSub","lev","children","component","level0","components","type","title","fieldKey","key","datagridComp","level1","columns","col","sub_comp","level3","comp","level5","getStepsByWorkflowId","workflowId","setItem","process_data","getFieldsByTaskId","taskId","task_data","formsData","taskTab","tab","val","newTab","Array","from","Set","formCodesList","code","formCode","formCodes","form_data","FORM_SERVICE","dataVal","forms_json","form_fields","panelFields","form_json","nodeData","panel","panelChild","getFormFieldsByFormCodes","ref","xs","sm","noValidate","element","index","style","width","borderBottom","row","className","md","htmlFor","onChange","e","i","newWorkflowValues","handleChangeSelectWorkflow","options","required","handleChangeSelectStep","handleChangeSelectFields","isMulti","paddingTop","onClick","event","preventDefault","splice","removeFormFields","icon","xl","block","variant","color","tabValues","history","window","location","reload"],"mappings":"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","file":"static/js/107.c8153205.chunk.js","sourcesContent":["\nimport React, {useEffect, useRef} from 'react';\nimport { Toast } from 'primereact/toast';\nimport {Checkbox} from 'primereact/checkbox';\n\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CFormGroup,\n    CInput, CSelect,\n    CLabel, CNavbar, CNavbarBrand, CRow, CForm, CInputGroup, CInvalidFeedback, CInputCheckbox\n} from '@coreui/react'\nimport { Button } from 'primereact/button';\n\nimport {SERVER_URL, USER_SERVICE, WORKFLOW_MASTER_SERVICE, FORM_SERVICE, WORKFLOW_SERVICE} from \"../../../constants\";\nimport \"./css/styles.css\";\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport \"primeicons/primeicons.css\";\nimport \"primereact/resources/themes/saga-blue/theme.css\";\nimport \"primereact/resources/primereact.css\";\nimport \"primeflex/primeflex.css\";\n\nimport {Cancel, Save} from \"@material-ui/icons\";\nimport {Chip} from \"@material-ui/core\";\nimport Select from 'react-select';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Input from \"@material-ui/core/Input\";\nimport { Panel } from 'primereact/panel';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        marginLeft: 0+'px !important',\n        minWidth: 220,\n        maxWidth: 300,\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n    noLabel: {\n        marginTop: theme.spacing(3),\n    },\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst NotificationSettings = (props) => {\n    const toast = useRef(null);\n    const [collapsed, setCollapsed] = React.useState(true)\n    const [showElements, setShowElements] = React.useState(true)\n    const [workflowMasterName, setWorkflowMasterName] = React.useState('');\n    const [alert, setAlert] = React.useState('');\n    const [workflowMasterCode, setWorkflowMasterCode] = React.useState('');\n    const [display, setDisplay] = React.useState('');\n    const [workflow, setWorkflow] = React.useState([]);\n    const [selectedWorkflow, setSelectedWorkflow] = React.useState(null);\n    const [type, setType] = React.useState('workflow');\n    const [formCodeState, setFormCodeState] = React.useState('');\n    const [form, setForm] = React.useState('');\n    const [domainId, setDomainId] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainId);\n    const [rolesAdmin, setRolesAdmin] = React.useState([]);\n    const [roles, setRoles] = React.useState([]);\n    const [userRoles, setUserRoles] = React.useState([]);\n    const [formsList, setFormsList] = React.useState([]);\n    const [fieldsList, setFieldsList] = React.useState([]);\n    const [selectedForm, setSelectedForm] = React.useState('');\n    const [selectedField, setSelectedField] = React.useState('');\n    const [processAccessRoles, setProcessAccessRoles] = React.useState([]);\n    const [xml, setXml] = React.useState([]);\n\n    const [businessObject, setBusinessObject] = React.useState(null);\n    const classes = useStyles();\n    const [modeler, setModeler] = React.useState(null);\n    const [activeIndex, setActiveIndex] = React.useState(null);\n    const [username, setUsername] = React.useState(localStorage.getItem('username'));\n    const [disableAddNewButton, setDisableAddNewButton] = React.useState('');\n    const [source, setSource] = React.useState('');\n    const [Indicator, setIndicator] = React.useState('');\n    const [forms, setForms] = React.useState([]);\n    const [workflowList, setWorkflowList] = React.useState([]);\n    const [steps, setSteps] = React.useState([]);\n    const [fields, setFields] = React.useState([]);\n\n    const [operator1, setOperator1] = React.useState('');\n    const [workflowMasterCodeState, setWorkflowMasterCodeState] = React.useState('');\n    const [workflowMasterCodeError, setWorkflowMasterCodeError] = React.useState('');\n    const [operator2, setOperator2] = React.useState('');\n    const [formField1, setFormField1] = React.useState('');\n    const [formField2, setFormField2] = React.useState('');\n    const [formFields, setFormFields] = React.useState([]);\n    const [operators, setOperators] = React.useState([{value:\"somme\", label:\"Somme\"}, {value:\"compte\", label: \"Compte\"}]);\n    const [percentage, setPercentage] = React.useState(false);\n    const [workflowValues, setWorkflowValues] = React.useState([{ workflow: \"\", step: \"\",  fields:\"\"  }]);\n    const [domainName, setDomainName] = React.useState(JSON.parse(localStorage.getItem('domain_data')).domainName);\n\n\n    useEffect(()=> {\n        const workflow_master_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({workflowMasterId: localStorage.getItem(\"workflowMasterId\")})\n        };\n\n        fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getWorkflowByWorkfowMasterId', workflow_master_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                var workflow_list = []\n                workflow_list.push({value: data.id, label:data.name})\n                setWorkflowList(workflow_list)\n            })\n        const get_header = {\n            method: 'GET',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")\n            }\n        };\n        fetch(USER_SERVICE + \"/api/auth/role/getRoles\", get_header)\n            .then((response) => {\n                return response.json();\n            })\n            .then(data => {\n                var rolesFromApi = [];\n\n                data.map(role => {\n                    rolesFromApi.push({\n                        value : role.roleName,\n                        label : role.roleName\n                    })})\n                setUserRoles(rolesFromApi);\n\n            }).catch(error => {\n            console.log(error);\n        });\n\n        const workflow_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({domainId: domainId})\n        };\n        fetch(WORKFLOW_SERVICE + '/api/workflow/getAll',workflow_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                var workflowsApi = [];\n                if( data !== null){\n                    data.map(item => {\n                        workflowsApi.push({\n                            value : item.id,\n                            label : item.name+\"-\"+item.version\n                        })})\n                    setWorkflow(workflowsApi);\n                }\n            });\n        /* var model = new Modeler({\n           container: '#bpmnview',\n           propertiesPanel: {\n             parent: '#propview'\n           },\n           additionalModules: [\n             propertiesPanelModule,\n             propertiesProviderModule\n           ],\n           moddleExtensions: {\n             camunda: camundaModdleDescriptor\n           }\n\n         })*/\n\n        /* model.importXML(emptyBpmn, (error) => {\n           if (error) {\n             return console.log('fail import xml');\n           }\n           var  canvas = null;\n           canvas = model.get('canvas') ;\n           canvas.zoom('fit-viewport');\n          setBusinessObject(canvas._rootElement.businessObject);\n          setModeler(model)\n           // const data = canvas._rootElement.businessObject;\n           // console.log(data);\n         });*/\n    },[]);\n    const createTree =(data, isSub,lev) => {\n        let children = [];\n        let count = 0;\n        data.map((component, level0) =>{\n            if (typeof(component.components) === 'object') { // Sub array found, build structure\n                //   children.push({label: component.title, key: component.key, children: createTree(component.components, true, level)})\n                if (component.type !== \"datagrid\"){\n                    children.push({\n                        label: component.title,\n                        id: component.id,\n                        fieldKey: component.key,\n                        children: createTree(component.components, true, count)\n                    })\n                }else{\n                    component.components.map((datagridComp, level1) => {\n                        if (typeof(datagridComp.components) === 'object')  {\n                            children.push({\n                                label: datagridComp.label,\n                                id: datagridComp.id,\n                                fieldKey: datagridComp.key,\n                                children: createTree(datagridComp.components, true, count)\n                            })\n                        } else  if(typeof(datagridComp.columns) === 'object')\n                        {\n                            datagridComp.columns.map((col) =>{\n                                if (typeof(col.components) === 'object') { // Sub array found, build structure\n                                    col.components.map((sub_comp, level3) =>{\n\n                                            children.push(\n                                                {label: sub_comp.label,\n                                                    id: sub_comp.id,\n                                                    fieldKey: sub_comp.key,\n                                                }\n                                            );\n\n                                    })\n                                }\n                            })\n                        }else{\n                            children.push({\n                                label: datagridComp.label,\n                                id: datagridComp.id,\n                                fieldKey: datagridComp.key,\n                            })\n                        }\n                    })\n                }\n            }else if (typeof(component.columns) === 'object') {\n                component.columns.map((col) =>{\n                    if (typeof(col.components) === 'object') { // Sub array found, build structure\n                        col.components.map((comp, level5) =>{\n\n                                children.push(\n                                    {label: comp.label,\n                                        id: comp.id,\n                                        fieldKey: comp.key,\n                                    }\n                                );\n\n                        })\n                    }\n                })\n            }else { // No submenu, bottom of tree\n                children.push(\n                    {label: component.label,\n                        id: component.id,\n                        fieldKey: component.key,\n                    }\n                );\n            }\n        })\n\n        //  setExpandedKeys(keys)\n        /* console.log(keys)*/\n\n        return children;\n        //return <div className='filter-body open'>{children}</div>;\n\n    }\n  /*  let handleChange = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][e.target.name] = e.target.value;\n        setFormValues(newFormValues);\n    };\n    let handleChangeCheckbox = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][e.target.name] = e.checked;\n        setFormValues(newFormValues);\n    };\n    let handleChangeSelect1 = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"operator1\"] = e;\n        setFormValues(newFormValues);\n    };\n\n    let handleChangeSelect2 = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"operator2\"] = e;\n        setFormValues(newFormValues);\n    };\n    let handleChangeFormField1 = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][\"formField1\"] = e;\n        setFormValues(newFormValues);\n    };*/\n    let handleChangeSelectFields = (i, e) => {\n        let newWorkflowValues = [...workflowValues];\n        newWorkflowValues[i][\"fields\"] = e;\n        setWorkflowValues(newWorkflowValues);\n    };\n    let handleChangeSelectStep = (i, e) => {\n        let newWorkflowValues = [...workflowValues];\n        newWorkflowValues[i][\"step\"] = e;\n        setWorkflowValues(newWorkflowValues);\n\n        getFieldsByTaskId(localStorage.getItem(\"selectedWorkflowId\"), e.value )\n    };\n    let handleChangeSelectWorkflow = (i, e) => {\n        let newWorkflowValues = [...workflowValues];\n        newWorkflowValues[i][\"workflow\"] = e;\n        setWorkflowValues(newWorkflowValues);\n\n        getStepsByWorkflowId(e.value)\n        //getFormById(e.value)\n    };\n    const getStepsByWorkflowId = (workflowId)=>{\n        localStorage.setItem(\"selectedWorkflowId\", workflowId)\n        const process_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({workflowId: workflowId})\n        };\n\n        fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getStepsByWorkflowId', process_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n\n               setSteps(data)\n\n            })\n    }\n    const getFormFieldsByFormCodes = (formCodes) => {\n\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({formCodes : formCodes})\n        };\n\n        fetch(FORM_SERVICE+'/api/form/getByFormCodes',form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        console.log(body)\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(dataVal => {\n                console.log(dataVal);\n                var table = []\n                const forms_json =JSON.parse(dataVal.forms_json);\n                var form_fields = []\n                var panelFields = []\n                forms_json.map(form_json=>{\n                    const nodeData = createTree(form_json.components,true, 0 )\n                    console.log(nodeData)\n\n                    nodeData.map(panel => {\n\n                        if(panel.children && panel.children.length){\n                            panel.children.map(panelChild =>{\n                                panelFields.push({label : panelChild.label, value: panelChild.fieldKey})\n                            })\n                            form_fields.push(...panelFields)\n                        }\n                    })\n                    setFormFields([...form_fields])\n                })\n\n                // console.log(forms_list_data)\n                /*  this.setState({componentsData: tab})\n                  console.log(forms_data);\n  //                  setForms(forms_data);\n                  this.setState({forms: forms_data})*/\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n    const getFieldsByTaskId = (workflowId, taskId) =>{\n        const task_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({taskId: taskId, workflowId: workflowId})\n        };\n\n\n\n        fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getFormsByTaskId', task_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                console.log(data)\n                var formsData = [];\n                data.map(taskTab =>{\n                    formsData.push(...taskTab)\n                })\n                console.log(formsData)\n                var tab = []\n                formsData.map(val =>{\n                    tab.push( val.value)\n                })\n                console.log(tab)\n                // console.log(tab)\n                var newTab = Array.from(new Set(tab))\n                var formCodesList = []\n                newTab.map(code =>{\n                    formCodesList.push({formCode: code})\n                })\n                console.log(formCodesList)\n                getFormFieldsByFormCodes(formCodesList)\n            })\n    }\n\n    let addFormFields = () => {\n        setWorkflowValues([...workflowValues, { workflow: \"\", step: \"\",  fields:\"\"  }]);\n    };\n\n    let removeFormFields = (event, i) => {\n        event.preventDefault();\n        let newWorkflowValues = [...workflowValues];\n        newWorkflowValues.splice(i, 1);\n        setWorkflowValues(newWorkflowValues);\n    };\n\n    let handleSubmitTest = (event) => {\n        event.preventDefault();\n        toast.current.show({severity:'success', summary: 'Success Message', detail:JSON.stringify(workflowValues), life: 3000});\n\n        // alert(JSON.stringify(formValues));\n    };\n\n    const handleSubmit =(event ) => {\n        event.preventDefault();\n\n        var tabValues = []\n        workflowValues.map(value =>{\n            if(value.fields !== \"\"){\n                tabValues.push(value)\n            }\n        })\n        const workflow_master_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({domainId: domainId, workflowMasterId: localStorage.getItem(\"workflowMasterId\"),\n                workflowValues: tabValues })\n        };\n\n        if(workflowValues[0].step !== \"\" && workflowValues[0].fields !== \"\"){\n            fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/notification/saveNotificationSettings', workflow_master_data)\n                .then(response => {\n                    return new Promise((resolve, reject) => {\n                        response.text().then(body => {\n                            resolve(\n                                body.length ? JSON.parse(body) : null\n                            );\n                        }).catch(err => {\n                            reject(err);\n                        });\n                    });\n                })\n                .then(data => {\n                    localStorage.setItem(\"workflowMasterAdded\", localStorage.getItem(\"workflowMasterId\"))\n\n                    props.history.push(\"/admin/workflowMaster/list\");\n                    window.location.reload()\n                })\n        }else{\n            props.history.push(\"/admin/workflowMaster/list\");\n            window.location.reload()\n        }\n\n        // const performanceIndicators = JSON.stringify(formValues)\n       /* const performanceIndicators = formValues\n        console.log(selectedWorkflow.value);\n        const workflow_master_data = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({name: workflowMasterName, username: localStorage.getItem(\"username\"),\n                code: workflowMasterCode, workflowId: selectedWorkflow.value, processAccessRoles: processAccessRoles,\n                domainId: domainId, rolesAdmin:rolesAdmin, rolesUser:roles, disableAddNewButton: disableAddNewButton, performanceIndicators :performanceIndicators})\n        };\n\n        fetch(SERVER_URL + '/api/workflowMaster/create', workflow_master_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                //    console.log(data)\n                const workflowMasterId = data.workflowMasterId\n                props.history.push(\"/admin/workflowMaster/menuMapping/\"+workflowMasterId);\n            })*/\n    }\n\n    const getFormsByWorkflow =(selected ) => {\n        // event.preventDefault();\n        // console.log(selectedWorkflow.value);\n\n        const process_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({workflowId: selected.value})\n        };\n\n        fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getFormsByWorkflowId', process_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                console.log(data)\n                var formsIds = [];\n                data.map(taskTab =>{\n                    formsIds.push(...taskTab)\n                })\n                var tab = []\n\n                formsIds.map(taskForms =>{\n                    tab.push(...taskForms)\n                })\n                // console.log(tab)\n                var newTab = Array.from(new Set(formsIds))\n                console.log(newTab)\n                var formCodes = []\n                newTab.map(formCode =>{\n                    formCodes.push({formCode: formCode})\n                })\n                getFormsByFormCodes(formCodes)\n                /*  const forms = JSON.parse(data.forms)\n                  var list = []\n                  forms.map(form =>{\n                      list.push({label: form.name, value: form.id})\n                  })\n\n                  setFormsList(list)*/\n                // props.history.push(\"/admin/workflowMaster/menuMapping/\"+workflowMasterId);\n            })\n    }\n\n    const getFormsByFormCodes = (data) => {\n\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({formCodes : data})\n        };\n\n        fetch(FORM_SERVICE+'/api/form/getByFormCodes',form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        console.log(body)\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(dataVal => {\n                console.log(dataVal);\n                var table = []\n                const forms_json =JSON.parse(dataVal.forms_json);\n                var tab = [];\n                var list = [];\n                forms_json.map((formData, index) =>{\n                    list.push(formData.components)\n                    tab.push(formData.components)\n                })\n                console.log(tab)\n                const forms_data =JSON.parse(dataVal.forms_data);\n                var forms_list_data = []\n                forms_data.map(formData =>{\n                    forms_list_data.push({label: formData.name, value: formData.id})\n                })\n                setForms([...forms_list_data])\n                // const nodeData = createTree(JSON.parse(data.forms_json)[index].components,true, 0 )\n                // console.log(forms_list_data)\n                /*  this.setState({componentsData: tab})\n                  console.log(forms_data);\n  //                  setForms(forms_data);\n                  this.setState({forms: forms_data})*/\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    const getFormById = (data) => {\n\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"Authorization\")},\n            body: JSON.stringify({id : data})\n        };\n\n        fetch(FORM_SERVICE+'/api/form/getByFormId',form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        console.log(body)\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(dataVal => {\n                console.log(dataVal);\n                var table = []\n                const form_json =JSON.parse(dataVal.form_json);\n                const nodeData = createTree(form_json.components,true, 0 )\n                console.log(nodeData)\n                var form_fields = []\n                nodeData.map(panel => {\n                    var panelFields = []\n                    if(panel.children && panel.children.length){\n                        panel.children.map(panelChild =>{\n                            panelFields.push({label : panelChild.label, value: panelChild.fieldKey})\n                        })\n                        form_fields.push(...panelFields)\n                    }\n                })\n                setFormFields([...form_fields])\n                console.log(form_fields)\n                // console.log(forms_list_data)\n                /*  this.setState({componentsData: tab})\n                  console.log(forms_data);\n  //                  setForms(forms_data);\n                  this.setState({forms: forms_data})*/\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n    const getFieldsByFormId =(event ) => {\n        event.preventDefault();\n        // console.log(selectedWorkflow.value);\n\n        const form_data = {\n            method: 'POST',\n            headers: {\n                \"X-Tenant\": domainName,\n                'Content-Type': 'application/json',\n                \"Authorization\": \"Bearer \"+localStorage.getItem('Authorization')},\n            body: JSON.stringify({formId: selectedForm.value})\n        };\n\n        fetch(WORKFLOW_MASTER_SERVICE + '/api/workflowMaster/getFieldsByFormId', form_data)\n            .then(response => {\n                return new Promise((resolve, reject) => {\n                    response.text().then(body => {\n                        resolve(\n                            body.length ? JSON.parse(body) : null\n                        );\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            })\n            .then(data => {\n                const fields = JSON.parse(data.fields)\n                var list = []\n                fields.map(field =>{\n                    list.push({label: field.name, value: field.id})\n                })\n\n                setFieldsList(list)\n                // props.history.push(\"/admin/workflowMaster/menuMapping/\"+workflowMasterId);\n            })\n    }\n\n\n    const verifyLength = (value, length) => {\n        if (value.length >= length) {\n            return true;\n        }\n        return false;\n    };\n    const basicAlert = () =>{\n        /* this.setState({alert:\n             <SweetAlert\n               style={{ display: \"block\", marginTop: \"-100px\" }}\n               title=\"the form code is already used !\"\n               onConfirm={() => this.hideAlert()}\n               onCancel={() => this.hideAlert()}\n             />\n         })*/\n    };\n\n\n\n    let icon;\n    return (\n        <>\n            <Toast ref={toast} />\n            <CCol xs=\"12\" sm=\"12\">\n                <CCard>\n                    <CCardHeader>\n                        <h2>Maitre de workflow | Paramétrage de notification</h2>\n                    </CCardHeader>\n                    <CCardBody>\n                        <CForm  noValidate >\n                            <CCard>\n                                <CCardBody>\n                                    {workflowValues.map((element, index) => (\n                                        <div  key={index} style={{marginTop:\"10px\"}}>\n                                            <div  style={{ width: \"100%\", borderBottom: \"1px solid lightGray\"}}>\n                                                <CFormGroup row className=\"my-0\">\n                                                    <CCol sm={12} md={3} >\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"workflow\">Workflow</CLabel>\n                                                            <Select\n                                                                name=\"workflow\" value={element.workflow}\n\n                                                                onChange={(e) => handleChangeSelectWorkflow(index, e)}\n                                                                options={workflowList}\n                                                                required\n                                                            />\n                                                        </CFormGroup>\n                                                    </CCol>\n                                                    <CCol sm={12} md={3}>\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"step\">Step</CLabel>\n                                                            <Select\n                                                                name=\"step\" value={element.step}\n                                                                onChange={(e) => handleChangeSelectStep(index, e)}\n                                                                options={steps}\n                                                                required\n                                                            />\n                                                        </CFormGroup>\n                                                    </CCol>\n                                                    <CCol sm={12} md={3}>\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"fields\">Fields</CLabel>\n                                                            <Select\n                                                                name=\"fields\" value={element.fields}\n                                                                onChange={(e) => handleChangeSelectFields(index, e)}\n                                                                options={formFields}\n                                                                isMulti\n                                                                required\n                                                            />\n                                                        </CFormGroup>\n                                                    </CCol>\n                                                    <CCol sm={12} md={1} style={{paddingTop:\"50px\"}}\n                                                    >\n                                                        {index ? (\n                                                            <CCol sm={12} md={12}>\n                                                                <Button  onClick={(e) => removeFormFields(e, index)} icon=\"pi pi-trash\" className=\"p-button-rounded p-button-danger\" />\n                                                            </CCol>\n                                                        ) : null}\n                                                    </CCol>\n                                                </CFormGroup>\n\n                                            </div>\n                                        </div>\n                                    ))\n                                    }\n                                    <CCol sm={12} md={6}>\n                                        <div className=\"button-section\">\n                                            <button\n                                                className=\"button add\"\n                                                type=\"button\"\n                                                onClick={() => addFormFields()}\n                                            >\n                                                Add\n                                            </button>\n                                            {/* <button className=\"button submit\" onClick={handleSubmitTest}>\n                                Submit\n                                </button>*/}\n                                        </div>\n                                    </CCol>\n                                </CCardBody>\n                            </CCard>\n                            <CRow xs=\"4\">\n\n                                <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                                    <CButton block variant=\"outline\" color=\"info\" id=\"workflowSave\" onClick={handleSubmit}><Save/> Enregister</CButton>\n                                </CCol>\n                                <CCol col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                                    <CButton block variant=\"outline\" color=\"danger\"><Cancel />\n                                        Annuler</CButton>\n                                </CCol>\n\n                            </CRow>\n                        </CForm>\n                    </CCardBody>\n                </CCard>\n\n            </CCol>\n        </>\n    )\n}\nexport default withStyles({ ...useStyles}, { withTheme: true })(NotificationSettings) ;\n\n"],"sourceRoot":""}